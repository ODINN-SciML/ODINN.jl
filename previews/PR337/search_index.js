var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"This is an exhaustive list of all the types and functions in ODINN.jl, Huginn.jl, Muninn.jl and Sleipnir.jl.","category":"page"},{"location":"api/#ODINN.AbstractAdjointMethod-api","page":"API","title":"ODINN.AbstractAdjointMethod","text":"AbstractAdjointMethod\n\nAbstract type representing the flavor of AD and adjoint to be used to compute the gradient of the cost function. There are two parts where one can play with how the gradient is propagated: the iceflow model VJP and the adjoint of the ODE solver. The VJP of the iceflow model can be computed using either AD (Zygote or Enzyme), the discrete, or the continuous adjoint of the iceflow model. As for the computation of the adjoint of the ODE solution, it can be handled by SciMLSensitivity, or computed using the adjoint implemented in ODINN.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.AbstractVJPMethod-api","page":"API","title":"ODINN.AbstractVJPMethod","text":"AbstractVJPMethod\n\nAbstract type representing the flavor of AD to be used to compute the VJP inside the gradient of the cost function.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.ContinuousAdjoint-api","page":"API","title":"ODINN.ContinuousAdjoint","text":"ContinuousAdjoint{\n    F <: AbstractFloat,\n    I <: Integer,\n    VJP <: AbstractVJPMethod\n    } <: AbstractAdjointMethod\n\nContinuous adjoint of SIA2D with manual implementation of the backward in the ODE scheme.\n\nFields\n\nVJP_method::VJP: Type of AbstractVJPMethod used to compute VJPs inside adjoint   calculation.\nsolver::Any: The solver to be used for adjoint.\nreltol::F: Relative tolerance to be used in the ODE solver of the adjoint.\nabstol::F: Absolute tolerance to be used in the ODE solver of the adjoint.\nn_quadrature::I: Number of nodes used in the Gauss quadrature for the numerical   integration of the loss function.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.ContinuousVJP-api","page":"API","title":"ODINN.ContinuousVJP","text":"Continuous manual implementation of the VJP required inside the adjoint calculation. It relies in the continuous expresion for the adjoint operation based on the functional for of the forward PDE.\n\nContinuousVJP\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.DiscreteAdjoint-api","page":"API","title":"ODINN.DiscreteAdjoint","text":"DiscreteAdjoint{VJP <: AbstractVJPMethod} <: AbstractAdjointMethod\n\nDiscrete adjoint of SIA2D with manual implementation of the backward in the ODE scheme.\n\nFields\n\nVJP_method: Type of AbstractVJPMethod used to compute VJPs inside adjoint   calculation.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.DiscreteVJP-api","page":"API","title":"ODINN.DiscreteVJP","text":"Discrete manual implementation of the VJP required inside the adjoint calculation. This implements the pullback function for the function to differentiate.\n\nDiscreteVJP\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.DummyAdjoint-api","page":"API","title":"ODINN.DummyAdjoint","text":"Struct to provide a dummy gradient. It does not have to be the true gradient. Mainly used to test that the optimization pileline works independenly of the gradient calculation.\n\nDummyAdjoint\n\nFields:\n\ngrad::Function: In-place function f(du, u; kwargs) that fills the first   argument du with the gradient values.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.EnzymeVJP-api","page":"API","title":"ODINN.EnzymeVJP","text":"Enzyme implementation of VJP used inside the adjoint calculation.\n\nEnzymeVJP\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.FunctionalInversion-Union{Tuple{P}, Tuple{M}, Tuple{G}, Tuple{M, Vector{G}, P}} where {G<:AbstractGlacier, M<:Sleipnir.Model, P<:Sleipnir.Parameters}-api","page":"API","title":"ODINN.FunctionalInversion","text":"function FunctionalInversion(\n    model::Sleipnir.Model,\n    glaciers::Vector{G},\n    parameters::Sleipnir.Parameters\n) where {G <: Sleipnir.AbstractGlacier}\n\nConstructor for FunctionalInversion struct with glacier model information, glaciers, and parameters.\n\nArguments\n\nmodel::Sleipnir.Model: The model used for the simulation.\nglaciers::Vector{G}: A vector of glaciers involved in the simulation.\nparameters::Sleipnir.Parameters: The parameters used for the simulation.\n\nReturns\n\nFunctionalInversion: A new instance of the FunctionalInversion struct.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.FunctionalInversion-api","page":"API","title":"ODINN.FunctionalInversion","text":"mutable struct FunctionalInversion <: Simulation\n\nAn object representing a functional inversion simulation (i.e. the inversion of a function using some data-driven regressor).\n\nFields\n\nmodel::Sleipnir.Model: The model used for the simulation.\nglaciers::Vector{Sleipnir.AbstractGlacier}: A vector of glaciers involved in the simulation.\nparameters::Sleipnir.Parameters: The parameters used for the simulation.\nresults::Vector{Results}: A vector to store the results of the simulation.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.Hyperparameters-Tuple{}-api","page":"API","title":"ODINN.Hyperparameters","text":"Hyperparameters(; current_epoch::Int64 = 1, current_minibatch::Int64 = 1, loss_history::Vector{Float64} = Vector{Float64}(), optimizer::Union{Optim.FirstOrderOptimizer, Flux.Optimise.AbstractOptimiser, Optimisers.AbstractRule} = BFGS(initial_stepnorm=0.001), loss_epoch::Float64 = 0.0, epochs::Int64 = 50, batch_size::Int64 = 15)\n\nConstructs a Hyperparameters object with the specified parameters.\n\nArguments\n\ncurrent_epoch::Int64: The current epoch number. Defaults to 1.\ncurrent_minibatch::Int64: The current minibatch number. Defaults to 1.\nloss_history::Vector{Float64}: A vector to store the history of loss values. Defaults to an empty vector.\noptimizer::Union{Optim.FirstOrderOptimizer, Flux.Optimise.AbstractOptimiser, Optimisers.AbstractRule}: The optimizer to be used. Defaults to BFGS(initial_stepnorm=0.001).\nloss_epoch::Float64: The loss value for the current epoch. Defaults to 0.0.\nepochs::Int64: The total number of epochs. Defaults to 50.\nbatch_size::Int64: The size of each minibatch. Defaults to 15.\n\nReturns\n\nA Hyperparameters object initialized with the provided values.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.Hyperparameters-api","page":"API","title":"ODINN.Hyperparameters","text":"mutable struct Hyperparameters{F <: AbstractFloat, I <: Int} <: AbstractParameters\n\nA mutable struct that holds hyperparameters for training a machine learning model.\n\nKeyword arguments\n\ncurrent_epoch::I: The current epoch number.\ncurrent_minibatch::I: The current minibatch number.\nloss_history::Vector{F}: A vector storing the history of loss values.\noptimizer::Union{Optim.FirstOrderOptimizer, Flux.Optimise.AbstractOptimiser, Optimisers.AbstractRule}: The optimizer used for training.\nloss_epoch::F: The loss value for the current epoch.\nepochs::I: The total number of epochs for training.\nbatch_size::I: The size of each minibatch.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.Inversion-Union{Tuple{G}, Tuple{Sleipnir.Model, Vector{G}, Sleipnir.Parameters}} where G<:AbstractGlacier-api","page":"API","title":"ODINN.Inversion","text":"Inversion(model::Sleipnir.Model, glaciers::Vector{G}, parameters::Sleipnir.Parameters) where {G <: Sleipnir.AbstractGlacier}\n\nCreate an Inversion object using the provided model, glaciers, and parameters.\n\nArguments\n\nmodel::Sleipnir.Model: The model to be used for the inversion.\nglaciers::Vector{G}: A vector of glaciers, where each glacier is a subtype of Sleipnir.AbstractGlacier.\nparameters::Sleipnir.Parameters: The parameters to be used for the inversion.\n\nReturns\n\ninversion: An Inversion object initialized with the provided model, glaciers, and parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.Inversion-api","page":"API","title":"ODINN.Inversion","text":"Inversion <: Simulation\n\nA mutable struct that represents an inversion simulation.\n\nFields\n\nmodel::Sleipnir.Model: The model used for the inversion.\nglaciers::Vector{Sleipnir.AbstractGlacier}: A vector of glaciers involved in the inversion.\nparameters::Sleipnir.Parameters: The parameters used for the inversion.\ninversion::Vector{InversionResults}: A vector of results from the inversion.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.InversionParameters-Union{Tuple{}, Tuple{F}} where F<:AbstractFloat-api","page":"API","title":"ODINN.InversionParameters","text":"InversionParameters{F<:AbstractFloat}(;\n    initial_conditions::Vector{F} = [1.0],\n    lower_bound::Vector{F} = [0.0],\n    upper_bound::Vector{F} = [Inf],\n    regions_split::Vector{Int} = [1, 1],\n    x_tol::F = 1.0e-3,\n    f_tol::F = 1.0e-3,\n    solver = BFGS()\n)\n\nInitialize the parameters for the inversion process.\n\nArguments\n\ninitial_conditions::Vector{F}: Starting point for optimization.\nlower_bound::Vector{F}: Lower bounds for optimization variables.\nupper_bound::Vector{F}: Upper bounds for optimization variables.\nregions_split::Vector{Int}: Defines the amount of region split based on altitude and distance to border for the inversion process.\nx_tol::F: Tolerance for variables convergence.\nf_tol::F: Tolerance for function value convergence.\nsolver: Optimization solver to be used.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.InversionParameters-api","page":"API","title":"ODINN.InversionParameters","text":"InversionParameters{F<:AbstractFloat}\n\nA mutable struct that holds parameters for inversion processes. This struct is a subtype of AbstractParameters.\n\nFields\n\ninitial_conditions::Vector{F}: A vector of initial conditions.\nlower_bound::Vector{F}: A vector specifying the lower bounds for the parameters.\nupper_bound::Vector{F}: A vector specifying the upper bounds for the parameters.\nregions_split::Vector{Int}: A vector indicating how the regions are split.\nx_tol::F: The tolerance for the solution's x-values.\nf_tol::F: The tolerance for the function values.\nsolver::Any: The solver to be used for the inversion process.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.InversionResults-api","page":"API","title":"ODINN.InversionResults","text":"mutable struct InversionResults{F <: Real}\n\nA structure to store the results of an inversion simulation.\n\nFields\n\nrgi_id::Union{String, Nothing}: The RGI identifier, which can be a string or nothing.\nA::F: Area parameter.\nn::F: Exponent parameter.\nC::Matrix{F}: Coefficient matrix.\nH_pred::Matrix{F}: Predicted height matrix.\nH_obs::Matrix{F}: Observed height matrix.\nH_diff::Matrix{F}: Difference between predicted and observed height matrices.\nV_pred::Matrix{F}: Predicted volume matrix.\nV_obs::Matrix{F}: Observed volume matrix.\nV_diff::Matrix{F}: Difference between predicted and observed volume matrices.\nMSE::F: Mean squared error.\nΔx::F: Grid spacing in the x-direction.\nΔy::F: Grid spacing in the y-direction.\nlon::F: Longitude.\nlat::F: Latitude.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.NeuralNetwork-Union{Tuple{TAR}, Tuple{NamedTupleType}, Tuple{ComponentArrayType}, Tuple{ChainType}, Tuple{P}} where {P<:Sleipnir.Parameters, ChainType<:Lux.Chain, ComponentArrayType<:ComponentArrays.ComponentArray, NamedTupleType<:NamedTuple, TAR<:AbstractTarget}-api","page":"API","title":"ODINN.NeuralNetwork","text":"NN(params::Parameters;\n    architecture::Union{Flux.Chain, Nothing} = nothing,\n    θ::Union{Vector{AbstractFloat}, Nothing} = nothing)\n\nCreates a new feed-forward neural network.\n\nKeyword arguments\n\narchitecture: Flux.Chain neural network architecture (optional)\nθ: Neural network parameters (optional)\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.NeuralNetwork-api","page":"API","title":"ODINN.NeuralNetwork","text":"NeuralNetwork{\n    ChainType <: Lux.Chain,\n    ComponentVectorType <: ComponentVector,\n    NamedTupleType <: NamedTuple\n} <: MLmodel\n\nFeed-forward neural network.\n\nFields\n\narchitecture::ChainType: Flux.Chain neural network architecture\nθ::ComponentVectorType: Neural network parameters\nst::NamedTupleType: Neural network status\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.SIA2D_D_target-api","page":"API","title":"ODINN.SIA2D_D_target","text":"SIA2D_D_target(; interpolation=:None, n_interp_half=20,\n                 prescale=nothing, postscale=nothing)\n\nInversion of general diffusivity as a function of physical parameters.\n\nD(H, ∇S, θ) = H * NN(H, ∇S; θ)\n\nSo now we are learning the velocoty field given by D * ∇S. This inversion is similar to learnign the velocity field assuming that this is parallel to the gradient in surface ∇S.\n\nArguments\n\ninterpolation::Symbol = :None: Specifies the interpolation method. Options include :Linear, :None.\nn_interp_half::Int = 20: Half-width of the interpolation stencil. Determines resolution of interpolation.\nprescale::Union{Fin, Nothing} = nothing: Optional prescaling function or factor applied before parametrization. Must be of type Fin or nothing.\npostscale::Union{Fout, Nothing} = nothing: Optional postscaling function or factor applied after parametrization. Must be of type Fout or nothing.\n\nType Parameters\n\nFin: Type of the prescale function or operator.\nFout: Type of the postscale function or operator.\n\nSupertype\n\nAbstractSIA2DTarget: Inherits from the abstract target type for 2D SIA modeling.\n\nReturns\n\nAn instance of SIA2D_D_target configured with optional scaling and interpolation parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.SIA2D_foo_target-api","page":"API","title":"ODINN.SIA2D_foo_target","text":"Create foo target for testing\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.SciMLSensitivityAdjoint-api","page":"API","title":"ODINN.SciMLSensitivityAdjoint","text":"Struct that defines the SciMLSensitivity adjoint flavor. This is the default behavior in ODINN.\n\nSciMLSensitivityAdjoint\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.TrainingStats-Union{Tuple{}, Tuple{I}, Tuple{F}} where {F<:AbstractFloat, I<:Int64}-api","page":"API","title":"ODINN.TrainingStats","text":"function TrainingStats(;\n    retcode::Union{String, Nothing} = nothing,\n    losses::Vector{F} = Float64[],\n    niter::I = 0\n) where {F <: AbstractFloat, I <: Int}\n\nConstructor for TrainingStats object used to store important information during training. \n\nArguments\n\nretcode: Report code of the optimization.\nlosses: Vector storing the value of the loss function at each iteration. \nniter: Total number of iterations/epochs.\nθ: Parameters of neural network after training\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.TrainingStats-api","page":"API","title":"ODINN.TrainingStats","text":"mutable struct TrainingStats\n\nAn object with the information of the training. \n\nFields\n\nretcode: Report code of the optimization.\nlosses: Vector storing the value of the loss function at each iteration. \nniter: Total number of iterations/epochs.\nθ: Parameters of neural network after training\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.UDEparameters-Union{Tuple{}, Tuple{ADJ}} where ADJ<:AbstractAdjointMethod-api","page":"API","title":"ODINN.UDEparameters","text":"UDEparameters(; sensealg, optim_autoAD, grad, optimization_method, loss_type, empirical_loss_function, scale_loss, target) where {ADJ <: AbstractAdjointMethod}\n\nCreate a UDEparameters object for configuring the sensitivity analysis and optimization of a Universal Differential Equation (UDE).\n\nKeyword Arguments\n\nsensealg::SciMLBase.AbstractAdjointSensitivityAlgorithm: The sensitivity algorithm to use for adjoint calculations. Defaults to GaussAdjoint(autojacvec=SciMLSensitivity.EnzymeVJP()).\noptim_autoAD::AbstractADType: The automatic differentiation type for optimization. Defaults to Optimization.AutoEnzyme().\ngrad::ADJ: The adjoint gradient computation method. Defaults to SciMLSensitivityAdjoint().\noptimization_method::String: The optimization method to use. Must be either \"AD+AD\" or \"AD+Diff\". Defaults to \"AD+AD\".\nloss_type::String: The type of loss function to use. Must be either \"V\" (velocity) or \"H\" (thickness). Defaults to \"V\".\nempirical_loss_function::AbstractLoss: The loss function to use for optimization. Defaults to L2Sum().\nscale_loss::Bool: Whether to scale the loss function. Defaults to true.\ntarget::Union{Symbol, Nothing}: The target variable for optimization. Defaults to :A.\n\nReturns\n\nA UDEparameters object configured with the specified sensitivity, optimization, and loss settings.\n\nDescription\n\nThis function creates a UDEparameters object that encapsulates the configuration for sensitivity analysis, optimization, and loss computation in a Universal Differential Equation (UDE) framework. It verifies that the provided optimization_method and loss_type are valid and constructs the solver parameters accordingly.\n\nNotes\n\nThe optimization_method must be either \"AD+AD\" (automatic differentiation for both forward and backward passes) or \"AD+Diff\" (automatic differentiation combined with finite differences).\nThe loss_type must be either \"V\" (velocity-based loss) or \"H\" (thickness-based loss).\nThe empirical_loss_function determines how the loss is computed during optimization.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.UDEparameters-api","page":"API","title":"ODINN.UDEparameters","text":"A mutable struct that holds parameters for a UDE (Universal Differential Equation).\n\nUDEparameters{ADJ <: AbstractAdjointMethod} <: AbstractParameters\n\nFields\n\nsensealg::SciMLBase.AbstractAdjointSensitivityAlgorithm: The sensitivity algorithm used for adjoint sensitivity analysis.\noptimization_method::String: The optimization method to be used.\nloss_type::String: The type of loss function to be used.\nscale_loss::Bool: A boolean indicating whether to scale the loss.\ntarget::Symbol: The target variable for the optimization.\n\n\n\n\n\n","category":"type"},{"location":"api/#ODINN.A_law_PatersonCuffey-Tuple{}-api","page":"API","title":"ODINN.A_law_PatersonCuffey","text":"A_law_PatersonCuffey()\n\nReturns a law of the coefficient A as a polynomial of the temperature. The values used to fit the polynomial come from Peterson & Cuffey.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.CallbackOptimizationSet-Tuple{Any, Any}-api","page":"API","title":"ODINN.CallbackOptimizationSet","text":"CallbackOptimizationSet(θ, l; callbacks)\n\nHelper to combine callbacks for Optimization function. This executes the action of each callback.   (equivalent to CallbackSet for DifferentialEquations.jl)\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.Diffusivity-Tuple{SIA2D_D_target}-api","page":"API","title":"ODINN.Diffusivity","text":"Diffusivity(target::SIA2D_D_target; H, ∇S, θ, iceflow_model, ml_model, glacier, params)\n\nCompute the effective diffusivity field for a 2D shallow ice model using the diagnostic target and  a predicted velocity matrix U.\n\nThis function uses a learned or specified model to estimate the velocity matrix U, then calculates the diffusivity as either H .* U (if dimensions match) or the averaged H times U if dimensions differ by one grid cell (staggered grid). Errors if dimensions are incompatible.\n\nArguments\n\ntarget::SIA2D_D_target: Diagnostic target object defining interpolation and scaling rules.\n\nKeyword Arguments\n\nH: Ice thickness.\n∇S: Ice surface slope.\nθ: Parameters of the model.\niceflow_model: Iceflow model used for simulation.\nml_model: Machine learning model used for simulation.\nglacier: Glacier data.\nparams: Model parameters.\n\nReturns\n\nA matrix of diffusivity values with the same shape as H or staggered by one cell, depending on U.\n\nThrows\n\nAn error if the dimensions of U and H are not compatible for diffusivity calculation.\n\nNotes\n\nUses predict_U_matrix internally to obtain velocity-like terms. Supports both grid-matched  and staggered configurations by averaging H where necessary.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.Diffusivity_scalar-Tuple{SIA2D_D_target}-api","page":"API","title":"ODINN.Diffusivity_scalar","text":"Diffusivity_scalar(target::SIA2D_D_target; h, ∇s, θ, iceflow_model, ml_model, glacier, params)\n\nScalar version if Diffusivity().\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.GaussQuadrature-Tuple{Any, Any, Int64}-api","page":"API","title":"ODINN.GaussQuadrature","text":"Gauss Quadratrue for numerical integration\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.Model-Union{Tuple{}, Tuple{MLM}, Tuple{MBM}, Tuple{IFM}} where {IFM<:IceflowModel, MBM<:MBmodel, MLM<:ODINN.MLmodel}-api","page":"API","title":"ODINN.Model","text":"Model(; iceflow::Union{IFM, Vector{IFM}, Nothing}, mass_balance::Union{MBM, Vector{MBM}, Nothing}, machine_learning::Union{MLM, Nothing}) where {IFM <: IceflowModel, MBM <: MBmodel, MLM <: MLmodel}\n\nCreates a new model instance using the provided iceflow, mass balance, and machine learning components.\n\nArguments\n\niceflow::Union{IFM, Vector{IFM}, Nothing}: The iceflow model(s) to be used. Can be a single model, a vector of models, or nothing.\nmass_balance::Union{MBM, Vector{MBM}, Nothing}: The mass balance model(s) to be used. Can be a single model, a vector of models, or nothing.\nmachine_learning::Union{MLM, Nothing}: The machine learning model to be used. Can be a single model or nothing.\n\nReturns\n\nmodel: A new instance of Sleipnir.Model initialized with the provided components.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.Parameters-Tuple{}-api","page":"API","title":"ODINN.Parameters","text":"Constructor for the Parameters type. Since some of the subtypes of parameters are defined in different packages of the ODINN ecosystem, this constructor will call the constructors of the different subtypes and return a Parameters object with the corresponding subtypes.  The Parameters mutable struct is defined in Sleipnir.jl using abstract types, which are later on defined in the different packages of the ODINN ecosystem.\n\nParameters(;\n        physical::PhysicalParameters = PhysicalParameters(),\n        simulation::SimulationParameters = SimulationParameters(),\n        solver::SolverParameters = SolverParameters(),\n        hyper::Hyperparameters = Hyperparameters(),\n        UDE::UDEparameters = UDEparameters()\n        inversion::InversionParameters = InversionParameters()\n        )\n\nKeyword arguments\n\nphysical::PhysicalParameters: Physical parameters for the simulation.\nsimulation::SimulationParameters: Parameters related to the simulation setup.\nsolver::SolverParameters: Parameters for the solver configuration.\nhyper::Hyperparameters: Hyperparameters for the model.\nUDE::UDEparameters: Parameters specific to the UDE (Universal Differential Equation).\ninversion::InversionParameters: Parameters for inversion processes.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.SIA2D_UDE!-Union{Tuple{I}, Tuple{R}, Tuple{Any, Matrix{R}, Matrix{R}, FunctionalInversion, Any, R, I}} where {R<:Real, I<:Integer}-api","page":"API","title":"ODINN.SIA2D_UDE!","text":"currently just use for Enzyme\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.SIA2D_UDE-Union{Tuple{SIM}, Tuple{I}, Tuple{R}, Tuple{Matrix{R}, Any, R, SIM, I}} where {R<:Real, I<:Integer, SIM<:Simulation}-api","page":"API","title":"ODINN.SIA2D_UDE","text":"Wrapper to pass a parametrization to the SIA2D\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.SIA2D_grad!-Tuple{Any, Any, FunctionalInversion}-api","page":"API","title":"ODINN.SIA2D_grad!","text":"Inverse with batch\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.SIA2D_grad_batch!-Tuple{Any, FunctionalInversion}-api","page":"API","title":"ODINN.SIA2D_grad_batch!","text":"Inverse by glacier\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.VJP_λ_∂SIA_discrete-Union{Tuple{SIM}, Tuple{I}, Tuple{R}, Tuple{Matrix{R}, Matrix{R}, Any, SIM, R}} where {R<:Real, I<:Integer, SIM<:Simulation}-api","page":"API","title":"ODINN.VJP_λ_∂SIA_discrete","text":"VJP_λ_∂SIA_discrete(\n    ∂dH::Matrix{R},\n    H::Matrix{R},\n    simulation::SIM,\n    t::R;\n    batch_id::Union{Nothing, I} = nothing\n)\n\nCompute an out-of-place adjoint step of the Shallow Ice Approximation PDE. Given an output gradient, it backpropagates the gradient to the inputs H and A. To some extent, this function is equivalent to VJPλ∂SIA∂Hcontinuous and VJPλ∂SIA∂θcontinuous.\n\nArguments:\n\n∂dH::Matrix{R}: Output gradient to backpropagate.\nH::Matrix{R}: Ice thickness which corresponds to the input state of the SIA2D.\nsimulation::SIM: Simulation parameters.\nt::R: Time value, not used as SIA2D is time independent.\nbatch_id::Union{Nothing, I}: Batch index.\n\nReturns:\n\n∂H::Matrix{R}: Input gradient wrt H.\n∂A::F: Input gradient wrt A.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.VJP_λ_∂SIA∂H_continuous-Union{Tuple{SIM}, Tuple{I}, Tuple{R}, Tuple{Matrix{R}, Matrix{R}, Any, SIM, R}} where {R<:Real, I<:Integer, SIM<:Simulation}-api","page":"API","title":"ODINN.VJP_λ_∂SIA∂H_continuous","text":"VJP_λ_∂SIA∂H_continuous(\n    λ::Matrix{R},\n    H::Matrix{R},\n    simulation::SIM,\n    t::R;\n    batch_id::Union{Nothing, I} = nothing\n)\n\nImplementation of the continuous adjoint of the SIA2D equation with respect to H. Given λ and H, it returns the VJP of λ^T * ∂(SIA2D)/∂H (H).\n\nArguments:\n\nλ::Matrix{R}: Adjoint state, also called output gradient in reverse-mode AD.\nH::Matrix{R}: Ice thickness which corresponds to the input state of the SIA2D.\nsimulation::SIM: Simulation parameters.\nt::R: Time value, not used as SIA2D is time independent.\nbatch_id::Union{Nothing, I}: Batch index.\n\nReturns:\n\ndλ::Matrix{R}: Jacobian vector product, also called input gradient in reverse-mode AD.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.VJP_λ_∂SIA∂θ_continuous-Union{Tuple{SIM}, Tuple{I}, Tuple{R}, Tuple{Matrix{R}, Matrix{R}, Any, SIM, R}} where {R<:Real, I<:Integer, SIM<:Simulation}-api","page":"API","title":"ODINN.VJP_λ_∂SIA∂θ_continuous","text":"VJP_λ_∂SIA∂θ_continuous(\n    θ,\n    λ::Matrix{R},\n    H::Matrix{R},\n    simulation::SIM,\n    t::R;\n    batch_id::Union{Nothing, I} = nothing\n)\n\nImplementation of the continuous adjoint of the SIA2D equation with respect to θ. Given λ, H and θ, it returns the VJP of λ^T * ∂(SIA2D)/∂θ (θ).\n\nArguments:\n\nθ: Vector of parameters\nλ::Matrix{R}: Adjoint state, also called output gradient in reverse-mode AD.\nH::Matrix{R}: Ice thickness which corresponds to the input state of the SIA2D.\nsimulation::SIM: Simulation parameters.\nt::R: Time value, not used as SIA2D is time independent.\nbatch_id::Union{Nothing, I}: Batch index.\n\nReturns:\n\ndλ::Matrix{R}: Jacobian vector product, also called input gradient in reverse-mode AD.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.apply_parametrization!-Tuple{SIA2D_D_target}-api","page":"API","title":"ODINN.apply_parametrization!","text":"\n\n\n\n","category":"method"},{"location":"api/#ODINN.callback_diagnosis-Tuple{Any, Any, Any}-api","page":"API","title":"ODINN.callback_diagnosis","text":"callback_diagnosis(θ, l, simulation)\n\nCallback function to track and diagose training. It includes print and updates in simulation::Simulation.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.callback_plots_A-Tuple{Any, Any, Any}-api","page":"API","title":"ODINN.callback_plots_A","text":"callback_plots_A(θ, l, simulation)\n\nCallback function to generate plots during training.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.cap_D-Tuple{Any}-api","page":"API","title":"ODINN.cap_D","text":"Normalization of D to cap at a maximum physical value\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.create_interpolation-Tuple{Matrix}-api","page":"API","title":"ODINN.create_interpolation","text":"function create_interpolation(A::Matrix; n_interp_half::Int)\n\nFunction to create an intepolation for AD computation combining uniform and quantiles.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.enable_multiprocessing-Tuple{Sleipnir.Parameters}-api","page":"API","title":"ODINN.enable_multiprocessing","text":"enable_multiprocessing(params::Sleipnir.Parameters) -> Int\n\nConfigures and enables multiprocessing based on the provided simulation parameters.\n\nArguments\n\nparams::Sleipnir.Parameters: A parameter object containing simulation settings,  including the number of workers (params.simulation.workers) and whether multiprocessing  is enabled (params.simulation.multiprocessing).\n\nBehavior\n\nIf multiprocessing is enabled (params.simulation.multiprocessing == true) and the  specified number of workers (params.simulation.workers) is greater than 0:\nAdds the required number of worker processes if the current number of processes  (nprocs()) is less than the specified number of workers.\nSuppresses precompilation output on the worker processes and ensures the ODINN  module is loaded on all workers.\nIf the specified number of workers is 1, removes all worker processes.\n\nReturns\n\nThe number of worker processes (nworkers()) after configuration.\n\nNotes\n\nThis function uses @eval to dynamically add or remove worker processes.\nPrecompilation output is suppressed on workers to reduce noise in the console.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.generate_batches-Tuple{S} where S<:Simulation-api","page":"API","title":"ODINN.generate_batches","text":"generate_batches(simulation::S; shuffle=false) where {S <: Simulation}\n\nGenerate a data loader for batching simulations, optionally shuffling the batches.\n\nArguments\n\nsimulation::S: A Simulation object (or subtype of Simulation) containing the data to be batched.\nshuffle::Bool=false: A flag indicating whether to shuffle the batches. Defaults to false.\n\nReturns\n\nA DataLoader object that provides batched access to the simulation data.\n\nDescription\n\nThis function creates a DataLoader for batching the provided simulation object. The DataLoader allows for efficient iteration over the simulation data in batches. The batch size is set to 1 by default, and the shuffle flag determines whether the batches are shuffled. If shuffle is enabled, a warning is logged to indicate that the batches used for parallelization are being shuffled.\n\nNotes\n\nThe batch size is fixed at 1 in this implementation. To modify the batch size, you may need to adjust the DataLoader initialization.\nShuffling the batches may affect reproducibility and parallelization behavior.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.generate_fake_A!-Union{Tuple{G}, Tuple{Vector{G}, Function}} where G<:AbstractGlacier-api","page":"API","title":"ODINN.generate_fake_A!","text":"generate_fake_A!(glaciers::Vector{G}, fakeA::Function) where {G <: Sleipnir.AbstractGlacier}\n\nGenerate and assign a fake flow rate factor A for a vector of glaciers based on their long-term temperatures.\n\nArguments\n\nglaciers::Vector{G}: A vector of glacier objects of type G, where G is a subtype of Sleipnir.AbstractGlacier.\nfakeA::Function: A function that computes the flow rate factor A based on the mean long-term temperature of a glacier.\n\nDescription\n\nThis function iterates over a vector of glaciers and computes the flow rate factor A for each glacier using the provided fakeA function. The flow rate factor is computed based on the mean of the glacier's long-term temperature (longterm_temps) and is assigned to the glacier's A property.\n\nNotes\n\nThe fakeA function should take a single argument (temperature) and return the corresponding flow rate factor.\nThis function modifies the glaciers vector in place by updating the A property of each glacier.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.generate_glacier_prediction!-Union{Tuple{G}, Tuple{Vector{G}, Sleipnir.Parameters, Sleipnir.Model, Vector{Float64}}} where G<:AbstractGlacier-api","page":"API","title":"ODINN.generate_glacier_prediction!","text":"Generate fake forward simulation\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.generate_ground_truth-Union{Tuple{F}, Tuple{G}, Tuple{Vector{G}, Union{Function, Symbol, Polynomials.Polynomial}, Sleipnir.Parameters, Sleipnir.Model, Vector{F}}} where {G<:AbstractGlacier, F<:AbstractFloat}-api","page":"API","title":"ODINN.generate_ground_truth","text":"generate_ground_truth(glaciers::Vector{G}, law::Symbol, params, model, tstops::Vector{F}) where {G <: Sleipnir.AbstractGlacier, F <: AbstractFloat}\n\nGenerate ground truth data for a glacier simulation by applying a specified flow law and running a forward model.\n\nArguments\n\nglaciers::Vector{G}: A vector of glacier objects of type G, where G is a subtype of Sleipnir.AbstractGlacier.\nlaw::Symbol: The flow law to use for the simulation. Currently supports :PatersonCuffey.\nparams: Simulation parameters, typically of type Sleipnir.Parameters.\nmodel: The model to use for the simulation, typically of type Sleipnir.Model.\ntstops::Vector{F}: A vector of time steps (of type F <: AbstractFloat) at which the simulation will be evaluated.\n\nDescription\n\nApplies the specified flow law (law) to generate a polynomial function for the flow rate factor A.\nGenerates a fake flow rate factor A for each glacier based on the long-term temperature of the glacier.\nRuns a forward model simulation for the glaciers using the provided parameters, model, and time steps.\n\nNotes\n\nIf an unsupported flow law is provided, an error is logged.\nThe function modifies the glaciers vector in place by updating their flow rate factor A and running the forward model.\n\nExample\n\nglaciers = [glacier1, glacier2] # dummy example\nlaw = :PatersonCuffey\nparams = Sleipnir.Parameters(...) # to be filled\nmodel = Sleipnir.Model(...) # to be filled\ntstops = 0.0:1.0:10.0\n\ngenerate_ground_truth(glaciers, law, params, model, tstops)\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.generate_simulation_batches-Tuple{FunctionalInversion}-api","page":"API","title":"ODINN.generate_simulation_batches","text":"generate_simulation_batches(simulation::FunctionalInversion)\n\nGenerate batches of simulations from a FunctionalInversion object for parallel or batched processing.\n\nArguments\n\nsimulation::FunctionalInversion: A FunctionalInversion object containing the model, glaciers, parameters, results, and statistics for the simulation.\n\nReturns\n\nA vector of FunctionalInversion objects, each representing a batch of simulations. Each batch contains a subset of glaciers, models, and results from the original simulation.\n\nDescription\n\nThis function splits the glaciers and associated data in the simulation object into smaller batches for processing. Each batch is represented as a new FunctionalInversion object. The number of batches is determined by the nbatches variable (currently set to 1). If the simulation results are empty, the function creates batches with empty results. Otherwise, it includes the corresponding results for each glacier in the batches.\n\nNotes\n\nThe number of glaciers (ninstances) must be divisible by the number of batches (nbatches). An assertion is used to enforce this condition.\nThe function currently defaults to nbatches = 1, meaning no actual batching is performed. This can be updated to use simulation.parameters.hyper.batchsize for dynamic batching.\nIf the simulation results are empty, the function creates batches with empty results objects.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.get_default_NN-Tuple{Any, Any}-api","page":"API","title":"ODINN.get_default_NN","text":"get_NN(θ_trained, ft; lightNN=false)\n\nGenerates a neural network.\n\nArguments\n\nθ_trained: Pre-trained neural network parameters (optional).\nft: Float type used.\nlightNN: Boolean that determines if a light architecture is returned or not.\n\nReturns\n\nUA: Lux.Chain neural network architecture.\nθ: Neural network parameters.\nst: Lux state.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.get_rheology_law-Tuple{Function}-api","page":"API","title":"ODINN.get_rheology_law","text":"get_rheology_law(law::Function)\n\nReturn the provided rheology law function without modification.  This just uses multiple dispatch to handle cases where the rheology law is already a function.\n\nArguments\n\nlaw::Function: A function representing the rheology law for the flow rate factor A.\n\nReturns\n\nThe input function law, unchanged.\n\nDescription\n\nThis function is a simple bypass that uses multiple dispatch to handle cases where the rheology law is already provided as a function. It directly returns the input function without any modifications.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.get_rheology_law-Tuple{Polynomials.Polynomial}-api","page":"API","title":"ODINN.get_rheology_law","text":"get_rheology_law(law::Polynomial)\n\nConvert a polynomial into a rheology law function for the flow rate factor A.\n\nArguments\n\nlaw::Polynomial: A polynomial representing the rheology law for the flow rate factor A.\n\nReturns\n\nA function fakeA(T) that computes the flow rate factor A for a given temperature T using the provided polynomial.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.get_rheology_law-Tuple{Symbol}-api","page":"API","title":"ODINN.get_rheology_law","text":"get_rheology_law(law::Symbol)\n\nRetrieve the rheology law function for the flow rate factor A based on the specified law.\n\nArguments\n\nlaw::Symbol: A symbol representing the rheology law to use. Currently supports :PatersonCuffey.\n\nReturns\n\nA function fakeA(T) that computes the flow rate factor A for a given temperature T using the specified rheology law.\n\nDescription\n\nThis function retrieves the parametrization law for the glacier's flow rate factor A. If the specified law is :PatersonCuffey, it uses the A_law_PatersonCuffey polynomial to define the flow rate factor as a function of temperature. If an unsupported law is provided, an error is logged.\n\nNotes\n\nThe returned function fakeA(T) can be used to compute the flow rate factor for a given temperature T.\nIf an unknown law is provided, the function logs an error and does not return a valid function.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.merge_batches-Tuple{Vector}-api","page":"API","title":"ODINN.merge_batches","text":"merge_batches(results::Vector)\n\nMerge simulation results from multiple batches into a single collection.\n\nArguments\n\nresults::Vector: A vector where each element is a collection of results (e.g., arrays or vectors) from a batch.\n\nReturns\n\nA single collection containing all the merged results from the input batches.\n\nDescription\n\nThis function takes a vector of results from multiple simulation batches and merges them into a single collection using vertical concatenation (vcat). It is useful for combining results that were processed in parallel or in separate batches.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.normalize-Union{Tuple{Any}, Tuple{F}} where F<:AbstractFloat-api","page":"API","title":"ODINN.normalize","text":"normalize(X; lims::Tuple{F, F}; method = :shift) where {F <: AbstractFloat}\n\nNormalize a variable by using an affine transformation defined by some input lower and upper bounds (m, M) and transforming to O(1) scale.\n\nArguments\n\nX: Input value.\nlims::Tuple{F, F}: Lower and upper bounds to use in the affine transformation.\nmethod::Symbol: Method to scale data.\n\nReturns\n\nThe input variable scaled by the affine transformation.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.predict_A̅-Union{Tuple{F}, Tuple{Any, Any, Tuple{F, F}}} where F<:AbstractFloat-api","page":"API","title":"ODINN.predict_A̅","text":"predict_A̅(U, temp, lims::Tuple{F, F}) where {F <: AbstractFloat}\n\nPredicts the value of A with a neural network based on the long-term air temperature and on the bounds value to normalize the output of the neural network.\n\nArguments\n\nU: Neural network.\ntemp: Temperature to be fed as an input of the neural network.\nlims::Tuple{F, F}: Bounds to use for the affine transformation of the neural   network output.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.predict_U_scalar-Union{Tuple{SIA2D_D_target}, Tuple{F}} where F<:AbstractFloat-api","page":"API","title":"ODINN.predict_U_scalar","text":"\n\n\n\n","category":"method"},{"location":"api/#ODINN.printProgressLoss-NTuple{4, Any}-api","page":"API","title":"ODINN.printProgressLoss","text":"printProgressLoss(iter, total_iters, loss, improvement)\n\nPrint function to track training.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.run!-Tuple{FunctionalInversion}-api","page":"API","title":"ODINN.run!","text":"run!(simulation::FunctionalInversion)\n\nRun the training process for a given FunctionalInversion simulation.\n\nArguments\n\nsimulation::FunctionalInversion: The simulation object containing the parameters and settings for the functional inversion process.\n\nDescription\n\nThis function initiates the training of a Universal Differential Equation (UDE) for the provided simulation. It prints a message indicating the start of the training process, calls the train_UDE! function to perform the training, and collects the results in results_list. The results are intended to be saved using Sleipnir.save_results_file!, but this step is currently commented out and will be enabled once the optimization is working. Finally, the garbage collector is triggered to free up memory.\n\nNotes\n\nThe Sleipnir.save_results_file! function call is currently commented out and should be enabled once the optimization process is confirmed to be working.\nThe garbage collector is explicitly run using GC.gc() to manage memory usage.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.simulate_iceflow_UDE!-Union{Tuple{SIM}, Tuple{I}, Tuple{Any, SIM, SciMLBase.DiscreteCallback, I}} where {I<:Integer, SIM<:Simulation}-api","page":"API","title":"ODINN.simulate_iceflow_UDE!","text":"function simulateiceflowUDE!(     θ,     simulation::SIM,     cb::DiscreteCallback,     batch_id::I;     du = Huginn.SIA2D) where {I <: Integer, SIM <: Simulation}\n\nMake forward simulation of the iceflow UDE determined in du.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.store_thickness_data!-Union{Tuple{F}, Tuple{Prediction, Vector{F}}} where F<:AbstractFloat-api","page":"API","title":"ODINN.store_thickness_data!","text":"store_thickness_data!(prediction::Prediction, tstops::Vector{F}) where {F <: AbstractFloat}\n\nStore the simulated thickness data in the corresponding glaciers within a Prediction object.\n\nArguments\n\nprediction::Prediction: A Prediction object containing the simulation results and associated glaciers.\ntstops::Vector{F}: A vector of time steps (of type F <: AbstractFloat) at which the simulation was evaluated.\n\nDescription\n\nThis function iterates over the glaciers in the Prediction object and stores the simulated thickness data (H) and corresponding time steps (t) in the data field of each glacier. If the data field is empty (nothing), it initializes it with the thickness data. Otherwise, it appends the new thickness data to the existing data.\n\nNotes\n\nThe function asserts that the time steps (ts) in the simulation results match the provided tstops. If they do not match, an error is raised.\nT\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.train_UDE!-Tuple{FunctionalInversion, Optim.FirstOrderOptimizer}-api","page":"API","title":"ODINN.train_UDE!","text":"BFGS Training\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.train_UDE!-Tuple{FunctionalInversion}-api","page":"API","title":"ODINN.train_UDE!","text":"train_UDE!(simulation::FunctionalInversion)\n\nTrains UDE based on the current FunctionalInversion.\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.train_UDE!-Union{Tuple{AR}, Tuple{FunctionalInversion, AR}} where AR<:Optimisers.AbstractRule-api","page":"API","title":"ODINN.train_UDE!","text":"ADAM Training\n\n\n\n\n\n","category":"method"},{"location":"api/#ODINN.update_training_state!-Union{Tuple{S}, Tuple{S, Any}} where S<:Simulation-api","page":"API","title":"ODINN.update_training_state!","text":"update_training_state!(simulation::S, l) where {S <: Simulation}\n\nUpdate the training state to determine if the training has completed an epoch. If an epoch is completed, reset the minibatches, update the history loss, and increment the epoch count.\n\nArguments\n\nsimulation: The current state of the simulation or training process.\nl: The current loss value or other relevant metric.\n\nReturns\n\nNone. This function updates the state in-place.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.IceflowModel-api","page":"API","title":"Huginn.IceflowModel","text":"IceflowModel\n\nAn abstract type representing the base model for ice flow simulations. All specific ice flow models should subtype this abstract type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Huginn.Prediction-Union{Tuple{G}, Tuple{Sleipnir.Model, Vector{G}, Sleipnir.Parameters}} where G<:AbstractGlacier-api","page":"API","title":"Huginn.Prediction","text":"Prediction(model::Sleipnir.Model, glaciers::Vector{G}, parameters::Sleipnir.Parameters) where {G <: Sleipnir.AbstractGlacier}\n\nCreate a Prediction object using the given model, glaciers, and parameters.\n\nArguments\n\nmodel::Sleipnir.Model: The model used for prediction.\nglaciers::Vector{G}: A vector of glacier objects, where each glacier is a subtype of Sleipnir.AbstractGlacier.\nparameters::Sleipnir.Parameters: The parameters used for the prediction.\n\nReturns\n\nPrediction: A Prediction object based on the input values.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.Prediction-api","page":"API","title":"Huginn.Prediction","text":"Prediction <: Simulation\n\nA mutable struct that represents a prediction simulation.\n\nFields\n\nmodel::Sleipnir.Model: The model used for the prediction.\nglaciers::Vector{Sleipnir.AbstractGlacier}: A vector of glaciers involved in the prediction.\nparameters::Sleipnir.Parameters: The parameters used for the prediction.\nresults::Vector{Results}: A vector of results obtained from the prediction.\n\n\n\n\n\n","category":"type"},{"location":"api/#Huginn.SIA2Dmodel-Union{Tuple{Sleipnir.Parameters}, Tuple{R}, Tuple{I}} where {I<:Integer, R<:Real}-api","page":"API","title":"Huginn.SIA2Dmodel","text":"SIA2Dmodel(\n    params::Sleipnir.Parameters;\n    A::Union{R, Nothing} = nothing,\n    n::Union{R, Nothing} = nothing,\n    C::Union{R, Matrix{R}, Nothing} = nothing,\n    H₀::Matrix{R} = Matrix{Sleipnir.Float}([;;]),\n    H::Union{Matrix{R}, Nothing} = nothing,\n    H̄::Union{Matrix{R}, Nothing} = nothing,\n    S::Matrix{R} = Matrix{Sleipnir.Float}([;;]),\n    dSdx::Union{Matrix{R}, Nothing} = nothing,\n    dSdy::Union{Matrix{R}, Nothing} = nothing,\n    D::Union{Matrix{R}, Nothing} = nothing,\n    D_is_provided::Union{Bool, Nothing} = nothing,\n    Dx::Union{Matrix{R}, Nothing} = nothing,\n    Dy::Union{Matrix{R}, Nothing} = nothing,\n    dSdx_edges::Union{Matrix{R}, Nothing} = nothing,\n    dSdy_edges::Union{Matrix{R}, Nothing} = nothing,\n    ∇S::Union{Matrix{R}, Nothing} = nothing,\n    ∇Sy::Union{Matrix{R}, Nothing} = nothing,\n    ∇Sx::Union{Matrix{R}, Nothing} = nothing,\n    Fx::Union{Matrix{R}, Nothing} = nothing,\n    Fy::Union{Matrix{R}, Nothing} = nothing,\n    Fxx::Union{Matrix{R}, Nothing} = nothing,\n    Fyy::Union{Matrix{R}, Nothing} = nothing,\n    V::Union{Matrix{R}, Nothing} = nothing,\n    Vx::Union{Matrix{R}, Nothing} = nothing,\n    Vy::Union{Matrix{R}, Nothing} = nothing,\n    Γ::Union{R, Nothing} = nothing,\n    MB::Union{Matrix{R}, Nothing} = nothing,\n    MB_mask::Union{BitMatrix, Nothing} = nothing,\n    MB_total::Union{Matrix{R}, Nothing} = nothing,\n    glacier_idx::Union{I, Nothing} = nothing\n) where {I <: Integer, R <: Real}\n\nConstructs a new SIA2Dmodel object with the given parameters.\n\nArguments\n\nparams::Sleipnir.Parameters: Simulation parameters.\nA::Union{R, Nothing}: Flow law parameter (default: nothing).\nn::Union{R, Nothing}: Flow law exponent (default: nothing).\nC::Union{R, Matrix{R}, Nothing}: Basal sliding parameter (default: nothing).\nH₀::Matrix{R}: Initial ice thickness (default: empty matrix).\nH::Union{Matrix{R}, Nothing}: Ice thickness (default: nothing).\nH̄::Union{Matrix{R}, Nothing}: Averaged ice thickness (default: nothing).\nS::Matrix{R}: Surface elevation (default: empty matrix).\ndSdx::Union{Matrix{R}, Nothing}: Surface slope in x-direction (default: nothing).\ndSdy::Union{Matrix{R}, Nothing}: Surface slope in y-direction (default: nothing).\nD::Union{Matrix{R}, Nothing}: Diffusivity (default: nothing).\nD_is_provided::Union{Bool, Nothing}: Specifies if D is provided by user or computed (default: false).\nDx::Union{Matrix{R}, Nothing}: Diffusivity in x-direction (default: nothing).\nDy::Union{Matrix{R}, Nothing}: Diffusivity in y-direction (default: nothing).\ndSdx_edges::Union{Matrix{R}, Nothing}: Surface slope at edges in x-direction (default: nothing).\ndSdy_edges::Union{Matrix{R}, Nothing}: Surface slope at edges in y-direction (default: nothing).\n∇S::Union{Matrix{R}, Nothing}: Gradient of surface elevation (default: nothing).\n∇Sy::Union{Matrix{R}, Nothing}: Gradient of surface elevation in y-direction (default: nothing).\n∇Sx::Union{Matrix{R}, Nothing}: Gradient of surface elevation in x-direction (default: nothing).\nFx::Union{Matrix{R}, Nothing}: Flux in x-direction (default: nothing).\nFy::Union{Matrix{R}, Nothing}: Flux in y-direction (default: nothing).\nFxx::Union{Matrix{R}, Nothing}: Second derivative of flux in x-direction (default: nothing).\nFyy::Union{Matrix{R}, Nothing}: Second derivative of flux in y-direction (default: nothing).\nV::Union{Matrix{R}, Nothing}: Velocity (default: nothing).\nVx::Union{Matrix{R}, Nothing}: Velocity in x-direction (default: nothing).\nVy::Union{Matrix{R}, Nothing}: Velocity in y-direction (default: nothing).\nΓ::Union{R, Nothing}: Auxiliary matrix (default: nothing).\nMB::Union{Matrix{R}, Nothing}: Mass balance (default: nothing).\nMB_mask::Union{BitMatrix, Nothing}: Mask for mass balance (default: nothing).\nMB_total::Union{Matrix{R}, Nothing}: Total mass balance (default: nothing).\nglacier_idx::Union{I, Nothing}: Index of the glacier (default: nothing).\n\nReturns\n\nSIA2Dmodel: A new SIA2Dmodel object.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.SIA2Dmodel-api","page":"API","title":"Huginn.SIA2Dmodel","text":"mutable struct SIA2Dmodel{R <: Real, I <: Integer} <: SIAmodel\n\nA mutable struct representing a 2D Shallow Ice Approximation (SIA) model.\n\nFields\n\nA::Union{Ref{R}, Nothing}: Flow rate factor.\nn::Union{Ref{R}, Nothing}: Flow law exponent.\nC::Union{Ref{R}, Matrix{R}, Nothing}: Sliding coefficient.\nH₀::Matrix{R}: Initial ice thickness.\nH::Union{Matrix{R}, Nothing}: Ice thickness.\nH̄::Union{Matrix{R}, Nothing}: Averaged ice thickness.\nS::Matrix{R}: Surface elevation.\ndSdx::Union{Matrix{R}, Nothing}: Surface slope in the x-direction.\ndSdy::Union{Matrix{R}, Nothing}: Surface slope in the y-direction.\nD::Union{Matrix{R}, Nothing}: Diffusivity.\nD_is_provided::Union{Bool, Nothing}: Specifies if D is provided by user or computed.\nDx::Union{Matrix{R}, Nothing}: Diffusivity in the x-direction.\nDy::Union{Matrix{R}, Nothing}: Diffusivity in the y-direction.\ndSdx_edges::Union{Matrix{R}, Nothing}: Surface slope at edges in the x-direction.\ndSdy_edges::Union{Matrix{R}, Nothing}: Surface slope at edges in the y-direction.\n∇S::Union{Matrix{R}, Nothing}: Gradient of the surface elevation.\n∇Sy::Union{Matrix{R}, Nothing}: Gradient of the surface elevation in the y-direction.\n∇Sx::Union{Matrix{R}, Nothing}: Gradient of the surface elevation in the x-direction.\nFx::Union{Matrix{R}, Nothing}: Flux in the x-direction.\nFy::Union{Matrix{R}, Nothing}: Flux in the y-direction.\nFxx::Union{Matrix{R}, Nothing}: Second derivative of flux in the x-direction.\nFyy::Union{Matrix{R}, Nothing}: Second derivative of flux in the y-direction.\nV::Union{Matrix{R}, Nothing}: Velocity.\nVx::Union{Matrix{R}, Nothing}: Velocity in the x-direction.\nVy::Union{Matrix{R}, Nothing}: Velocity in the y-direction.\nΓ::Union{Ref{R}, Nothing}: Basal shear stress.\nMB::Union{Matrix{R}, Nothing}: Mass balance.\nMB_mask::Union{AbstractArray{Bool}, Nothing}: Mask for mass balance.\nMB_total::Union{Matrix{R}, Nothing}: Total mass balance.\nglacier_idx::Union{Ref{I}, Nothing}: Index of the glacier.\n\n\n\n\n\n","category":"type"},{"location":"api/#Huginn.SIAmodel-api","page":"API","title":"Huginn.SIAmodel","text":"SIAmodel\n\nAn abstract type representing the Shallow Ice Approximation (SIA) models. This type is a subtype of IceflowModel and serves as a base for all SIA-specific models.\n\n\n\n\n\n","category":"type"},{"location":"api/#Huginn.SolverParameters-Union{Tuple{}, Tuple{I}, Tuple{F}} where {F<:AbstractFloat, I<:Integer}-api","page":"API","title":"Huginn.SolverParameters","text":"Constructs a SolverParameters object with the specified parameters or using default values.\n\nSolverParameters(; solver::OrdinaryDiffEq.OrdinaryDiffEqAdaptiveAlgorithm = RDPK3Sp35(),\n                  reltol::F = 1e-12,\n                  step::F = 1.0/12.0,\n                  tstops::Union{Nothing,Vector{F}} = nothing,\n                  save_everystep = false,\n                  progress::Bool = true,\n                  progress_steps::I = 10) where {F <: AbstractFloat, I <: Integer}\n\nArguments\n\nsolver::OrdinaryDiffEq.OrdinaryDiffEqAdaptiveAlgorithm: The ODE solver algorithm to use. Defaults to RDPK3Sp35().\nreltol::F: The relative tolerance for the solver. Defaults to 1e-12.\nstep::F: The step size for the callbacks. These are mainly used to run the surface mass balance model. Defaults to 1.0/12.0 (i.e. a month).\ntstops::Union{Nothing, Vector{F}}: Optional vector of time points where the solver should stop. Defaults to nothing.\nsave_everystep::Bool: Whether to save the solution at every step. Defaults to false.\nprogress::Bool: Whether to show progress during the solving process. Defaults to true.\nprogress_steps::I: The number of steps between progress updates. Defaults to 10.\n\nReturns\n\nsolver_parameters: A SolverParameters object constructed with the specified parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.SolverParameters-api","page":"API","title":"Huginn.SolverParameters","text":"A mutable struct that holds parameters for the solver.\n\nSolverParameters{F <: AbstractFloat, I <: Integer}\n\nFields\n\nsolver::OrdinaryDiffEq.OrdinaryDiffEqAdaptiveAlgorithm: The algorithm used for solving differential equations.\nreltol::F: The relative tolerance for the solver.\nstep::F: The step size for the solver.\ntstops::Union{Nothing, Vector{F}}: Optional vector of time points where the solver should stop for the callbacks.\nsave_everystep::Bool: Flag indicating whether to save the solution at every step.\nprogress::Bool: Flag indicating whether to show progress during the solving process.\nprogress_steps::I: The number of steps between progress updates.\n\n\n\n\n\n","category":"type"},{"location":"api/#Huginn.H_from_V-Union{Tuple{SIM}, Tuple{Matrix{<:Real}, SIM}} where SIM<:Simulation-api","page":"API","title":"Huginn.H_from_V","text":"H_from_V(V::Matrix{<:Real}, simulation::SIM) where {SIM <: Simulation}\n\nCompute the ice thickness H from the velocity V for a given simulation.\n\nArguments\n\nV::Matrix{<:Real}: A matrix representing the velocity of ice.\nsimulation::SIM: An instance of a simulation, which must be a subtype of Simulation.\n\nReturns\n\nH::Matrix{<:Real}: A matrix representing the computed ice thickness.\n\nDescription\n\nThis function calculates the ice thickness H based on the provided velocity V and the parameters from the simulation object. It uses various physical parameters and constants defined in the simulation to perform the computation. The function also handles NaN and Inf values in the resulting ice thickness matrix by replacing them with 0.0.\n\nDetails\n\nThe function first extracts necessary parameters from the simulation object, including physical constants and glacier properties.\nIt updates the glacier surface altimetry and computes surface gradients on edges using staggered grid variables.\nThe surface stress Γꜛ is calculated based on the provided parameters.\nThe ice thickness H is then computed using the velocity V and the surface stress Γꜛ.\nFinally, the function replaces any NaN or Inf values in the resulting ice thickness matrix with 0.0 and returns the matrix H.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.Model-Union{Tuple{}, Tuple{MBM}, Tuple{IFM}} where {IFM<:IceflowModel, MBM<:MBmodel}-api","page":"API","title":"Huginn.Model","text":"function Model(;     iceflow::Union{IFM, Nothing},     mass_balance::Union{MBM, Nothing}     ) where {IFM <: IceflowModel, MBM <: MBmodel}\n\nInitialize Model at Huginn level (no machine learning model).\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.SIA2D!-Union{Tuple{SIM}, Tuple{I}, Tuple{R}, Tuple{Matrix{R}, Matrix{R}, SIM, R}} where {R<:Real, I<:Integer, SIM<:Simulation}-api","page":"API","title":"Huginn.SIA2D!","text":"SIA2D!(dH::Matrix{R}, H::Matrix{R}, simulation::SIM, t::R) where {R <:Real, SIM <: Simulation}\n\nSimulates the evolution of ice thickness in a 2D shallow ice approximation (SIA) model. Works in-place.\n\nArguments\n\ndH::Matrix{R}: Matrix to store the rate of change of ice thickness.\nH::Matrix{R}: Matrix representing the ice thickness.\nsimulation::SIM: Simulation object containing model parameters and state.\nt::R: Current simulation time.\n\nDetails\n\nThis function updates the ice thickness H and computes the rate of change dH using the shallow ice approximation in 2D. It retrieves necessary parameters from the simulation object, enforces positive ice thickness values, updates glacier surface altimetry, computes surface gradients, flux components, and flux divergence.\n\nNotes\n\nThe function operates on a staggered grid for computing gradients and fluxes.\nSurface elevation differences are capped using upstream ice thickness to impose boundary conditions.\nThe function modifies the input matrices dH and H in-place.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.SIA2D-Union{Tuple{SIM}, Tuple{I}, Tuple{R}, Tuple{Matrix{R}, SIM, R}} where {R<:Real, I<:Integer, SIM<:Simulation}-api","page":"API","title":"Huginn.SIA2D","text":"SIA2D(H::Matrix{R}, simulation::SIM, t::R; batch_id::Union{Nothing, I} = nothing) where {R <: Real, I <: Integer, SIM <: Simulation}\n\nCompute the change in ice thickness (dH) for a 2D Shallow Ice Approximation (SIA) model. Works out-of-place.\n\nArguments\n\nH::Matrix{R}: Ice thickness matrix.\nsimulation::SIM: Simulation object containing model parameters and glacier data.\nt::R: Current time step.\nbatch_id::Union{Nothing, I}: Optional batch ID to select a specific glacier model. Defaults to nothing.\n\nReturns\n\ndH::Matrix{R}: Matrix representing the change in ice thickness.\n\nDetails\n\nThis function performs the following steps:\n\nRetrieves the appropriate iceflow model and glacier data based on batch_id.\nRetrieves physical parameters from the simulation object.\nEnsures that ice thickness values are non-negative.\nUpdates the glacier surface altimetry.\nComputes surface gradients on the edges of the grid.\nCalculates the diffusivity D based on the surface gradients and ice thickness.\nComputes the flux components Fx and Fy.\nCalculates the flux divergence to determine the change in ice thickness dH.\n\nNotes\n\nThe function uses @views to avoid unnecessary array allocations.\nThe @tullio macro is used for efficient tensor operations.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.V_from_H-Union{Tuple{SIM}, Tuple{F}, Tuple{I}, Tuple{SIM, Matrix{F}}} where {I<:Integer, F<:AbstractFloat, SIM<:Simulation}-api","page":"API","title":"Huginn.V_from_H","text":"V_from_H(\n    simulation::SIM,\n    H::Matrix{F};\n    batch_id::Union{Nothing, I}=nothing\n) where {I <: Integer, F <: AbstractFloat, SIM <: Simulation}\n\nCompute surface velocity from ice thickness using the SIA model. It relies on surface_V to compute Vx and Vy and it additionally computes the magnitude of the velocity V.\n\nArguments:\n\nsimulation::SIM: The simulation structure used to retrieve the physical   parameters.\nH::Matrix{F}: The ice thickness matrix.\nbatch_id::Union{Nothing, I}=nothing: The batch ID that is used to retrieve the   iceflow model in surface_V.\n\nReturns:\n\nVx: x axis component of the surface velocity.\nVy: y axis component of the surface velocity.\nV: Magnitude velocity.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.avg!-Tuple{Any, Any}-api","page":"API","title":"Huginn.avg!","text":"avg!(O, I)\n\nCompute the average of adjacent elements in the input array I and store the result in the output array O.\n\nArguments\n\nO: Output array where the averaged values will be stored.\nI: Input array from which the adjacent elements will be averaged.\n\nDetails\n\nThis function uses the @views macro to avoid creating temporary arrays and the @. macro to broadcast the operations. The averaging is performed by taking the mean of each 2x2 block of elements in I and storing the result in the corresponding element in O.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.avg-Tuple{Any}-api","page":"API","title":"Huginn.avg","text":"avg(A::AbstractArray)\n\nCompute the average of each 2x2 block in the input array A. The result is an array where each element is the average of the corresponding 2x2 block in A.\n\nArguments\n\nA::AbstractArray: A 2D array of numerical values.\n\nReturns\n\nA 2D array of the same type as A, where each element is the average of a 2x2 block from A.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.avg_surface_V!-Tuple{SIM} where SIM<:Simulation-api","page":"API","title":"Huginn.avg_surface_V!","text":"avg_surface_V!(simulation::SIM) where {SIM <: Simulation}\n\nCalculate the average surface velocity for a given simulation.\n\nArguments\n\nsimulation::SIM: A simulation object of type SIM which is a subtype of Simulation.\n\nDescription\n\nThis function computes the average surface velocity components (Vx and Vy) and the resultant velocity (V) for the ice flow model within the given simulation. It first calculates the surface velocities at the initial and current states, then averages these velocities and updates the ice flow model's velocity fields.\n\nNotes\n\nThe function currently uses a simple averaging method and may need more datapoints for better interpolation.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.avg_surface_V-Union{Tuple{SIM}, Tuple{I}} where {I<:Integer, SIM<:Simulation}-api","page":"API","title":"Huginn.avg_surface_V","text":"avg_surface_V(simulation::SIM; batch_id::Union{Nothing, I} = nothing) where {I <: Integer, SIM <: Simulation}\n\nCompute the average surface velocity for a given simulation.\n\nArguments\n\nsimulation::SIM: The simulation object containing the model and other relevant data.\nbatch_id::Union{Nothing, I}: An optional batch identifier. If provided, it specifies which batch of the iceflow model to use. Defaults to nothing.\n\nReturns\n\nV̄x: The average surface velocity in the x-direction.\nV̄y: The average surface velocity in the y-direction.\nV: The magnitude of the average surface velocity.\n\nDetails\n\nThis function computes the initial and final surface velocities and averages them to obtain the average surface velocity. It handles simulations that use reverse differentiation by selecting the appropriate iceflow model for each glacier.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.avg_x!-Tuple{Any, Any}-api","page":"API","title":"Huginn.avg_x!","text":"avg_x!(O, I)\n\nCompute the average of adjacent elements along the first dimension of array I and store the result in array O.\n\nArguments\n\nO: Output array where the averaged values will be stored.\nI: Input array from which adjacent elements will be averaged.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.avg_x-Tuple{Any}-api","page":"API","title":"Huginn.avg_x","text":"avg_x(A::AbstractArray)\n\nCompute the average of adjacent elements along the first dimension of the array A.\n\nArguments\n\nA::AbstractArray: Input array.\n\nReturns\n\nAn array of the same type as A with one less element along the first dimension, containing the averages of adjacent elements.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.avg_y!-Tuple{Any, Any}-api","page":"API","title":"Huginn.avg_y!","text":"avg_y!(O, I)\n\nCompute the average of adjacent elements along the second dimension of array I and store the result in array O.\n\nArguments\n\nO: Output array where the averaged values will be stored.\nI: Input array from which the adjacent elements will be averaged.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.avg_y-Tuple{Any}-api","page":"API","title":"Huginn.avg_y","text":"avg_y(A::AbstractArray)\n\nCompute the average of adjacent elements along the second dimension of the input array A.\n\nArguments\n\nA::AbstractArray: An array of numeric values.\n\nReturns\n\nAn array of the same type as A containing the averages of adjacent elements along the second dimension.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.batch_iceflow_PDE!-Union{Tuple{I}, Tuple{I, Prediction}} where I<:Integer-api","page":"API","title":"Huginn.batch_iceflow_PDE!","text":"batch_iceflow_PDE!(glacier_idx::I, simulation::Prediction)\n\nSolve the Shallow Ice Approximation iceflow PDE for a given temperature series batch in-place.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.batch_iceflow_PDE-Union{Tuple{I}, Tuple{I, Prediction}} where I<:Integer-api","page":"API","title":"Huginn.batch_iceflow_PDE","text":"batch_iceflow_PDE(glacier_idx::I, simulation::Prediction)\n\nSolve the Shallow Ice Approximation iceflow PDE for a given temperature series batch out-of-place.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.define_callback_steps-Union{Tuple{F}, Tuple{Tuple{F, F}, F}} where F<:AbstractFloat-api","page":"API","title":"Huginn.define_callback_steps","text":"define_callback_steps(tspan::Tuple{F, F}, step::F) where {F <: AbstractFloat}\n\nDefines the times to stop for the DiscreteCallback given a step and a timespan.\n\nArguments\n\ntspan::Tuple{Float64, Float64}: A tuple representing the start and end times.\nstep::Float64: The step size for generating the callback steps.\n\nReturns\n\nVector{Float64}: A vector of callback steps within the specified time span.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.diff_x!-Tuple{Any, Any, Any}-api","page":"API","title":"Huginn.diff_x!","text":"diff_x!(O, I, Δx)\n\nCompute the finite difference of array I along the first dimension and store the result in array O. The difference is computed using the spacing Δx.\n\nArguments\n\nO: Output array to store the finite differences.\nI: Input array from which finite differences are computed.\nΔx: Spacing between points in the first dimension.\n\nNotes\n\nThe function uses @views to avoid copying data when slicing arrays.\nThe operation is performed in-place, modifying the contents of O.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.diff_x-Tuple{Any}-api","page":"API","title":"Huginn.diff_x","text":"diff_x(A::AbstractArray)\n\nCompute the difference along the first dimension of the array A.\n\nArguments\n\nA::AbstractArray: Input array.\n\nReturns\n\nAn array of the same type as A containing the differences along the first dimension.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.diff_y!-Tuple{Any, Any, Any}-api","page":"API","title":"Huginn.diff_y!","text":"diff_y!(O, I, Δy)\n\nCompute the finite difference along the y-axis and store the result in O.\n\nArguments\n\nO: Output array where the result will be stored.\nI: Input array from which the finite difference is computed.\nΔy: The spacing between points in the y-direction.\n\nDescription\n\nThis function calculates the finite difference along the y-axis for the input array I and stores the result in the output array O. The calculation is performed using the formula:\n\nO = (I[:,begin+1:end] - I[:,1:end - 1]) / Δy\n\nThe @views macro is used to avoid copying data when slicing the array.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.diff_y-Tuple{Any}-api","page":"API","title":"Huginn.diff_y","text":"diff_y(A::AbstractArray)\n\nCompute the difference between adjacent elements along the second dimension (columns) of the input array A.\n\nArguments\n\nA::AbstractArray: An array of numeric values.\n\nReturns\n\nAn array of the same type as A containing the differences between adjacent elements along the second dimension.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.generate_result-Union{Tuple{SIM}, Tuple{SIM, Any, Any}} where SIM<:Simulation-api","page":"API","title":"Huginn.generate_result","text":"generate_result(simulation::SIM, A, n) where {SIM <: Simulation}\n\nGenerate the result of a simulation by initializing the model with the specified parameters and running the simulation.\n\nArguments\n\nsimulation::SIM: An instance of a type that is a subtype of Simulation.\nA: The parameter to set for simulation.model.iceflow.A.\nn: The parameter to set for simulation.model.iceflow.n.\n\nReturns\n\nresult: The first result from the simulation's results.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.halfar_solution-Tuple{Any, Any, Any, Any, Any, Any, PhysicalParameters}-api","page":"API","title":"Huginn.halfar_solution","text":"halfar_solution(R, t, h₀, r₀, A, n, physical_parameters::PhysicalParameters)\n\nReturn the evaluation of the Halfar solution for the SIA equation.\n\nArguments:\n\nR: Radial distance. The solution has polar symmetry around the center of origin.\nt: Time.\nh₀ and r₀: Parameters of the Halfar solution.\nA: Glen's law parameter.\nn: Creep exponent.\nphysical_parameters::PhysicalParameters: Physical parameters that allow   retrieving the ice density and the gravity constant.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.initialize_iceflow_model!-Union{Tuple{G}, Tuple{I}, Tuple{IF}, Tuple{IF, I, G, Sleipnir.Parameters}} where {IF<:IceflowModel, I<:Integer, G<:AbstractGlacier}-api","page":"API","title":"Huginn.initialize_iceflow_model!","text":"function initializeiceflowmodel!(     iceflowmodel::IF,     glacieridx::I,     glacier::AbstractGlacier,     params::Sleipnir.Parameters ) where {IF <: IceflowModel, I <: Integer}\n\nInitialize iceflow model data structures to enable in-place mutation.\n\nKeyword arguments\n\n- `iceflow_model`: Iceflow model used for simulation.\n- `glacier_idx`: Index of glacier.\n- `glacier`: `Glacier` to provide basic initial state of the ice flow model.\n- `parameters`: `Parameters` to configure some physical variables.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.initialize_iceflow_model-Union{Tuple{I}, Tuple{IF}, Tuple{IF, I, AbstractGlacier, Sleipnir.Parameters}} where {IF<:IceflowModel, I<:Integer}-api","page":"API","title":"Huginn.initialize_iceflow_model","text":"function initializeiceflowmodel(     iceflowmodel::IF,     glacieridx::I,     glacier::AbstractGlacier,     params::Sleipnir.Parameters ) where {IF <: IceflowModel, I <: Integer}\n\nInitialize iceflow model data structures to enable out-of-place mutation.\n\nKeyword arguments\n\n- `iceflow_model`: Iceflow model used for simulation.\n- `glacier_idx`: Index of glacier.\n- `glacier`: `Glacier` to provide basic initial state of the ice flow model.\n- `parameters`: `Parameters` to configure some physical variables.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.inn-Tuple{Any}-api","page":"API","title":"Huginn.inn","text":"inn(A::AbstractArray)\n\nExtracts the inner part of a 2D array A, excluding the first and last rows and columns.\n\nArguments\n\nA::AbstractArray: A 2D array from which the inner part will be extracted.\n\nReturns\n\nA subarray of A containing all elements except the first and last rows and columns.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.inn1-Tuple{Any}-api","page":"API","title":"Huginn.inn1","text":"inn1(A::AbstractArray)\n\nReturns a view of the input array A excluding the last row and the last column.\n\nArguments\n\nA::AbstractArray: The input array from which a subarray view is created.\n\nReturns\n\nA view of the input array A that includes all elements except the last row and the last column.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.run!-Tuple{Prediction}-api","page":"API","title":"Huginn.run!","text":"run!(simulation::Prediction)\n\nIn-place run of the model. \n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.run₀-Tuple{Prediction}-api","page":"API","title":"Huginn.run₀","text":"run(simulation::Prediction)\n\nOut-of-place run of the model. \n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.simulate_iceflow_PDE!-Union{Tuple{SIM}, Tuple{SIM, SciMLBase.DiscreteCallback}} where SIM<:Simulation-api","page":"API","title":"Huginn.simulate_iceflow_PDE!","text":"function simulate_iceflow_PDE!(\n    simulation::SIM,\n    cb::DiscreteCallback;\n    du = SIA2D!) where {SIM <: Simulation}\n\nMake forward simulation of the iceflow PDE determined in du.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.simulate_iceflow_PDE-Union{Tuple{SIM}, Tuple{SIM, SciMLBase.DiscreteCallback}} where SIM<:Simulation-api","page":"API","title":"Huginn.simulate_iceflow_PDE","text":"function simulate_iceflow_PDE(\n    simulation::SIM,\n    cb::DiscreteCallback;\n    du = SIA2D) where {SIM <: Simulation}\n\nMake forward simulation of the iceflow PDE determined in du.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.surface_V!-Union{Tuple{SIM}, Tuple{Matrix{<:Real}, SIM}} where SIM<:Simulation-api","page":"API","title":"Huginn.surface_V!","text":"surface_V!(H::Matrix{<:Real}, simulation::SIM) where {SIM <: Simulation}\n\nCompute the surface velocities of a glacier using the Shallow Ice Approximation (SIA) in 2D.\n\nArguments\n\nH::Matrix{<:Real}: The ice thickness matrix.\nsimulation::SIM: The simulation object containing parameters and model information.\n\nReturns\n\nVx: The x-component of the surface velocity.\nVy: The y-component of the surface velocity.\n\nDescription\n\nThis function updates the glacier surface altimetry and computes the surface gradients on edges using a staggered grid. It then calculates the surface velocities based on the Shallow Ice Approximation (SIA) model.\n\nDetails\n\nparams: The simulation parameters.\niceflow_model: The ice flow model from the simulation.\nglacier: The glacier object from the simulation.\nB: The bedrock elevation matrix.\nH̄: The average ice thickness matrix.\ndSdx, dSdy: The surface gradient matrices in x and y directions.\n∇S, ∇Sx, ∇Sy: The gradient magnitude and its components.\nΓꜛ: The surface stress.\nD: The diffusivity matrix.\nA: The flow rate factor.\nn: The flow law exponent.\nΔx, Δy: The grid spacing in x and y directions.\nρ: The ice density.\ng: The gravitational acceleration.\n\nThe function computes the surface gradients, averages the ice thickness, and calculates the surface stress and diffusivity. Finally, it computes the surface velocities Vx and Vy based on the gradients and diffusivity.\n\n\n\n\n\n","category":"method"},{"location":"api/#Huginn.surface_V-Union{Tuple{SIM}, Tuple{R}, Tuple{I}, Tuple{Matrix{R}, SIM}} where {I<:Integer, R<:Real, SIM<:Simulation}-api","page":"API","title":"Huginn.surface_V","text":"surface_V(H::Matrix{R}, simulation::SIM; batch_id::Union{Nothing, I} = nothing) where {I <: Integer, R <: Real, SIM <: Simulation}\n\nCompute the surface velocities of a glacier using the Shallow Ice Approximation (SIA) in 2D.\n\nArguments\n\nH::Matrix{R}: Ice thickness matrix.\nsimulation::SIM: Simulation object containing parameters and model information.\nbatch_id::Union{Nothing, I}: Optional batch identifier for simulations using reverse differentiation. Defaults to nothing.\n\nReturns\n\nVx: Matrix of surface velocities in the x-direction.\nVy: Matrix of surface velocities in the y-direction.\n\nDetails\n\nThis function computes the surface velocities of a glacier by updating the glacier surface altimetry and calculating the surface gradients on the edges. It uses a staggered grid approach to compute the gradients and velocities.\n\nNotes\n\nThe function assumes that the simulation object contains the necessary parameters and model information.\nThe batch_id is used to handle simulations that require an iceflow model per glacier.\n\n\n\n\n\n","category":"method"},{"location":"api/#Muninn.MBmodel-api","page":"API","title":"Muninn.MBmodel","text":"MBmodel <: AbstractModel\n\nAn abstract type representing a mass balance model in the Muninn package.  This serves as a base type for all specific mass balance models, ensuring  they adhere to a common interface and can be used interchangeably within  the ODINN framework.\n\n\n\n\n\n","category":"type"},{"location":"api/#Muninn.TImodel-api","page":"API","title":"Muninn.TImodel","text":"TImodel <: MBmodel\n\nAn abstract type representing a temperature index mass balance models within the ODINN framework.  This type serves as a parent type for more specialized mass balance models, ensuring they adhere to  a common interface defined by the MBmodel abstract type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Muninn.TImodel1-Union{Tuple{Sleipnir.Parameters}, Tuple{F}} where F<:AbstractFloat-api","page":"API","title":"Muninn.TImodel1","text":"TImodel1(params::Sleipnir.Parameters; DDF::F = 7.0/1000.0, acc_factor::F = 1.0/1000.0) where {F <: AbstractFloat}\n\nCreate a temperature index model with one degree-day factor (DDF) with the given parameters.\n\nArguments\n\nparams::Sleipnir.Parameters: The simulation parameters.\nDDF::F: Degree-day factor (default is 7.0/1000.0).\nacc_factor::F: Accumulation factor (default is 1.0/1000.0).\n\nReturns\n\nTI1_model: An instance of TImodel1 with the specified parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#Muninn.TImodel1-api","page":"API","title":"Muninn.TImodel1","text":"TImodel1{F <: AbstractFloat}\n\nA structure representing a temperature index model with degree-day factor and accumulation factor.\n\nKeyword arguments\n\nDDF::F: Degree-day factor, which is a coefficient used to convert temperature into melt.\nacc_factor::F: Accumulation factor, which is a coefficient used to adjust the accumulation of mass.\n\nType Parameters\n\nF: A subtype of AbstractFloat representing the type of the factors.\n\n\n\n\n\n","category":"type"},{"location":"api/#Muninn.TImodel2-Union{Tuple{Sleipnir.Parameters}, Tuple{F}} where F<:AbstractFloat-api","page":"API","title":"Muninn.TImodel2","text":"TImodel2(params::Parameters; DDF_snow::F = 3.0/1000.0, DDF_ice::F = 6.0/1000.0, acc_factor::F = 1.0/1000.0) where {F <: AbstractFloat}\n\nCreate a temperature-index model with two degree-day factors (TImodel2) for mass balance calculations.\n\nArguments\n\nparams::Parameters: The parameters object containing simulation settings.\nDDF_snow::F: Degree-day factor for snow (default: 3.0/1000.0).\nDDF_ice::F: Degree-day factor for ice (default: 6.0/1000.0).\nacc_factor::F: Accumulation factor (default: 1.0/1000.0).\n\nReturns\n\nTI2_model: An instance of the TImodel2 with the specified parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#Muninn.TImodel2-api","page":"API","title":"Muninn.TImodel2","text":"TImodel2{F <: AbstractFloat}\n\nA type representing a temperature-index model with parameters for snow and ice degree-day factors, and an accumulation factor.\n\nKeyword arguments\n\nDDF_snow::F: Degree-day factor for snow, which determines the melt rate of snow per degree above the melting point.\nDDF_ice::F: Degree-day factor for ice, which determines the melt rate of ice per degree above the melting point.\nacc_factor::F: Accumulation factor, which scales the accumulation of snow.\n\nType Parameters\n\nF: A subtype of AbstractFloat, representing the numeric type used for the model parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/#Muninn.MB_timestep!-Union{Tuple{G}, Tuple{F}, Tuple{I}, Tuple{Sleipnir.Model, G, F, Any}} where {I<:Integer, F<:AbstractFloat, G<:AbstractGlacier}-api","page":"API","title":"Muninn.MB_timestep!","text":"MB_timestep!(model::Model, glacier::G, step::F, t; batch_id::Union{Nothing, I} = nothing) where {I <: Integer, F <: AbstractFloat, G <: AbstractGlacier}\n\nSimulates a mass balance timestep for a given glacier model.\n\nArguments\n\nmodel::Model: The glacier model containing iceflow and mass balance information.\nglacier::G: The glacier object containing climate and DEM data.\nstep::F: The timestep duration.\nt: The current time.\nbatch_id::Union{Nothing, I}: Optional batch identifier for simulations using Reverse Diff. Defaults to nothing.\n\nDescription\n\nThis function performs the following steps:\n\nComputes the period from the previous timestep to the current time.\nRetrieves cumulative climate data for the specified period.\nDownscales the climate dataset to a 2D grid based on the glacier's DEM.\nComputes the mass balance for the glacier and updates the model's iceflow mass balance.\n\nIf batch_id is provided, the function updates the mass balance for the specified batch; otherwise, it updates the mass balance for the entire model.\n\n\n\n\n\n","category":"method"},{"location":"api/#Muninn.MB_timestep-Union{Tuple{G}, Tuple{F}, Tuple{Sleipnir.Model, G, F, F}} where {F<:AbstractFloat, G<:AbstractGlacier}-api","page":"API","title":"Muninn.MB_timestep","text":"MB_timestep(model::Model, glacier::G, step::F, t::F) where {F <: AbstractFloat, G <: AbstractGlacier}\n\nCalculate the mass balance (MB) for a glacier over a given timestep.\n\nKeyword arguments\n\nmodel::Model: The model containing mass balance parameters.\nglacier::G: The glacier object containing climate and DEM data.\nstep::F: The timestep duration.\nt::F: The current time.\n\nReturns\n\nMB::Matrix{F}: The computed mass balance matrix for the given timestep.\n\nDetails\n\nComputes the period between the current time t and the previous step t - step.\nRetrieves cumulative climate data for the specified period.\nDownscales the climate data to a 2D grid based on the glacier's DEM.\nComputes the mass balance using the downscaled climate data.\n\n\n\n\n\n","category":"method"},{"location":"api/#Muninn.compute_MB-Tuple{TImodel1, Climate2Dstep}-api","page":"API","title":"Muninn.compute_MB","text":"compute_MB(mb_model::TImodel1, climate_2D_period::Climate2Dstep)\n\nCompute the mass balance (MB) for a given mass balance model and climate period.\n\nArguments\n\nmb_model::TImodel1: The mass balance model containing parameters such as accumulation factor (acc_factor) and degree-day factor (DDF).\nclimate_2D_period::Climate2Dstep: The climate data for a specific period, including snow accumulation (snow) and positive degree days (PDD).\n\nReturns\n\nA numerical array representing the computed mass balance, calculated as the difference between the product of the accumulation factor and snow, and the product of the degree-day factor and positive degree days.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.AbstractData-api","page":"API","title":"Sleipnir.AbstractData","text":"AbstractData\n\nAbstract type that represents data. Used to implement ThicknessData and SurfaceVelocityData.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.AbstractGlacier-api","page":"API","title":"Sleipnir.AbstractGlacier","text":"AbstractGlacier\n\nAn abstract type representing a glacier. This serves as a base type for different glacier implementations in the Sleipnir package.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.AbstractModel-api","page":"API","title":"Sleipnir.AbstractModel","text":"AbstractModel\n\nAn abstract type that serves as a base for all model types in ODINN.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.AbstractParameters-api","page":"API","title":"Sleipnir.AbstractParameters","text":"    AbstractParameters\n\nAn abstract type that serves as a base for all parameter-related types in the ODINN ecosystem.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.Climate2D-api","page":"API","title":"Sleipnir.Climate2D","text":"A mutable struct representing a 2D climate for a glacier with various buffers and datasets.\n\nClimate2D{F <: AbstractFloat}\n\nKeyword arguments\n\nraw_climate::RasterStack: Raw climate dataset for the whole simulation.\nclimate_raw_step::RasterStack: Raw climate trimmed for the current step to avoid memory allocations.\nclimate_step::Dict: Climate data for the current step.\nclimate_2D_step::Climate2Dstep: 2D climate data for the current step to feed to the mass balance (MB) model.\nlongterm_temps::Vector{F}: Long-term temperatures for the ice rheology.\navg_temps::F: Intermediate buffer for computing average temperatures.\navg_gradients::F: Intermediate buffer for computing average gradients.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.Climate2Dstep-api","page":"API","title":"Sleipnir.Climate2Dstep","text":"Climate2Dstep{F <: AbstractFloat}\n\nA mutable struct representing a 2D climate time step with various climate-related parameters.\n\nKeyword arguments\n\ntemp::Matrix{F}: Temperature matrix.\nPDD::Matrix{F}: Positive Degree Days matrix.\nsnow::Matrix{F}: Snowfall matrix.\nrain::Matrix{F}: Rainfall matrix.\ngradient::F: Gradient value.\navg_gradient::F: Average gradient value.\nx::Vector{F}: X-coordinates vector.\ny::Vector{F}: Y-coordinates vector.\nref_hgt::F: Reference height.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.Glacier1D-Union{Tuple{}, Tuple{I}, Tuple{F}} where {F<:AbstractFloat, I<:Integer}-api","page":"API","title":"Sleipnir.Glacier1D","text":"function Glacier1D(;     rgiid::Union{String, Nothing} = nothing,     climate::Union{Climate1D, Nothing} = nothing,     H₀::Union{Vector{F}, Nothing} = nothing,     S::Union{Vector{F}, Nothing} = nothing,     B::Union{Vector{F}, Nothing} = nothing,     V::Union{Vector{F}, Nothing}= nothing,     A::Union{F, Nothing} = nothing,     C::Union{F, Nothing} = nothing,     n::Union{F, Nothing} = nothing,     w₀::Union{Vector{F}, Nothing} = nothing,     λ::Union{Vector{F}, Nothing} = nothing,     slope::Union{Vector{F}, Nothing} = nothing,     distborder::Union{Vector{F}, Nothing} = nothing,     Coords::Union{Dict{String, Vector{Float64}}, Nothing} = nothing,     Δx::Union{F, Nothing} = nothing,     Δy::Union{F, Nothing} = nothing,     nx::Union{I, Nothing} = nothing,     ny::Union{I, Nothing} = nothing     ) where {F <: AbstractFloat, I <: Integer}\n\nConstructor for empty 2D Glacier object.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.Glacier2D-Union{Tuple{}, Tuple{I}, Tuple{F}} where {F<:AbstractFloat, I<:Integer}-api","page":"API","title":"Sleipnir.Glacier2D","text":"Constructs a Glacier2D object with the given parameters, including default ones.\n\nGlacier2D(;\n    rgi_id::Union{String, Nothing} = nothing,\n    name::String = \"\",\n    climate::Union{Climate2D, Nothing} = nothing,\n    H₀::Union{Matrix{F}, Nothing} = nothing,\n    H_glathida::Union{Matrix{F}, Nothing} = nothing,\n    S::Union{Matrix{F}, Nothing} = nothing,\n    B::Union{Matrix{F}, Nothing} = nothing,\n    V::Union{Matrix{F}, Nothing} = nothing,\n    Vx::Union{Matrix{F}, Nothing} = nothing,\n    Vy::Union{Matrix{F}, Nothing} = nothing,\n    A::Union{F, Nothing} = nothing,\n    C::Union{F, Nothing} = nothing,\n    n::Union{F, Nothing} = nothing,\n    slope::Union{Matrix{F}, Nothing} = nothing,\n    dist_border::Union{Matrix{F}, Nothing} = nothing,\n    Coords::Union{Dict{String, Vector{Float64}}, Nothing} = nothing,\n    Δx::Union{F, Nothing} = nothing,\n    Δy::Union{F, Nothing} = nothing,\n    nx::Union{I, Nothing} = nothing,\n    ny::Union{I, Nothing} = nothing,\n    cenlon::Union{F, Nothing} = nothing,\n    cenlat::Union{F, Nothing} = nothing,\n    params_projection::Dict{String, Float64} = Dict{String, Float64}(),\n    thicknessData::Union{ThicknessData, Nothing} = nothing,\n    velocityData::Union{SurfaceVelocityData, Nothing} = nothing,\n) where {F <: AbstractFloat, I <: Integer}\n\nArguments\n\nrgi_id::String: The RGI identifier for the glacier.\nname::String: The name of the glacier if available.\nclimate::Union{Climate2D, Nothing}: The climate data associated with the glacier.\nH₀::Union{Matrix{F}, Nothing}: Initial ice thickness matrix.\nH_glathida::Matrix{F}: Ice thickness matrix from GLATHIDA.\nS::Matrix{F}: Surface elevation matrix.\nB::Matrix{F}: Bed elevation matrix.\nV::Union{Matrix{F}, Nothing}: Ice velocity magnitude matrix.\nVx::Union{Matrix{F}, Nothing}: Ice velocity in the x-direction matrix.\nVy::Union{Matrix{F}, Nothing}: Ice velocity in the y-direction matrix.\nA::Union{F, Nothing}: Flow law parameter.\nC::Union{F, Nothing}: Sliding law parameter.\nn::Union{F, Nothing}: Flow law exponent.\nslope::Union{Matrix{F}, Nothing}: Slope matrix.\ndist_border::Union{Matrix{F}, Nothing}: Distance to border matrix.\nCoords::Union{Dict{String, Vector{Float64}}, Nothing}: Coordinates dictionary with keys \"lon\" and \"lat\".\nΔx::F: Grid spacing in the x-direction.\nΔy::F: Grid spacing in the y-direction.\nnx::I: Number of grid points in the x-direction.\nny::I: Number of grid points in the y-direction.\ncenlon::Union{F, Nothing}: Central longitude of the glacier.\ncenlat::Union{F, Nothing}: Central latitude of the glacier.\nparams_projection::Dict{String, Float64}: Projection parameters that allows mapping the regional grid to global WGS84 coordinates.\nthicknessData::Union{ThicknessData, Nothing}: Thickness data structure that is used to store the reference values.\nvelocityData::Union{SurfaceVelocityData, Nothing}: Surface velocity data structure that is used to store the reference values.\n\nReturns\n\nA Glacier2D object with the specified parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.Glacier2D-api","page":"API","title":"Sleipnir.Glacier2D","text":"A mutable struct representing a 2D glacier. Notice that all fields can be empty by providing nothing as the default value.\n\n/!\\ WARNING /!\\ Glacier objects should not be constructed manually, but rather through the initialize_glaciers function.\n\nGlacier2D{F <: AbstractFloat, I <: Integer}\n\nFields\n\nrgi_id::String: The RGI (Randolph Glacier Inventory) identifier for the glacier.\nname::String: The name of the glacier if available.\nclimate::Union{Climate2D, Nothing}: The climate data associated with the glacier.\nH₀::Union{Matrix{F}, Nothing}: Initial ice thickness matrix.\nH_glathida::Matrix{F}: Ice thickness matrix from the GLATHIDA dataset.\nS::Matrix{F}: Surface elevation matrix.\nB::Matrix{F}: Bedrock elevation matrix.\nV::Union{Matrix{F}, Nothing}: Ice velocity magnitude matrix.\nVx::Union{Matrix{F}, Nothing}: Ice velocity in the x-direction matrix.\nVy::Union{Matrix{F}, Nothing}: Ice velocity in the y-direction matrix.\nA::Union{F, Nothing}: Flow law parameter.\nC::Union{F, Nothing}: Sliding law parameter.\nn::Union{F, Nothing}: Flow law exponent.\nslope::Union{Matrix{F}, Nothing}: Surface slope matrix.\ndist_border::Union{Matrix{F}, Nothing}: Distance to the glacier border matrix.\nCoords::Union{Dict{String, Vector{Float64}}, Nothing}: Coordinates dictionary with keys as coordinate names and values as vectors of coordinates.\nΔx::F: Grid spacing in the x-direction.\nΔy::F: Grid spacing in the y-direction.\nnx::I: Number of grid points in the x-direction.\nny::I: Number of grid points in the y-direction.\ncenlon::Union{F, Nothing}: Longitude of the glacier center.\ncenlat::Union{F, Nothing}: Latitude of the glacier center.\nparams_projection::Dict{String, Float64}: Projection parameters that allows mapping the regional grid to global WGS84 coordinates.\nthicknessData::Union{ThicknessData, Nothing}: Thickness data structure that is used to store the reference values.\nvelocityData::Union{SurfaceVelocityData, Nothing}: Surface velocity data structure that is used to store the reference values.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.IntegratedTrajectoryMapping-api","page":"API","title":"Sleipnir.IntegratedTrajectoryMapping","text":"IntegratedTrajectoryMapping <: VelocityMapping\n\nIntegrated trajectory mapping. This mapping is closer to reality as it consists in integrating over time the instantaneous ice surface velocities along ice flow trajectories in a Lagrangian way. This integrated velocity is then compared to the velocity of the datacube. It has not been implemented yet but its computational cost will likely be expensive.\n\nFields\n\nspatialInterp::Symbol: The spatial interpolation to use to map the ice surface   velocity grid to the glacier grid. For the moment only :nearest is supported.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.MeanDateVelocityMapping-api","page":"API","title":"Sleipnir.MeanDateVelocityMapping","text":"MeanDateVelocityMapping <: VelocityMapping\n\nMean date velocity mapping. It is the most simple mapping one can build and it consists in taking the 2D vector field of ice velocity associated to a given mean date and compare it to the instantaneous ice surface velocity obtained from the ice flow model. It is valid only for ice surface velocities estimated from short time windows since the velocity can vary within this time window.\n\nFields\n\nspatialInterp::Symbol: The spatial interpolation to use to map the ice surface   velocity grid to the glacier grid. For the moment only :nearest is supported.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.Model-api","page":"API","title":"Sleipnir.Model","text":"A mutable struct that represents a model with three components: iceflow, mass balance, and machine learning.\n\nModel{IFM <: AbstractEmptyModel, MBM <: AbstractEmptyModel, MLM <: AbstractEmptyModel}\n\nKeyword arguments\n\niceflow::Union{IFM, Vector{IFM}}: Represents the iceflow component, which can be a single instance of IFM or a vector of IFM instances.\nmass_balance::Union{MBM, Vector{MBM}}: Represents the mass balance component, which can be a single instance of MBM or a vector of MBM instances.\nmachine_learning::MLM: Represents the machine learning component, which is an instance of MLM.\n\nType Parameters\n\nIFM: A subtype of AbstractEmptyModel representing the type of the iceflow model.\nMBM: A subtype of AbstractEmptyModel representing the type of the mass balance model.\nMLM: A subtype of AbstractEmptyModel representing the type of the machine learning model.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.Parameters-Tuple{}-api","page":"API","title":"Sleipnir.Parameters","text":"    Parameters(; physical::PhysicalParameters = PhysicalParameters(), simulation::SimulationParameters = SimulationParameters())\n\nConstructs a Parameters object with the given physical and simulation parameters.\n\nArguments\n\nphysical::PhysicalParameters: An instance of PhysicalParameters (default: PhysicalParameters()).\nsimulation::SimulationParameters: An instance of SimulationParameters (default: SimulationParameters()).\n\nReturns\n\nA Parameters object initialized with the provided physical and simulation parameters.\n\nNotes\n\nIf simulation.multiprocessing is enabled, multiprocessing is configured with the specified number of workers.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.Parameters-api","page":"API","title":"Sleipnir.Parameters","text":"    mutable struct Parameters{PPHY <: AbstractEmptyParams, PSIM <: AbstractEmptyParams, PHY <: AbstractEmptyParams,\n                    PSOL <: AbstractEmptyParams, PUDE <: AbstractEmptyParams, PINV <: AbstractEmptyParams}\n\nA mutable struct that holds various parameter sets for different aspects of a simulation or model.\n\nFields\n\nphysical::PPHY: Physical parameters.\nsimulation::PSIM: Simulation parameters.\nhyper::PHY: Hyperparameters.\nsolver::PSOL: Solver parameters.\nUDE::PUDE: Universal Differential Equation (UDE) parameters.\ninversion::PINV: Inversion parameters.\n\nType Parameters\n\nPPHY: Type of the physical parameters, must be a subtype of AbstractEmptyParams.\nPSIM: Type of the simulation parameters, must be a subtype of AbstractEmptyParams.\nPHY: Type of the hyperparameters, must be a subtype of AbstractEmptyParams.\nPSOL: Type of the solver parameters, must be a subtype of AbstractEmptyParams.\nPUDE: Type of the UDE parameters, must be a subtype of AbstractEmptyParams.\nPINV: Type of the inversion parameters, must be a subtype of AbstractEmptyParams.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.PhysicalParameters-Union{Tuple{}, Tuple{F}} where F<:AbstractFloat-api","page":"API","title":"Sleipnir.PhysicalParameters","text":"Initialize the physical parameters of a model.\n\nPhysicalParameters(;\n    ρ::Float64 = 900.0,\n    g::Float64 = 9.81,\n    ϵ::Float64 = 1e-3,\n    η₀::F = 1.0, \n    maxA::Float64 = 8e-17,\n    minA::Float64 = 8.5e-20,\n    maxTlaw::Float64 = 1.0,\n    minTlaw::Float64 = -25.0,\n    noise_A_magnitude::Float64 = 5e-18\n    )\n\nKeyword arguments\n\n- `ρ`: Ice density\n- `g`: Gravitational constant\n- `ϵ`: Small number\n- `η₀`:  \n- `maxA`: Maximum value for `A` (Glen's coefficient)\n- `minA`: Minimum value for `A` (Glen's coefficient)\n- `maxTlaw`: Maximum value of Temperature used in simulations on fake law\n- `minTlaw`: Minimum value of Temperature used in simulations on fake law\n- `noise_A_magnitude`: Magnitude of noise added to A\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.PhysicalParameters-api","page":"API","title":"Sleipnir.PhysicalParameters","text":"A structure representing physical parameters used in simulations.\n\nPhysicalParameters{F <: AbstractFloat}\n\nFields\n\nρ::F: Density of ice.\ng::F: Gravitational acceleration.\nϵ::F: A small parameter, often used for perturbations.\nη₀::F: Initial viscosity.\nmaxA::F: Maximum A.\nminA::F: Minimum A.\nmaxTlaw::F: Maximum temperature according to some law.\nminTlaw::F: Minimum temperature according to some law.\nnoise_A_magnitude::F: Magnitude of noise in A.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.Results-Union{Tuple{I}, Tuple{IF}, Tuple{F}, Tuple{G}, Tuple{G, IF}} where {G<:AbstractGlacier, F<:AbstractFloat, IF<:AbstractModel, I<:Int64}-api","page":"API","title":"Sleipnir.Results","text":"Results(glacier::G, ifm::IF;\n    rgi_id::String = glacier.rgi_id,\n    H::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    H_glathida::Matrix{F} = glacier.H_glathida,\n    H_ref::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    S::Union{Nothing, Matrix{F}} = nothing,\n    B::Union{Nothing, Matrix{F}} = nothing,\n    V::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    Vx::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    Vy::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    V_ref::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    Vx_ref::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    Vy_ref::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    Δx::F = glacier.Δx,\n    Δy::F = glacier.Δy,\n    lon::Union{Nothing, F} = glacier.cenlon,\n    lat::Union{Nothing, F} = glacier.cenlat,\n    nx::I = glacier.nx,\n    ny::I = glacier.ny,\n    t::Union{Vector{F}, Nothing} = nothing,\n    tspan::Union{Tuple{F, F}, Nothing} = nothing,\n    θ::Union{Nothing,ComponentArray{F}} = nothing,\n    loss::Union{Nothing,Vector{F}} = nothing\n) where {G <: AbstractGlacier, F <: AbstractFloat, IF <: AbstractModel, I <: Int}\n\nConstruct a Results object for a glacier simulation.\n\nArguments\n\nglacier::G: The glacier object, subtype of AbstractGlacier.\nifm::IF: The model object, subtype of AbstractModel.\nrgi_id::String: The RGI identifier for the glacier. Defaults to glacier.rgi_id.\nH::Union{Nothing, Vector{Matrix{F}}}: Ice thickness matrices. Defaults to nothing.\nH_glathida::Matrix{F}: Ice thickness from GlaThiDa. Defaults to glacier.H_glathida.\nH_ref::Union{Nothing, Vector{Matrix{F}}}: Reference ice thickness. Defaults to nothing.\nS::Union{Nothing, Matrix{F}}: Surface elevation matrix. Defaults to a zero matrix of the same size as ifm.S.\nB::Union{Nothing, Matrix{F}}: Bed elevation matrix. Defaults to a zero matrix of the same size as glacier.B.\nV::Union{Nothing, Vector{Matrix{F}}}: Velocity magnitude matrix. Defaults to nothing.\nVx::Union{Nothing, Vector{Matrix{F}}}: Velocity in the x-direction matrix. Defaults to nothing.\nVy::Union{Nothing, Vector{Matrix{F}}}: Velocity in the y-direction matrix. Defaults to nothing.\nV_ref::Union{Nothing, Vector{Matrix{F}}}: Reference velocity magnitude matrix. Defaults to nothing.\nVx_ref::Union{Nothing, Vector{Matrix{F}}}: Reference velocity in the x-direction matrix. Defaults to nothing.\nVy_ref::Union{Nothing, Vector{Matrix{F}}}: Reference velocity in the y-direction matrix. Defaults to nothing.\nΔx::F: Grid spacing in the x-direction. Defaults to glacier.Δx.\nΔy::F: Grid spacing in the y-direction. Defaults to glacier.Δy.\nlon::Union{Nothing, F}: Longitude of the glacier center. Defaults to glacier.cenlon.\nlat::Union{Nothing, F}: Latitude of the glacier center. Defaults to glacier.cenlat.\nnx::I: Number of grid points in the x-direction. Defaults to glacier.nx.\nny::I: Number of grid points in the y-direction. Defaults to glacier.ny.\ntspan::Tuple(F, F): Timespan of the simulation.\nθ::Union{Nothing, ComponentArray{F}}: Model parameters. Defaults to nothing.\nloss::Union{Nothing, Vector{F}}: Loss values. Defaults to nothing.\n\nReturns\n\nresults::Results: A Results object containing the simulation results.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.Results-api","page":"API","title":"Sleipnir.Results","text":"mutable struct Results{F <: AbstractFloat, I <: Int}\n\nA mutable struct to store the results of simulations.\n\nFields\n\nrgi_id::String: Identifier for the RGI (Randolph Glacier Inventory).\nH::Vector{Matrix{F}}: Vector of matrices representing glacier ice thickness H over time.\nH_glathida::Matrix{F}: Optional matrix for Glathida ice thicknesses.\nH_ref::Union{Nothing, Vector{Matrix{F}}}: Reference data for ice thickness.\nS::Matrix{F}: Glacier surface altimetry.\nB::Matrix{F}: Glacier bedrock.\nV::Matrix{F}: Glacier ice surface velocities.\nVx::Matrix{F}: x-component of the glacier ice surface velocity V.\nVy::Matrix{F}: y-component of the glacier ice surface velocity V.\nV_ref::Union{Nothing, Matrix{F}}: Reference data for glacier ice surface velocities V.\nVx_ref::Union{Nothing, Matrix{F}}: Reference data for the x-component of the glacier ice surface velocity Vx.\nVy_ref::Union{Nothing, Matrix{F}}: Reference data for the y-component of the glacier ice surface velocity Vy.\nΔx::F: Grid spacing in the x-direction.\nΔy::F: Grid spacing in the y-direction.\nlon::Union{Nothing, F}: Optional longitude value.\nlat::Union{Nothing, F}: Optional latitude value.\nnx::I: Number of grid points in the x-direction.\nny::I: Number of grid points in the y-direction.\ntspan::Vector{F}: Time span of the simulation.\nθ::Union{Nothing, ComponentArray{F}}: Machine learning model parameters.\nloss::Union{Nothing, Vector{F}} Vector with evolution of loss function.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.Simulation-api","page":"API","title":"Sleipnir.Simulation","text":"Simulation\n\nAn abstract type representing a generic simulation. This type is intended to be  subclassed by specific simulation types to provide a common interface and shared  functionality for all simulations.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.SimulationParameters-Union{Tuple{}, Tuple{VM}, Tuple{F}, Tuple{I}} where {I<:Integer, F<:AbstractFloat, VM<:Sleipnir.VelocityMapping}-api","page":"API","title":"Sleipnir.SimulationParameters","text":"Constructor for SimulationParameters type, including default values.\n\nSimulationParameters(;\n    use_MB::Bool = true,\n    use_iceflow::Bool = true,\n    plots::Bool = true,\n    velocities::Bool = true,\n    overwrite_climate::Bool = false,\n    use_glathida_data::Bool = false,\n    tspan::Tuple{F, F} = (2010.0,2015.0),\n    step::F = 1/12,\n    multiprocessing::Bool = true,\n    workers::I = 4,\n    working_dir::String = \"\",\n    test_mode::Bool = false,\n    rgi_paths::Dict{String, String} = Dict{String, String}(),\n    ice_thickness_source::String = \"Farinotti19\",\n    mapping::VM = MeanDateVelocityMapping(),\n    gridScalingFactor::I = 1,\n) where {I <: Integer, F <: AbstractFloat, VM <: VelocityMapping}\n\nKeyword arguments\n\nuse_MB::Bool: Whether to use mass balance (default: true).\nuse_iceflow::Bool: Whether to use ice flow (default: true).\nplots::Bool: Whether to generate plots (default: true).\nvelocities::Bool: Whether to calculate velocities (default: true).\noverwrite_climate::Bool: Whether to overwrite climate data (default: false).\nuse_glathida_data::Bool: Whether to use GLATHIDA data (default: false).\nfloat_type::DataType: Data type for floating point numbers (default: Float64).\nint_type::DataType: Data type for integers (default: Int64).\ntspan::Tuple{F, F}: Time span for the simulation (default: (2010.0, 2015.0)).\nstep::F: Time step for the simulation (default: 1/12).\nmultiprocessing::Bool: Whether to use multiprocessing (default: true).\nworkers::I: Number of workers for multiprocessing (default: 4).\nworking_dir::String: Working directory for the simulation (default: \"\").\ntest_mode::Bool: Whether to run in test mode (default: false).\nrgi_paths::Dict{String, String}: Dictionary of RGI paths (default: Dict{String, String}()).\nice_thickness_source::String: Source of ice thickness data, either \"Millan22\" or \"Farinotti19\" (default: \"Farinotti19\").\nmapping::VM: Mapping to use in order to grid the data from the coordinates of   the velocity product datacube to the glacier grid.\ngridScalingFactor::I: Grid downscaling factor, used to speed-up the tests.   Default value is 1 which means no downscaling is applied.\n\nReturns\n\nsimulation_parameters: A new SimulationParameters object.\n\nThrows\n\nAssertionError: If ice_thickness_source is not \"Millan22\" or \"Farinotti19\".\n\nNotes\n\nIf the global variable ODINNOVERWRITEMULTI is set to true, multiprocessing is   disabled in any case. This is to fix the documentation generation as for the   moment Literate.jl freezes when multiprocessing is enabled.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.SimulationParameters-api","page":"API","title":"Sleipnir.SimulationParameters","text":"A structure to hold simulation parameters for a simulation in ODINN.\n\nstruct SimulationParameters{I <: Integer, F <: AbstractFloat, VM <: VelocityMapping} <: AbstractParameters\n\nFields\n\nuse_MB::Bool: Flag to indicate whether mass balance should be used.\nuse_iceflow::Bool: Flag to indicate whether ice flow should be used.\nplots::Bool: Flag to indicate whether plots should be generated.\nvelocities::Bool: Flag to indicate whether velocities should be calculated.\noverwrite_climate::Bool: Flag to indicate whether to overwrite climate data.\nuse_glathida_data::Bool: Flag to indicate whether to use GLATHIDA data.\ntspan::Tuple{F, F}: Time span for the simulation.\nstep::F: Time step for the simulation.\nmultiprocessing::Bool: Flag to indicate whether multiprocessing should be used.\nworkers::I: Number of workers for multiprocessing.\nworking_dir::String: Directory for working files.\ntest_mode::Bool: Flag to indicate whether to run in test mode.\nrgi_paths::Dict{String, String}: Dictionary of RGI paths.\nice_thickness_source::String: Source of ice thickness data.\nmapping::VM: Mapping to use in order to grid the data from the coordinates of   the velocity product datacube to the glacier grid.\ngridScalingFactor::I: Grid downscaling factor, used to speed-up the tests.   Default value is 1 which means no downscaling is applied.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.SurfaceVelocityData-Union{Tuple{}, Tuple{F}} where F<:AbstractFloat-api","page":"API","title":"Sleipnir.SurfaceVelocityData","text":"Constructs SurfaceVelocityData using data from Rabatel et. al (2023) with the given parameters, including default ones.\n\nfunction SurfaceVelocityData(;     x::Union{Vector{F}, Nothing} = nothing,     y::Union{Vector{F}, Nothing} = nothing,     lat::Union{Vector{F}, Nothing} = nothing,     lon::Union{Vector{F}, Nothing} = nothing,     vx::Union{Vector{Matrix{F}}, Nothing} = nothing,     vy::Union{Vector{Matrix{F}}, Nothing} = nothing,     vabs::Union{Vector{Matrix{F}}, Nothing} = nothing,     vxerror::Union{Vector{F}, Nothing} = nothing,     vyerror::Union{Vector{F}, Nothing} = nothing,     vabserror::Union{Vector{F}, Nothing} = nothing,     date::Union{Vector{DateTime}, Nothing} = nothing,     date1::Union{Vector{DateTime}, Nothing} = nothing,     date2::Union{Vector{DateTime}, Nothing} = nothing,     dateerror::Union{Vector{Day}, Vector{Millisecond}, Nothing} = nothing,     isGridGlacierAligned::Bool = false, ) where {F <: AbstractFloat}\n\nConstructor for ice surface velocity data based on Rabatel et. al (2023).\n\nImportant remarks:\n\nThe error in velocity is unique per timestamp, rather than being pixel distributed.\nThe error in the absolute velocities vabs_error is overestimated.\n\nReferences:     - Rabatel, A., Ducasse, E., Millan, R. & Mouginot, J.     Satellite-Derived Annual Glacier Surface Flow Velocity Products for the European Alps,     2015–2021.     Data 8, 66 (2023).\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.SurfaceVelocityData-api","page":"API","title":"Sleipnir.SurfaceVelocityData","text":"A mutable struct representing a surface velocity data. Notice that all fields can be empty by providing nothing as the default value.\n\nSurfaceVelocityData{F <: AbstractFloat} <: AbstractData\n\nFields\n\nx::Union{Vector{F}, Nothing}: Easting of observation.\ny::Union{Vector{F}, Nothing}: Northing of observation.\nlat::Union{Vector{F}, Nothing}: Latitude of observation.\nlon::Union{Vector{F}, Nothing}: Longitude of observation.\nvx::Union{Vector{Matrix{F}}, Nothing}: x component of surface velocity.\nvy::Union{Vector{Matrix{F}}, Nothing}: y component of surface velocity.\nvabs::Union{Vector{Matrix{F}}, Nothing}: Absolute ice surface velocity.\nvx_error::Union{Vector{F}, Nothing}: Error in vx\nvy_error::Union{Vector{F}, Nothing}: Error in vy\nvabs_error::Union{Vector{F}, Nothing}: Error in vabs.\ndate::Union{Vector{DateTime}, Nothing}: Date of observation (mean of date1 and date2)\ndate1::Union{Vector{DateTime}, Nothing}: First date of adquisition.\ndate2::Union{Vector{DateTime}, Nothing}: Second date of adquisition.\ndate_error::Union{Vector{Day}, Vector{Millisecond}, Nothing}: Error in date.\nisGridGlacierAligned::Bool: Whether the data have been gridded to the glacier grid or not.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.ThicknessData-api","page":"API","title":"Sleipnir.ThicknessData","text":"Simple time series of ice thickness data to test transient inversion\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.VelocityMapping-api","page":"API","title":"Sleipnir.VelocityMapping","text":"VelocityMapping\n\nAbstract type representing the mapping to use in order to map the ice velocity products onto the glacier grid. It contains all needed information to build both the spatial projection, and how to interpolate the data in time.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sleipnir.DummyClimate2D-Union{Tuple{}, Tuple{F}} where F<:AbstractFloat-api","page":"API","title":"Sleipnir.DummyClimate2D","text":"DummyClimate2D(;\n    longterm_temps::Vector{F} = []\n) where {F <: AbstractFloat}\n\nDummy climate initialization for very specific use cases where we don't have climate data and we need to build a minimalistic climate with only a few data. For the moment it supports only the initialization of the long term temperatures. It returns a minimalistic Climate2D instance.\n\nArguments:\n\nlongterm_temps::Vector{F}: Long term temperatures.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.ReverseUTMercator-Union{Tuple{F}, Tuple{F, F}} where F<:AbstractFloat-api","page":"API","title":"Sleipnir.ReverseUTMercator","text":"ReverseUTMercator(x::F, y::F; k=0.9996, cenlon=0.0, cenlat=0.0, x0=0.0, y0=0.0, zone::Union{Nothing, Int}=nothing, hemisphere=nothing) where {F <: AbstractFloat}\n\nTransverse Mercator Projection. This function reprojects latitude/longitude into northing/easting coordinates.\n\nKeyword arguments\n\n- `k`: scale factor of the projection\n- `cenlon`: Central longitude used in the projection\n- `cenlat`: Central latitude used in the projection\n- `x0`: Shift in easting\n- `y0`: Shift in northing\n- `zone` : Zone of the projection\n- `hemisphere`: Either :north or :south\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.UTMercator-Union{Tuple{F}, Tuple{F, F}} where F<:AbstractFloat-api","page":"API","title":"Sleipnir.UTMercator","text":"UTMercator(x::F, y::F; k=0.9996, cenlon=0.0, cenlat=0.0, x0=0.0, y0=0.0, zone::Union{Nothing, Int}=nothing, hemisphere=nothing) where {F <: AbstractFloat}\n\nTransverse Mercator Projection. This function reprojects northing/easting coordinates into latitude/longitude.\n\nKeyword arguments\n\n- `k`: scale factor of the projection\n- `cenlon`: Central longitude used in the projection\n- `cenlat`: Central latitude used in the projection\n- `x0`: Shift in easting\n- `y0`: Shift in northing\n- `zone` : Zone of the projection\n- `hemisphere`: Either :north or :south\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.apply_t_cumul_grad!-Union{Tuple{F}, Tuple{Climate2Dstep, Matrix{F}}} where F<:AbstractFloat-api","page":"API","title":"Sleipnir.apply_t_cumul_grad!","text":"apply_t_cumul_grad!(climate_2D_step::Climate2Dstep, S::Matrix{F}) where {F <: AbstractFloat}\n\nApply temperature and precipitation gradients based on the positive degree day (PDD) and on the elevation matrix S to the climate data in climate_2D_step.\n\nArguments\n\nclimate_2D_step::Climate2Dstep: The climate data structure containing temperature, PDD, gradients, and reference height.\nS::Matrix{F}: A matrix of elevations.\n\nDescription\n\nThis function updates the temperature and PDD fields in climate_2D_step by applying the respective gradients based on the difference between the elevation matrix S and the reference height. Negative PDD values are cropped to zero. Additionally, the function adjusts the rain and snow fractions based on the updated temperature values.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.apply_t_grad!-Tuple{Rasters.RasterStack, Rasters.Raster}-api","page":"API","title":"Sleipnir.apply_t_grad!","text":"apply_t_grad!(climate::RasterStack, dem::Raster)\n\nApply temperature gradients to the climate data based on the digital elevation model (DEM).\n\nArguments\n\nclimate::RasterStack: A RasterStack object containing climate data, including temperature and gradient information.\ndem::Raster: A Raster object representing the digital elevation model (DEM) data.\n\nDescription\n\nThis function adjusts the temperature data in the climate object by applying the temperature gradients. The adjustment is based on the difference between the mean elevation from the DEM data and a reference height specified in the metadata of the climate object.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.block_average-Union{Tuple{F}, Tuple{Matrix{F}, Int64}} where F<:AbstractFloat-api","page":"API","title":"Sleipnir.block_average","text":"block_average(mat::Matrix{F}, n::Int) where {F <: AbstractFloat}\n\nDownsamples a matrix by averaging non-overlapping n x n blocks. Returns a matrix of the block-averaged values with size (div(X, n), div(Y, n)) where (X, Y) = size(mat).\n\nArguments\n\nmat::Matrix{F}: Input 2D matrix.\nn::Int: Block size for downsampling. Both matrix dimensions must be divisible by n.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.block_average_pad_edge-Union{Tuple{F}, Tuple{Matrix{F}, Int64}} where F<:AbstractFloat-api","page":"API","title":"Sleipnir.block_average_pad_edge","text":"block_average_pad_edge(mat::Matrix{F}, n::Int) where {F <: AbstractFloat}\n\nDownsamples a matrix by averaging n x n blocks, using edge-replication padding when the matrix dimensions are not divisible by n. Edge padding replicates the last row/column values to expand the matrix so that both dimensions are divisible by n. Returns a matrix of averaged values with size (ceil(Int, X/n), ceil(Int, Y/n)).\n\nArguments\n\nmat::Matrix{F}: Input 2D matrix.\nn::Int: Block size for downsampling.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.create_results-Union{Tuple{I}, Tuple{SIM}, Tuple{SIM, I, Any}, Tuple{SIM, I, Any, Any}} where {SIM<:Simulation, I<:Integer}-api","page":"API","title":"Sleipnir.create_results","text":"create_results(\n    simulation::SIM,\n    glacier_idx::I,\n    solution,\n    loss=nothing;\n    light=false,\n    batch_id::Union{Nothing, I}=nothing,\n    processVelocity::Union{Nothing, Function}=nothing\n) where {SIM <: Simulation, I <: Integer}\n\nCreate a Results object from a given simulation and solution.\n\nArguments\n\nsimulation::SIM: The simulation object of type Simulation.\nglacier_idx::I: The index of the glacier within the simulation.\nsolution: The solution object containing all the steps including intermediate ones.\nloss=nothing: The loss value, default is nothing.\nlight=false: A boolean flag to indicate if only the first and last steps of the solution should be used.\nbatch_id::Union{Nothing, I}=nothing: The batch ID, default is nothing.\nprocessVelocity::Union{Nothing, Function}=nothing: Post processing function to map the ice thickness to the surface velocity. It is called before creating the results. It takes as inputs simulation, ice thickness (matrix) and the batch ID and returns 3 variables Vx, Vy, V which are all matrix. Defaults is nothing which means no post processing is applied.\n\nReturns\n\nresults: A Results object containing the processed simulation data.\n\nDetails\n\nThe function processes the solution to select the last value for each time step. It then constructs a Results object containing various attributes from the simulation and the iceflow model.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.downscale_2D_climate!-Tuple{Glacier2D}-api","page":"API","title":"Sleipnir.downscale_2D_climate!","text":"downscale_2D_climate!(glacier::Glacier2D)\n\nUpdate the 2D climate structure for a given glacier by downscaling climate data.\n\nArguments\n\nglacier::Glacier2D: The glacier object containing the climate data to be downscaled.\n\nDescription\n\nThis function updates the 2D climate structure of the given glacier by:\n\nUpdating the temperature, PDD (Positive Degree Days), snow, and rain fields in the 2D climate step with the corresponding values from the climate step.\nUpdating the gradients and average gradients in the 2D climate step.\nApplying temperature gradients and computing the snow/rain fraction for the selected period by reprojecting the current S with the RasterStack structure.\n\nNotes\n\nThe function modifies the glacier object in place.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.downscale_2D_climate-Tuple{Dict, Glacier2D}-api","page":"API","title":"Sleipnir.downscale_2D_climate","text":"downscale_2D_climate(climate_step::Dict, glacier::Glacier2D) -> Climate2Dstep\n\nDownscales climate data to a 2D grid based on the provided glacier information.\n\nArguments\n\nclimate_step::Dict: A dictionary containing climate data for a specific time step. Expected keys are:\n\"avg_temp\": Average temperature.\n\"temp\": Temperature.\n\"prcp\": Precipitation.\n\"gradient\": Temperature gradient.\n\"avg_gradient\": Average temperature gradient.\n\"ref_hgt\": Reference height.\nglacier::Glacier2D: A Glacier2D object containing glacier data. Expected fields are:\nS: Surface elevation data.\nCoords: A dictionary with keys \"lon\" and \"lat\" for longitude and latitude coordinates.\n\nReturns\n\nClimate2Dstep: A Climate2Dstep object containing the downscaled climate data with fields:\ntemp: 2D array of temperature.\nPDD: 2D array of positive degree days.\nsnow: 2D array of snow precipitation.\nrain: 2D array of rain precipitation.\ngradient: Temperature gradient.\navg_gradient: Average temperature gradient.\nx: Longitude coordinates.\ny: Latitude coordinates.\nref_hgt: Reference height.\n\nDescription\n\nThis function creates dummy 2D arrays based on the glacier surface elevation data and applies the climate step data to these arrays. It then constructs a Climate2Dstep object with the downscaled climate data and applies temperature gradients to compute the snow/rain fraction for the selected period.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.downscale_2D_climate-Tuple{Glacier2D}-api","page":"API","title":"Sleipnir.downscale_2D_climate","text":"downscale_2D_climate(glacier::Glacier2D)\n\nDownscales the climate data for a given 2D glacier.\n\nArguments\n\nglacier::Glacier2D: The glacier object containing the climate data to be downscaled.\n\nReturns\n\nclimate_2D_step: The downscaled 2D climate data for the glacier.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.fillNaN!-api","page":"API","title":"Sleipnir.fillNaN!","text":"fillNaN!(A::AbstractArray, fill::Number=zero(eltype(A)))\n\nReplace all NaN values in the array A with the specified fill value.\n\nArguments\n\nA::AbstractArray: The array in which NaN values will be replaced.\nfill::Number: The value to replace NaN with. Defaults to zero(eltype(A)).\n\n\n\n\n\n","category":"function"},{"location":"api/#Sleipnir.fillNaN-api","page":"API","title":"Sleipnir.fillNaN","text":"fillNaN(A::AbstractArray, fill::Number=zero(eltype(A)))\n\nReplace all NaN values in the array A with the specified fill value.  If no fill value is provided, it defaults to the zero value of the element type of A.\n\nArguments\n\nA::AbstractArray: The input array that may contain NaN values.\nfill::Number: The value to replace NaNs with. Defaults to zero(eltype(A)).\n\nReturns\n\nAn array of the same type and shape as A, with all NaN values replaced by fill.\n\n\n\n\n\n","category":"function"},{"location":"api/#Sleipnir.fillZeros!-api","page":"API","title":"Sleipnir.fillZeros!","text":"fillZeros!(A::AbstractArray, fill::Number=NaN)\n\nReplace all zero elements in the array A with the specified fill value.\n\nArguments\n\nA::AbstractArray: The array in which to replace zero elements.\nfill::Number: The value to replace zero elements with. Defaults to NaN.\n\n\n\n\n\n","category":"function"},{"location":"api/#Sleipnir.fillZeros-api","page":"API","title":"Sleipnir.fillZeros","text":"fillZeros(A::AbstractArray, fill::Number=NaN) -> AbstractArray\n\nReplace all zero elements in the array A with the specified fill value.\n\nArguments\n\nA::AbstractArray: The input array in which zero elements are to be replaced.\nfill::Number: The value to replace zero elements with. Defaults to NaN.\n\nReturns\n\nAbstractArray: A new array with zero elements replaced by the fill value.\n\n\n\n\n\n","category":"function"},{"location":"api/#Sleipnir.filter_missing_glaciers!-Tuple{Vector{Glacier2D}, Sleipnir.Parameters}-api","page":"API","title":"Sleipnir.filter_missing_glaciers!","text":"filter_missing_glaciers!(glaciers::Vector{Glacier2D}, params::Parameters)\n\nFilters out glaciers from the provided glaciers vector that are marked as missing in the OGGM task log (provided by Gungnir) or in a previously saved file.\n\nArguments\n\nglaciers::Vector{Glacier2D}: A vector of Glacier2D objects to be filtered.\nparams::Parameters: A Parameters object containing simulation parameters.\n\nReturns\n\nmissing_glaciers::Vector{String}: A vector of glacier IDs that were filtered out.\n\nDetails\n\nThe function reads a task log CSV file from the working directory specified in params. It then determines which glaciers are missing based on the task log and additional conditions specified in params. If a previously saved file of missing glaciers exists, it loads and merges the missing glaciers from that file. Finally, it removes the missing glaciers from the glaciers vector and saves the updated list of missing glaciers to a file.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.filter_missing_glaciers!-Tuple{Vector{String}, Sleipnir.Parameters}-api","page":"API","title":"Sleipnir.filter_missing_glaciers!","text":"filter_missing_glaciers!(rgi_ids::Vector{String}, params::Parameters)\n\nFilter out glaciers that cannot be processed from the given list of RGI IDs.\n\nArguments\n\nrgi_ids::Vector{String}: A vector of RGI IDs representing glaciers.\nparams::Parameters: A Parameters object containing simulation parameters.\n\nDescription\n\nThis function filters out glaciers from the provided rgi_ids list based on two criteria:\n\nGlaciers that are marked as level 2 in the RGI statistics CSV file.\nGlaciers listed in the missing_glaciers.jld2 file located in the params.simulation.working_dir directory.\n\nNotes\n\nThe RGI statistics CSV file is downloaded from a remote server.\nIf the missing_glaciers.jld2 file is not available, a warning is logged and the function skips this filtering step.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.generate_raw_climate_files-Tuple{String, SimulationParameters}-api","page":"API","title":"Sleipnir.generate_raw_climate_files","text":"generate_raw_climate_files(rgi_id::String, simparams::SimulationParameters)\n\nGenerate raw climate files for a given RGI (Randolph Glacier Inventory) ID and simulation parameters.\n\nArguments\n\nrgi_id::String: The RGI ID for which to generate raw climate files.\nsimparams::SimulationParameters: The simulation parameters containing the time span and RGI paths.\n\nDescription\n\nThis function generates raw climate files for a specified RGI ID if they do not already exist. It retrieves raw climate data, ensures the desired period is covered, crops the data to the desired time period, and saves the raw climate data to disk.\n\nDetails\n\nConstructs the path to the RGI directory using the provided rgi_id and simparams.\nChecks if the raw climate file for the specified time span already exists.\nIf the file does not exist:\nRetrieves the raw climate data.\nEnsures the desired period is covered by the climate data.\nCrops the climate data to the desired time period.\nSaves the cropped climate data to disk.\nTriggers garbage collection to free up memory.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.get_cumulative_climate!-api","page":"API","title":"Sleipnir.get_cumulative_climate!","text":"get_cumulative_climate!(climate, period; gradient_bounds=[-0.009, -0.003], default_grad=-0.0065)\n\nCalculate and update the cumulative climate data for a given period.\n\nKeyword arguments\n\nclimate::Climate: The climate object containing raw climate data.\nperiod::Period: The period for which to calculate the cumulative climate data.\ngradient_bounds::Vector{Float64}: Optional. The bounds within which to clamp the gradient values. Default is [-0.009, -0.003].\ndefault_grad::Float64: Optional. The default gradient value to use. Default is -0.0065.\n\nUpdates\n\nclimate.climate_raw_step: The raw climate data for the given period.\nclimate.avg_temps: The average temperature for the given period.\nclimate.avg_gradients: The average gradient for the given period.\nclimate.climate_step[\"prcp\"]: The cumulative precipitation for the given period.\nclimate.climate_step[\"temp\"]: The cumulative temperature for the given period.\nclimate.climate_step[\"gradient\"]: The cumulative gradient for the given period.\nclimate.climate_step[\"avg_temp\"]: The average temperature for the given period.\nclimate.climate_step[\"avg_gradient\"]: The average gradient for the given period.\nclimate.climate_step[\"ref_hgt\"]: The reference height from the metadata of the raw climate data.\n\n\n\n\n\n","category":"function"},{"location":"api/#Sleipnir.get_cumulative_climate-api","page":"API","title":"Sleipnir.get_cumulative_climate","text":"get_cumulative_climate(climate; gradient_bounds=[-0.009, -0.003], default_grad=-0.0065)\n\nCalculate cumulative climate statistics from the given climate data.\n\nKeyword arguments\n\nclimate::Climate: A climate object containing temperature, precipitation, and gradient data.\ngradient_bounds::Vector{Float64}: A two-element vector specifying the lower and upper bounds for the gradient values. Defaults to [-0.009, -0.003].\ndefault_grad::Float64: The default gradient value to use. Defaults to -0.0065.\n\nReturns\n\nclimate_sum::Dict{String, Any}: A dictionary containing the following keys:\n\"temp\": The sum of positive degree days (PDDs) from the temperature data.\n\"prcp\": The sum of precipitation data.\n\"gradient\": The sum of gradient data, clipped within the specified bounds.\n\"avg_temp\": The average temperature.\n\"avg_gradient\": The average gradient.\n\"ref_hgt\": The reference height from the climate metadata.\n\nNotes\n\nThe temperature data is modified to only include positive degree-day values (PDDs).\nThe gradient data is clipped within the specified bounds to ensure plausible values.\n\n\n\n\n\n","category":"function"},{"location":"api/#Sleipnir.get_glathida!-Union{Tuple{G}, Tuple{Vector{G}, Sleipnir.Parameters}} where G<:Glacier2D-api","page":"API","title":"Sleipnir.get_glathida!","text":"get_glathida!(glaciers::Vector{G}, params::Parameters; force=false) where {G <: Glacier2D}\n\nRetrieve and process glacier thickness data for a vector of Glacier2D objects.\n\nArguments\n\nglaciers::Vector{Glacier2D}: A vector of Glacier2D objects for which the glacier thickness data is to be retrieved.\nparams::Parameters: A Parameters object containing simulation parameters.\nforce::Bool=false: A boolean flag indicating whether to force the retrieval of glacier thickness data.\n\nReturns\n\ngtd_grids::Vector: A vector of glacier thickness data grids.\nglaciers::Vector{Glacier2D}: The updated vector of Glacier2D objects after removing glaciers with no data.\n\nDescription\n\nThis function retrieves glacier thickness data for each glacier in the input vector using parallel processing. It updates a list of missing glaciers if any glacier has all data points equal to zero. The function then removes glaciers with no data from both the gtd_grids and glaciers vectors and returns the updated vectors.\n\nNotes\n\nThe function uses pmap for parallel processing of glaciers.\nThe list of missing glaciers is stored in a JLD2 file located at params.simulation.working_dir/data/missing_glaciers.jld2.\nGlaciers with no data are identified and removed based on the condition that all data points in their thickness grid are zero.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.get_glathida_glacier-Tuple{Glacier2D, Sleipnir.Parameters, Any}-api","page":"API","title":"Sleipnir.get_glathida_glacier","text":"get_glathida_glacier(glacier::Glacier2D, params::Parameters, force)\n\nRetrieve or generate the glathida glacier grid for a given glacier.\n\nArguments\n\nglacier::Glacier2D: The glacier object for which the glathida grid is to be retrieved or generated.\nparams::Parameters: The parameters object containing simulation settings.\nforce: A boolean flag indicating whether to force regeneration of the glathida grid even if it already exists.\n\nReturns\n\ngtd_grid: A 2D array representing the glathida glacier grid.\n\nDescription\n\nThis function checks if the glathida glacier grid file (glathida.h5) exists in the specified path. If the file exists and force is false, it reads the grid from the file. Otherwise, it reads the glacier thickness data from a CSV file (glathida_data.csv), computes the average thickness for each grid cell, and saves the resulting grid to an HDF5 file (glathida.h5).\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.get_longterm_temps-Tuple{String, Sleipnir.Parameters, Rasters.RasterStack}-api","page":"API","title":"Sleipnir.get_longterm_temps","text":"get_longterm_temps(rgi_id::String, params::Parameters, climate::RasterStack) -> Array{Float64}\n\nCalculate the long-term average temperatures for a given glacier.\n\nArguments\n\nrgi_id::String: The RGI (Randolph Glacier Inventory) identifier for the glacier.\nparams::Parameters: A struct containing simulation parameters, including paths to RGI data.\nclimate::RasterStack: A RasterStack object containing climate data.\n\nReturns\n\nArray{Float64}: An array of long-term average temperatures.\n\nDescription\n\nThis function retrieves the gridded data for the specified glacier using its RGI identifier. It then applies a temperature gradient to the climate data based on the glacier's topography. Finally, it calculates the long-term average temperatures by grouping the temperature data by year and computing the mean for each group.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.get_longterm_temps-Tuple{String, Sleipnir.Parameters}-api","page":"API","title":"Sleipnir.get_longterm_temps","text":"get_longterm_temps(rgi_id::String, params::Parameters)\n\nCalculate the long-term average temperatures for a given glacier.\n\nArguments\n\nrgi_id::String: The RGI (Randolph Glacier Inventory) identifier for the glacier.\nparams::Parameters: A Parameters object containing simulation parameters, including paths to necessary data files.\n\nReturns\n\nlongterm_temps: A vector of long-term average temperatures for the glacier.\n\nDescription\n\nThis function reads the gridded data and raw climate data for the specified glacier, applies a temperature gradient correction based on the glacier's topography, and then calculates the long-term average temperatures by grouping the temperature data by year.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.get_raw_climate_data-Tuple{String}-api","page":"API","title":"Sleipnir.get_raw_climate_data","text":"get_raw_climate_data(rgi_path::String) -> RasterStack\n\nLoad raw climate data from a specified path.\n\nArguments\n\nrgi_path::String: The file path to the directory containing the climate data file.\n\nReturns\n\nRasterStack: A RasterStack object containing the climate data from the specified file.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.get_result_id_from_rgi-Union{Tuple{SIM}, Tuple{I}, Tuple{I, SIM}} where {I<:Integer, SIM<:Simulation}-api","page":"API","title":"Sleipnir.get_result_id_from_rgi","text":"get_result_id_from_rgi(glacier_id::I, simulation::SIM) where {I <: Integer, SIM <: Simulation}\n\nExtract results of specific simulation from the Simulation object.\n\nArguments\n\nglacier_id::I: Numerical ID of glacier used to generate simulation.\nsimulation::SIM`: The simulation object containing the parameters and results.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.grid-Union{Tuple{FileArray}, Tuple{VM}, Tuple{F}, Tuple{G}, Tuple{G, Vector{F}, Vector{F}, Union{Array{Union{Missing, F}, 3}, FileArray}, Union{Array{Union{Missing, F}, 3}, FileArray}, VM}} where {G<:AbstractGlacier, F<:AbstractFloat, VM<:Sleipnir.VelocityMapping, FileArray<:Rasters.FileArray}-api","page":"API","title":"Sleipnir.grid","text":"grid(\n    glacier::G,\n    latitudes::Vector{F},\n    longitudes::Vector{F},\n    vx::Union{FileArray, Array{Union{Missing, F}, 3}},\n    vy::Union{FileArray, Array{Union{Missing, F}, 3}},\n    mapping::VM\n) where {\n    G <: AbstractGlacier,\n    F <: AbstractFloat,\n    VM <: VelocityMapping,\n    FileArray <: Rasters.FileArray\n}\n\nGrid velocity data onto the glacier grid following the prescribed mapping. This function maps the 3 dimensional surface velocities (x, y and t) to the glacier grid. The provided surface velocities can be a Rasters.FileArray which happens when the RasterStack is instantiated in lazy mode. In this situation, only the smallest cube that contains all the needed data to construct the mapping is read from disk. The returned velocity variables have shape (nTimes, nx, ny) where nTimes is the number of time steps and (nx, ny) is the size of the glacier grid.\n\nArguments:\n\nglacier::G: Glacier instance which determines the glacier on which the   velocities are projected onto.\nlatitudes::Vector{F}: Vector of latitude values of the original surface   velocity grid.\nlongitudes::Vector{F}: Vector of longitude values of the original surface   velocity grid.\nvx::Union{FileArray, Array{Union{Missing, F}, 3}}: X component of the original   surface velocities. It can be either a Rasters.FileArray if the datacube is   read in lazy mode, or a plain 3 dimensional array.\nvy::Union{FileArray, Array{Union{Missing, F}, 3}}: Y component of the original   surface velocities. It can be either a Rasters.FileArray if the datacube is   read in lazy mode, or a plain 3 dimensional array.\nmapping::VM: Mapping to use.\n\nReturns:\n\nxG: A vector that gives the x coordinates of the glacier grid.\nyG: A vector that gives the y coordinates of the glacier grid.\nvxG: A 3 dimensional array of the x component of the velocity gridded onto the   glacier grid.\nvyG: A 3 dimensional array of the y component of the velocity gridded onto the   glacier grid.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.initialize_glacier-Tuple{String, Sleipnir.Parameters}-api","page":"API","title":"Sleipnir.initialize_glacier","text":"initialize_glacier(rgi_id::String, parameters::Parameters; smoothing=false)\n\nInitialize a glacier with the given RGI ID and parameters.\n\nArguments\n\nrgi_id::String: The RGI (Randolph Glacier Inventory) ID of the glacier.\nparameters::Parameters: A struct containing various parameters required for initialization.\nsmoothing::Bool: Optional. If true, apply smoothing to the initial topography. Default is false.\nvelocityDatacubes::Union{Dict{String, String}, Dict{String, RasterStack}}: A dictionary that provides for each RGI ID either the path to the datacube or the RasterStack with velocity data.\n\nReturns\n\nglacier: An initialized glacier object containing the initial topography and climate data.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.initialize_glacier_climate!-Tuple{AbstractGlacier, Sleipnir.Parameters}-api","page":"API","title":"Sleipnir.initialize_glacier_climate!","text":"initialize_glacier_climate!(glacier::AbstractGlacier, params::Parameters)\n\nInitialize the climate data for a given glacier.\n\nArguments\n\nglacier::AbstractGlacier: The glacier object to initialize the climate data for.\nparams::Parameters: The parameters containing simulation settings and paths.\n\nDescription\n\nThis function initializes the climate data for a glacier by:\n\nCreating a dummy period based on the simulation time span and step.\nLoading the raw climate data from a NetCDF file.\nCalculating the cumulative climate data for the dummy period.\nDownscaling the cumulative climate data to a 2D grid.\nRetrieving long-term temperature data for the glacier.\nStoring the climate data in the glacier object, including raw climate data, cumulative climate data, downscaled 2D climate data, long-term temperatures, average temperatures, and average gradients.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.initialize_glacier_data-Tuple{String, Sleipnir.Parameters}-api","page":"API","title":"Sleipnir.initialize_glacier_data","text":"initialize_glacier_data(rgi_id::String, params::Parameters; smoothing=false, test=false)\n\nInitialize glacier data for a given RGI ID and parameters.\n\nArguments\n\nrgi_id::String: The RGI ID of the glacier.\nparams::Parameters: A Parameters object containing simulation parameters.\nsmoothing::Bool=false: Optional; whether to apply smoothing to the initial ice thickness. Default is false.\ntest::Bool=false: Optional; test flag. Default is false.\n\nReturns\n\nglacier::Glacier2D: A Glacier2D object initialized with the glacier data.\n\nDescription\n\nThis function loads and initializes the glacier data for a given RGI ID. It retrieves the initial ice thickness conditions based on the specified source in the parameters, applies optional smoothing, and initializes the glacier's topographical and velocity data. The function also handles Mercator projection for the glacier coordinates and filters glacier borders in high elevations to avoid overflow problems.\n\nNotes\n\nThe function reverses the matrices for ice thickness, bedrock, and other data to match the required orientation.\nIf the Mercator projection includes latitudes larger than 80°, a warning is issued.\nIf the glacier data is missing, the function updates a list of missing glaciers and issues a warning.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.initialize_glaciers-Tuple{Vector{String}, Sleipnir.Parameters}-api","page":"API","title":"Sleipnir.initialize_glaciers","text":"initialize_glaciers(\n    rgi_ids::Vector{String},\n    params::Parameters;\n    velocityDatacubes::Union{Dict{String, String}, Dict{String, RasterStack}}=Dict(),\n)\n\nInitialize glaciers based on provided RGI IDs and parameters.\n\nArguments\n\nrgi_ids::Vector{String}: A vector of RGI IDs representing the glaciers to be initialized.\nparams::Parameters: A Parameters object containing simulation parameters.\ntest::Bool: An optional boolean flag indicating whether to run in test mode. Default is false.\nvelocityDatacubes::Union{Dict{String, String}, Dict{String, RasterStack}}: A dictionary that provides for each RGI ID either the path to the datacube or the RasterStack with velocity data.\n\nReturns\n\nglaciers::Vector{Glacier2D}: A vector of initialized Glacier2D objects.\n\nDescription\n\nThis function performs the following steps:\n\nGenerates a file for missing glaciers if it does not already exist.\nFilters out missing glaciers from the provided RGI IDs.\nGenerates raw climate data for the glaciers if necessary.\nInitializes the glaciers using the provided RGI IDs and parameters.\nIf use_glathida_data is enabled in the simulation parameters, assigns GlaThiDa data to the glaciers.\n\nErrors\n\nThrows an error if none of the provided RGI IDs have GlaThiDa data.\n\nWarnings\n\nIssues a warning if not all glaciers have GlaThiDa data available.\n\nExample\n\n# We declare a list of glaciers to be initialized with their RGI IDs\nrgi_ids = [\"RGI60-11.03638\", \"RGI60-11.01450\", \"RGI60-11.02346\", \"RGI60-08.00203\"]\n# We initialize those glaciers based on the RGI IDs and the parameters we previously specified\nglaciers = initialize_glaciers(rgi_ids, params)\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.initialize_surfacevelocitydata-Union{Tuple{Union{String, Rasters.RasterStack}}, Tuple{VM}, Tuple{G}} where {G<:AbstractGlacier, VM<:Sleipnir.VelocityMapping}-api","page":"API","title":"Sleipnir.initialize_surfacevelocitydata","text":"initialize_surfacevelocitydata(\n    raster::Union{String, RasterStack};\n    glacier::Union{G, Nothing}=nothing,\n    mapping::VM=MeanDateVelocityMapping(),\n    compute_vabs_error::Bool=true\n) where {G <: AbstractGlacier, VM <: VelocityMapping}\n\nInitialize SurfaceVelocityData from Rabatel et. al (2023).\n\nArguments:\n\nraster::Union{String, RasterStack}: RasterStack or path of the netCDF file with surface velocity data.\nglacier::Union{G, Nothing}: Glacier associated to the surface velocity datacube.   When provided, the surface velocity data are gridded on the glacier grid using   the mapping.\nmapping::VM: Mapping to use in order to grid the data from the coordinates of   the velocity product datacube to the glacier grid.\ncompute_vabs_error::Bool: Whether to compute the absolute error uncertainty.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.is_in_glacier-Union{Tuple{F}, Tuple{I}, Tuple{Matrix{F}, I}} where {I<:Integer, F<:AbstractFloat}-api","page":"API","title":"Sleipnir.is_in_glacier","text":"is_in_glacier(A::Matrix{F}, distance::I) where {I <: Integer, F <: AbstractFloat}\n\nReturn a matrix with booleans indicating if a given pixel is at distance at least distance in the set of non zero values of the matrix. This usually allows discarding the border pixels of a glacier.\n\nArguments:\n\nA::Matrix{F}: Matrix from which to compute the matrix of booleans.\ndistance::I: Distance to the border, computed as the number of pixels we need   to move to find a pixel with value zero.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.max_or_empty-Tuple{Array}-api","page":"API","title":"Sleipnir.max_or_empty","text":"max_or_empty(A::Array)\n\nReturn maximum value for non-empty arrays. This is just required to compute the error in the absolute velocity.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.parse_proj-Tuple{String}-api","page":"API","title":"Sleipnir.parse_proj","text":"parse_proj(proj::String)\n\nParses the string containing the information of the projection to filter for important information \"+proj=tmerc +lat0=0 +lon0=6.985 +k=0.9996 +x0=0 +y0=0 +datum=WGS84 +units=m +no_defs\"\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.partial_year-Tuple{Any}-api","page":"API","title":"Sleipnir.partial_year","text":"partial_year(float::Float64) -> Float64\n\nCalculate the partial year value based on the given floating-point number.\n\nArguments\n\nfloat::Float64: A floating-point number representing the fraction of the year.\n\nReturns\n\nFloat64: The calculated partial year value.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.partial_year-Tuple{Type{<:Dates.Period}, Any}-api","page":"API","title":"Sleipnir.partial_year","text":"partial_year(period::Type{<:Period}, float)\n\nCalculate a partial year date based on a floating-point year value.\n\nArguments\n\nperiod::Type{<:Period}: The type of period to use (e.g., Month, Day).\nfloat::Float64: The floating-point year value.\n\nReturns\n\nDate: The calculated date corresponding to the partial year.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.plot_bias-Tuple{Any, Any}-api","page":"API","title":"Sleipnir.plot_bias","text":"plot_bias(\n    results,\n    variables;\n    treshold = [0, 0],\n    figsize::Union{Nothing, Tuple{Int64, Int64}}=nothing,\n)\n\nPlot the bias of the glacier integrated volume over the specified time span.\n\nArguments\n\nresults::Results: The results object containing the data to be plotted.\nvariables::Vector{Symbol}: The variables to be plotted.\ntitle_mapping::Dict{Symbol, String}: A dictionary mapping variable names to their titles.\ntspan::Tuple{Float64, Float64}: A tuple representing the start and end time for the simulation.\nfigsize::Union{Nothing, Tuple{Int64, Int64}}: Size of the figure.\n\nReturns\n\nA plot of the glacier integrated volume bias.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.plot_glacier-Tuple{Results, String, Vector{Symbol}}-api","page":"API","title":"Sleipnir.plot_glacier","text":"plot_glacier(results::Results, plot_type::String, variables::Vector{Symbol}; kwargs...) -> Figure\n\nGenerate various types of plots for glacier data.\n\nArguments\n\nresults::Results: The results object containing the data to be plotted.\nplot_type::String: Type of plot to generate. Options are:\n\"heatmaps\": Heatmaps for glacier variables like :H, :H₀, :S, :B, :V, :Vx, :Vy, :V_ref.\n\"evolution difference\": Temporal difference metrics (between start and end) for a variable, with optional metrics like \"hist\" (histogram) and \"difference\".\n\"evolution statistics\": Temporal statistical metrics for a variable, with optional metrics like \"average\", \"median\", \"min\", \"max\", and \"std\".\n\"integrated volume\": Temporal evolution of the integrated ice volume for a variable.\n\"bias\": Scatter plot to visualize the bias between two variables.\nvariables::Vector{Symbol}: Variables to be plotted, e.g., :H.\n\nOptional Keyword Arguments\n\ntspan: A tuple representing the start and end time for the simulation.\nmetrics: Metrics to visualize, e.g., [\"average\"] for statistics, [\"difference\"] for difference.\nscale_text_size::Union{Nothing,Float64}: Optional argument to scale the text size for heatmaps.\nthreshold::Vector{F}: Threshold values for filtering data in bias plots.\nfigsize::Tuple{Int64, Int64}: Size of the figure.\n\nReturns\n\nA Figure object containing the desired visualization.\n\nNotes\n\nEnsure the variables and kwargs match the requirements of the specified plot_type.\nThe function routes requests to specific plotting functions based on plot_type.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.plot_glacier_difference_evolution-Union{Tuple{F}, Tuple{Results, Vector{Symbol}, Any}} where F<:AbstractFloat-api","page":"API","title":"Sleipnir.plot_glacier_difference_evolution","text":"plot_glacier_difference_evolution(\n    results::Results,\n    variables::Vector{Symbol},\n    title_mapping;\n    tspan::Tuple{F,F}=results.tspan,\n    metrics::Vector{String}=\"difference\",\n    figsize::Union{Nothing, Tuple{Int64, Int64}}=nothing,\n) where {F<:AbstractFloat}\n\nPlot the evolution of the difference in a glacier variable over time.\n\nArguments\n\nresults::Results: The simulation results object containing the data to be plotted.\nvariables::Vector{Symbol}: The variable to be plotted.\ntitle_mapping: A dictionary mapping variable names to their titles.\ntspan::Tuple{F,F}: A tuple representing the start and end time for the simulation.\nmetrics::Vector{String}: Metrics to visualize, e.g., [\"difference\"].\nfigsize::Union{Nothing, Tuple{Int64, Int64}}: Size of the figure.\n\nReturns\n\nA plot of the glacier difference evolution.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.plot_glacier_heatmaps-Tuple{Results, Vector{Symbol}, Dict}-api","page":"API","title":"Sleipnir.plot_glacier_heatmaps","text":"plot_glacier_heatmaps(\n    results::Results,\n    variables::Vector{Symbol},\n    title_mapping::Dict;\n    scale_text_size::Union{Nothing,Float64}=nothing,\n    timeIdx::Union{Nothing,Int64}=nothing\n) -> Figure\n\nPlot heatmaps for glacier variables.\n\nArguments\n\nresults::Results: The results object containing the data to be plotted.\nvariables::Vector{Symbol}: A list of variables to be plotted.\ntitle_mapping::Dict: A dictionary mapping variable names to their titles and colormaps.\nscale_text_size::Union{Nothing,Float64}: Optional argument to scale the text size.\ntimeIdx::Union{Nothing,Int64}:: Optional argument to select the index at which   data should be plotted when dealing with vector of matrix. Default is nothing   which selects the last element available.\n\nReturns\n\nA plot of the glacier heatmaps.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.plot_glacier_integrated_volume-Tuple{Any, Any, Any}-api","page":"API","title":"Sleipnir.plot_glacier_integrated_volume","text":"plot_glacier_integrated_volume(\n    results,\n    variables,\n    title_mapping;\n    tspan,\n    figsize::Union{Nothing, Tuple{Int64, Int64}}=nothing,\n)\n\nPlot the integrated volume of a glacier variable over time.\n\nArguments\n\nresults::Results: The results object containing the data to be plotted.\nvariables::Vector{Symbol}: The variable to be plotted.\ntitle_mapping: A dictionary mapping variable names to their titles.\ntspan: A tuple representing the start and end time for the simulation.\nfigsize::Union{Nothing, Tuple{Int64, Int64}}: Size of the figure.\n\nReturns\n\nA plot of the glacier integrated volume.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.plot_glacier_statistics_evolution-Tuple{Results, Vector{Symbol}, Any}-api","page":"API","title":"Sleipnir.plot_glacier_statistics_evolution","text":"plot_glacier_statistics_evolution(\n    results::Results,\n    variables::Vector{Symbol},\n    title_mapping;\n    metrics=\"median\",\n    tspan,\n    threshold=0.5,\n    figsize::Union{Nothing, Tuple{Int64, Int64}}=nothing,\n)\n\nPlot the evolution of statistics for multiple glacier variables over time.\n\nArguments\n\nresults::Results: The simulation results object containing the data to be plotted.\nvariables::Vector{Symbol}: A list of variables to be plotted.\ntitle_mapping: A dictionary mapping variable names to their titles.\nmetrics: Metrics to visualize, e.g., \"average\", \"median\", \"min\", \"max\", and \"std\". Default is \"median\".\ntspan: A tuple representing the start and end time for the simulation.\nthreshold: A threshold value to filter the data. Default is 0.5.\nfigsize::Union{Nothing, Tuple{Int64, Int64}}: Size of the figure.\n\nReturns\n\nA plot of the glacier statistics evolution.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.plot_glacier_vid-Tuple{String, Vector{Matrix{Float64}}, Glacier2D, SimulationParameters, String}-api","page":"API","title":"Sleipnir.plot_glacier_vid","text":"plot_glacier_vid(\n    plot_type::String,\n    H::Vector{Matrix{Float64}},\n    glacier::Glacier2D,\n    simuparams::SimulationParameters,\n    pathVideo::String;\n    framerate::Int=24,\n    baseTitle::String=\"\"\n)\n\nGenerate various types of videos for glacier data. For now only the evolution of the glacier ice thickness is supported. More types of visualizations will be added in the future. \n\nArguments\n\nplot_type: Type of plot to generate. Options are:\n\"thickness\": Heatmap of the glacier thickness.\nH: A vector of matrices containing the ice thickness over time. This should be   replaced by a Results instance in the future once Results no longer depends on   an iceflow model.\nglacier: A glacier instance.\nsimuparams: The simulation parameters.\npathVideo: Path of the mp4 file to generate.\n\nOptional Keyword Arguments\n\nframerate: The framerate to use for the video generation.\nbaseTitle: The prefix to use in the title of the frames. In each frame it is   concatenated with the value of the year in the form \" (t=XXXX)\".\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.ratio_max-Tuple{Any, Any}-api","page":"API","title":"Sleipnir.ratio_max","text":"ratio_max(v, vabs)\n\nCompute the maximum ratio between v and vabs at points where the value of vabs is not a NaN.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.save_results_file!-Union{Tuple{SIM}, Tuple{I}, Tuple{F}, Tuple{Array{Results{F, I}, 1}, SIM}} where {F<:AbstractFloat, I<:Int64, SIM<:Simulation}-api","page":"API","title":"Sleipnir.save_results_file!","text":"save_results_file!(results_list::Vector{Results{F, I}}, simulation::SIM; path::Union{String,Nothing}=nothing) where {F <: AbstractFloat, I <: Int, SIM <: Simulation}\n\nSave the results of a simulation to a file.\n\nArguments\n\nresults_list::Vector{Results{F, I}}: A vector containing the results of the simulation.\nsimulation::SIM: The simulation object containing the parameters and results.\npath::Union{String,Nothing}: Optional. The path where the results file will be saved. If not provided, a default path will be used.\n\nDescription\n\nThis function saves the results of a simulation to a file in JLD2 format. If the path argument is not provided, the function will create a default path based on the current project directory. The results are saved in a file named prediction_<nglaciers>glaciers_<tspan>.jld2, where <nglaciers> is the number of glaciers in the simulation and <tspan> is the simulation time span.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.smooth!-Tuple{Any}-api","page":"API","title":"Sleipnir.smooth!","text":"smooth!(A)\n\nSmooths the interior of a 2D array A using a simple averaging method. The function modifies the array A in place.\n\nArguments\n\nA::AbstractMatrix: A 2D array to be smoothed.\n\nDetails\n\nThe function updates the interior elements of A (excluding the boundary elements) by adding a weighted average of the second differences along both dimensions. The boundary elements are then set to the values of their nearest interior neighbors to maintain the boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.stop_condition_tstops-NTuple{4, Any}-api","page":"API","title":"Sleipnir.stop_condition_tstops","text":"stop_condition_tstops(u, t, integrator, tstops)\n\nCheck if the current time t is in the list of stop times tstops.\n\nArguments\n\nu: The current state of the system (not used in this function).\nt: The current time.\nintegrator: The integrator object (not used in this function).\ntstops: A collection of times at which the integration should stop.\n\nReturns\n\nBool: true if t is in tstops, otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"api/#Sleipnir.trim_period-Tuple{Any, Any}-api","page":"API","title":"Sleipnir.trim_period","text":"trim_period(period, climate)\n\nAdjusts the given period to fit within the bounds of the climate data, ensuring it aligns with hydrological years.\n\nArguments\n\nperiod::UnitRange{Date}: The initial date range to be trimmed.\nclimate::AbstractArray: The climate data array, which should have a time dimension Ti.\n\nReturns\n\nUnitRange{Date}: The adjusted date range that fits within the climate data's time bounds.\n\nDetails\n\nIf the start of the climate data is later than the start of the period, the period is adjusted to start from October 1st of the year of the climate data's start.\nIf the end of the climate data is earlier than the end of the period, the period is adjusted to end on September 30th of the year of the climate data's end.\n\n\n\n\n\n","category":"method"},{"location":"forward_simulation/#Forward-simulation-tutorial","page":"Forward simulation","title":"Forward simulation tutorial","text":"","category":"section"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"# This tutorial provides a simple example on how to perform a forward simulation using ODINN.jl.\n\nusing ODINN\n\n# Define the working directory\nworking_dir = joinpath(homedir(), \"ODINN_simulations\")\n\n# Ensure the working directory exists\nmkpath(working_dir)\n\n# Define which glacier RGI IDs we want to work with\nrgi_ids = [\"RGI60-11.03638\", \"RGI60-11.01450\", \"RGI60-11.02346\", \"RGI60-08.00203\"]\nrgi_paths = get_rgi_paths()\n# Filter out glaciers that are not used to avoid having references that depend on all the glaciers processed in Gungnir\nrgi_paths = Dict(k => rgi_paths[k] for k in rgi_ids)\n\n# Create the necessary parameters\nparams = Parameters(\n    simulation = SimulationParameters(\n        working_dir = working_dir,\n        tspan = (2010.0, 2015.0),\n\t\tmultiprocessing = true,\n        workers = 5,\n\t\trgi_paths = rgi_paths\n    )\n)\n\n# Specify a model based on an iceflow model, a mass balance model, and a machine learning model\nmodel = Model(\n    iceflow = SIA2Dmodel(params),\n    mass_balance = TImodel1(params; DDF = 6.0 / 1000.0, acc_factor = 1.2 / 1000.0),\n\tmachine_learning = nothing\n)\n\n# We initialize the glaciers with all the necessary data\nglaciers = initialize_glaciers(rgi_ids, params)\n\n# We specify the type of simulation we want to perform\nprediction = Prediction(model, glaciers, params)\n\n# And finally, we just run the simulation\nHuginn.run!(prediction)\n\n# Then we can visualize the results of the simulation, e.g. the difference in ice thickness between 2010 to 2015 for Argentière glacier\npdiff = plot_glacier(prediction.results[1], \"evolution difference\", [:H]; metrics=[\"difference\"])","category":"page"},{"location":"forward_simulation/#Step-by-step-explanation-of-the-tutorial","page":"Forward simulation","title":"Step-by-step explanation of the tutorial","text":"","category":"section"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"Here we will cover in detail each one of the steps that lead us to run the Prediction from the previous example (i.e. a forward run). This first tutorial keeps things simple, and since we are not using machine learning models, we will only use the Model type to specify the iceflow and mass balance models. These functionalities are mainly covered by Huginn.jl.","category":"page"},{"location":"forward_simulation/#Step-1:-Parameter-initialization","page":"Forward simulation","title":"Step 1: Parameter initialization","text":"","category":"section"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"The first step is to initialize and specify all the necessary parameters. In ODINN.jl we have many different types of parameters, specifying different aspects of the model. All the parameter types come with a default constructor, which will provide default values in case you don't want to tune those. The main types of parameters are:","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"Simulation parameters: SimulationParameters includes all the parameters related to the                            ODINN.jl simulation, including the number of workers, the timespan                             of the simulation or the working directory.\nHyperparameters: Hyperparameters includes all the necessary hyperparameters for a machine learning model.\nUDEparameters: UDEparameters contains the parameters related to the training of a Universal Differential Equation.","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"All these sub-types of parameters are held in a Parameters struct, a general parameters structure to be passed to an ODINN simulation.","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"First we need to specify a list of RGI IDs of the glacier we want to work with. Specifying an RGI region is also possible. From these RGI IDs, we will look for the necessary files inside the workspace.","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"rgi_ids = [\"RGI60-11.03638\", \"RGI60-11.01450\", \"RGI60-11.02346\", \"RGI60-08.00203\"]\nrgi_paths = get_rgi_paths()","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"Filter out glaciers that are not used to avoid having references that depend on all the glaciers processed in Gungnir","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"rgi_paths = Dict(k => rgi_paths[k] for k in rgi_ids)\n\nparams = Parameters(\n    simulation = SimulationParameters(\n        working_dir = working_dir,\n        tspan = (2010.0, 2015.0),\n\t\tmultiprocessing = false,\n        #workers = 5,\n\t\trgi_paths = rgi_paths\n    )\n)","category":"page"},{"location":"forward_simulation/#Step-2:-Model-specification","page":"Forward simulation","title":"Step 2: Model specification","text":"","category":"section"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"The next step is to specify which model(s) we want to use for our simulation. In ODINN we have three different types of model, which are encompassed in a Model structure:","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"Iceflow model: IceflowModel is the ice flow dynamics model that will be used to simulate                     iceflow. It defaults to a 2D Shallow Ice Approximation.\nSurface mass balance model: MassBalanceModel is the mass balance model that will be used for                             simulations. Options here include temperature-index models, or                             machine learning models coming from MassBalanceMachine.\nMachine learning model: MLmodel is the machine learning model (e.g. a neural network) which will                             be used as part of a hybrid model based on a Universal Differential Equation.","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"Generally, a model can be initialized directly using the Model constructor:","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"model = Model(\n    iceflow = SIA2Dmodel(params),\n    mass_balance = TImodel1(params; DDF=6.0/1000.0, acc_factor=1.2/1000.0),\n    machine_learning = nothing\n)","category":"page"},{"location":"forward_simulation/#Step-3:-Glacier-initialization","page":"Forward simulation","title":"Step 3: Glacier initialization","text":"","category":"section"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"The third step is to fetch and initialize all the necessary data for our glaciers of interest. This is strongly built on top of OGGM, mostly providing a Julia interface to automatize this. The package Gungnir is used to fetch the necessary data from the RGI and other sources. The data is then stored in servers and fetched and read using Rasters.jl directly by Sleipnir.jl when needed.","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"Then, we initialize those glaciers based on those RGI IDs and the parameters we previously specified.","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"glaciers = initialize_glaciers(rgi_ids, params)","category":"page"},{"location":"forward_simulation/#Step-4:-Creating-and-running-a-simulation","page":"Forward simulation","title":"Step 4: Creating and running a simulation","text":"","category":"section"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"The final step of the pipeline, is to create an ODINN simulation based on all the previous steps, and then to run it. There are different types of simulations that we can do with ODINN:","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"Prediction: This is a forward simulation, where the initial glacier conditions are run forward in                 in time based on specified parameters and climate data.","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"This is as simple as doing:","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"prediction = Prediction(model, glaciers, params)","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"And once we have the Prediction object, we can run it using Huginn.run!:","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"Huginn.run!(prediction)","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"There we go, we have successfully simulated the evolution of 3 glaciers for 5 years in around 1-2 seconds!","category":"page"},{"location":"forward_simulation/#Step-5:-Visualizing-the-results","page":"Forward simulation","title":"Step 5: Visualizing the results","text":"","category":"section"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"# Finally, we can use the plotting functions of `ODINN.jl` to visualize the results of the simulation. Like the glacier ice thickness evolution\nplot_glacier(prediction.results[1], \"evolution difference\", [:H]; metrics=[\"difference\"])","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"Or the initial glacier ice thickness and the resulting ice surface velocities","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"plot_glacier(prediction.results[1], \"heatmaps\", [:H, :V])","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"","category":"page"},{"location":"forward_simulation/","page":"Forward simulation","title":"Forward simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"functional_inversion/#Forward-simulation-tutorial","page":"Functional inversion","title":"Forward simulation tutorial","text":"","category":"section"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"# This tutorial provides a simple example on how to perform a functional inversion using Universal Differential Equations (UDEs) in ODINN.jl.\n# For this, we will generate a synthetic dataset using a forward simulation, and then we will use this dataset to perform the functional inversion.\n## The goal of this functional inversion will be to learn a synthetic law that maps `A`, i.e. the ice rigidity, to long-term changes in atmospheric surface temperature.\n\nusing ODINN\n\n# Define the working directory\nworking_dir = joinpath(homedir(), \"ODINN_simulations\")\n\n## We fetch the paths with the files for the available glaciers on disk\nrgi_paths = get_rgi_paths()\n\n# Ensure the working directory exists\nmkpath(working_dir)\n\n# Define which glacier RGI IDs we want to work with\nrgi_ids = [\"RGI60-11.03638\", \"RGI60-11.01450\", \"RGI60-11.02346\", \"RGI60-07.00065\", \"RGI60-08.00147\",\"RGI60-07.00042\"]\n# Filter out glaciers that are not used to avoid having references that depend on all the glaciers processed in Gungnir\nrgi_paths = Dict(k => rgi_paths[k] for k in rgi_ids)\n# Define the time step for the simulation output and for the adjoint calculation. In this case, a month.\nδt = 1/12\n\nparams = Parameters(simulation = SimulationParameters(working_dir=working_dir,\n                                                    use_MB=false,\n                                                    velocities=true,\n                                                    tspan=(2010.0, 2015.0),\n                                                    step=δt,\n                                                    multiprocessing=true,\n                                                    workers=7,\n                                                    test_mode=false,\n                                                    rgi_paths=rgi_paths),\n                    hyper = Hyperparameters(batch_size=length(rgi_ids), # We set batch size equals all datasize so we test gradient\n                                            epochs=[20,30],\n                                            optimizer=[ODINN.ADAM(0.005), ODINN.LBFGS()]),\n                    physical = PhysicalParameters(minA = 8e-21,\n                                                  maxA = 8e-17),\n                    UDE = UDEparameters(optim_autoAD=ODINN.NoAD(),\n                                        grad=ContinuousAdjoint(),\n                                        optimization_method=\"AD+AD\",\n                                        target = :A),\n                    solver = Huginn.SolverParameters(step=δt,\n                                                     save_everystep=true,\n                                                     progress=true)\n                    )\n\nmodel = Model(iceflow = SIA2Dmodel(params),\n                mass_balance = TImodel1(params; DDF=6.0/1000.0, acc_factor=1.2/1000.0),\n                machine_learning = NeuralNetwork(params))\n\n# We initialize the glaciers with all the necessary data\nglaciers = initialize_glaciers(rgi_ids, params)\n\n# Time snapshots for transient inversion\ntstops = collect(2010:δt:2015)\n\n# We define a synthetic law to generate the synthetic dataset. For this, we use some tabular data from Cuffey and Paterson (2010).\nA_poly = ODINN.A_law_PatersonCuffey()\nfakeA(T) = A_poly(T)\n\n# We generate the synthetic dataset using the forward simulation. This will generate a dataset with the ice thickness and surface velocities\n# for each glacier at each time step. The dataset will be used to train the machine learning model.\nODINN.generate_ground_truth(glaciers, :PatersonCuffey, params, model, tstops)\n\n## After this forward simulation, we restart the iceflow model to be ready for the inversions\nmodel.iceflow = SIA2Dmodel(params)\n\n# We specify the type of simulation we want to perform\nfunctional_inversion = FunctionalInversion(model, glaciers, params)\n\n# And finally, we just run the simulation\nrun!(functional_inversion)","category":"page"},{"location":"functional_inversion/####-Step-by-step-explanation-of-the-tutorial","page":"Functional inversion","title":"### Step-by-step explanation of the tutorial","text":"","category":"section"},{"location":"functional_inversion/#Here-we-will-cover-in-detail-each-one-of-the-steps-that-lead-us-to-run-the","page":"Functional inversion","title":"Here we will cover in detail each one of the steps that lead us to run the","text":"","category":"section"},{"location":"functional_inversion/#Prediction-from-the-previous-example-(i.e.-a-forward-run).-This-first-tutorial-keeps-things-simple,-and-since","page":"Functional inversion","title":"Prediction from the previous example (i.e. a forward run). This first tutorial keeps things simple, and since","text":"","category":"section"},{"location":"functional_inversion/#we-are-not-using-machine-learning-models,-we-will-only-use-the-Model-type-to-specify-the-iceflow-and-mass-balance-models.-These-functionalities","page":"Functional inversion","title":"we are not using machine learning models, we will only use the Model type to specify the iceflow and mass balance models. These functionalities","text":"","category":"section"},{"location":"functional_inversion/#are-mainly-covered-by-Huginn.jl.","page":"Functional inversion","title":"are mainly covered by Huginn.jl.","text":"","category":"section"},{"location":"functional_inversion/#####-Step-1:-Parameter-initialization","page":"Functional inversion","title":"#### Step 1: Parameter initialization","text":"","category":"section"},{"location":"functional_inversion/#The-first-step-is-to-initialize-and-specify-all-the-necessary-parameters.-In-ODINN.jl","page":"Functional inversion","title":"The first step is to initialize and specify all the necessary parameters. In ODINN.jl","text":"","category":"section"},{"location":"functional_inversion/#we-have-many-different-types-of-parameters,-specifying-different-aspects-of-the-model.","page":"Functional inversion","title":"we have many different types of parameters, specifying different aspects of the model.","text":"","category":"section"},{"location":"functional_inversion/#All-the-parameter-types-come-with-a-default-constructor,-which-will-provide-default","page":"Functional inversion","title":"All the parameter types come with a default constructor, which will provide default","text":"","category":"section"},{"location":"functional_inversion/#values-in-case-you-don't-want-to-tune-those.-The-main-types-of-parameters-are:","page":"Functional inversion","title":"values in case you don't want to tune those. The main types of parameters are:","text":"","category":"section"},{"location":"functional_inversion/#*Simulation-parameters*:-SimulationParameters-includes-all-the-parameters-related-to-the","page":"Functional inversion","title":"- Simulation parameters: SimulationParameters includes all the parameters related to the","text":"","category":"section"},{"location":"functional_inversion/#ODINN.jl-simulation,-including-the-number-of-workers,-the-timespan","page":"Functional inversion","title":"ODINN.jl simulation, including the number of workers, the timespan","text":"","category":"section"},{"location":"functional_inversion/#of-the-simulation-or-the-working-directory.","page":"Functional inversion","title":"of the simulation or the working directory.","text":"","category":"section"},{"location":"functional_inversion/#*PhysicalParameters*:-PhysicalParameters-includes-all-the-necessary-physical-parameters-for-the-model.","page":"Functional inversion","title":"- PhysicalParameters: PhysicalParameters includes all the necessary physical parameters for the model.","text":"","category":"section"},{"location":"functional_inversion/#*SolverParameters*:-SolverParameters-includes-all-the-necessary-parameters-for-the-solver.","page":"Functional inversion","title":"- SolverParameters: SolverParameters includes all the necessary parameters for the solver.","text":"","category":"section"},{"location":"functional_inversion/#*Hyperparameters*:-Hyperparameters-includes-all-the-necessary-hyperparameters-for-a-machine-learning-model.","page":"Functional inversion","title":"- Hyperparameters: Hyperparameters includes all the necessary hyperparameters for a machine learning model.","text":"","category":"section"},{"location":"functional_inversion/#*UDEparameters*:-UDEparameters-contains-the-parameters-related-to-the-training-of-a-Universal-Differential-Equation.","page":"Functional inversion","title":"- UDEparameters: UDEparameters contains the parameters related to the training of a Universal Differential Equation.","text":"","category":"section"},{"location":"functional_inversion/#All-these-sub-types-of-parameters-are-held-in-a-Parameters-struct,-a-general","page":"Functional inversion","title":"All these sub-types of parameters are held in a Parameters struct, a general","text":"","category":"section"},{"location":"functional_inversion/#parameters-structure-to-be-passed-to-an-ODINN-simulation.","page":"Functional inversion","title":"parameters structure to be passed to an ODINN simulation.","text":"","category":"section"},{"location":"functional_inversion/#First-we-need-to-specify-a-list-of-RGI-IDs-of-the-glacier-we-want-to-work-with.-Specifying-an-RGI","page":"Functional inversion","title":"First we need to specify a list of RGI IDs of the glacier we want to work with. Specifying an RGI","text":"","category":"section"},{"location":"functional_inversion/#region-is-also-possible.-From-these-RGI-IDs,-we-will-look-for-the-necessary-files-inside-the-workspace.","page":"Functional inversion","title":"region is also possible. From these RGI IDs, we will look for the necessary files inside the workspace.","text":"","category":"section"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"rgiids = [\"RGI60-11.03638\", \"RGI60-11.01450\", \"RGI60-11.02346\", \"RGI60-07.00065\", \"RGI60-08.00147\",\"RGI60-07.00042\"] rgipaths = getrgipaths()","category":"page"},{"location":"functional_inversion/#Filter-out-glaciers-that-are-not-used-to-avoid-having-references-that-depend-on-all-the-glaciers-processed-in-Gungnir","page":"Functional inversion","title":"Filter out glaciers that are not used to avoid having references that depend on all the glaciers processed in Gungnir","text":"","category":"section"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"rgipaths = Dict(k => rgipaths[k] for k in rgi_ids)","category":"page"},{"location":"functional_inversion/#Define-the-time-step-for-the-simulation-output-and-for-the-adjoint-calculation.-In-this-case,-a-month.","page":"Functional inversion","title":"Define the time step for the simulation output and for the adjoint calculation. In this case, a month.","text":"","category":"section"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"δt = 1/12","category":"page"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"params = Parameters(simulation = SimulationParameters(workingdir=workingdir,                                                     useMB=false,                                                     velocities=true,                                                     tspan=(2010.0, 2015.0),                                                     step=δt,                                                     multiprocessing=true,                                                     workers=7,                                                     testmode=false,                                                     rgipaths=rgipaths),                     hyper = Hyperparameters(batchsize=length(rgiids), # We set batch size equals all datasize so we test gradient                                             epochs=[50,50],                                             optimizer=[ODINN.ADAM(0.005), ODINN.LBFGS()]),                     physical = PhysicalParameters(minA = 8e-21,                                                   maxA = 8e-17),                     UDE = UDEparameters(optimautoAD=ODINN.NoAD(),                                         grad=ContinuousAdjoint(),                                         optimizationmethod=\"AD+AD\",                                         target = \"A\"),                     solver = Huginn.SolverParameters(step=δt,                                                      save_everystep=true,                                                      progress=true)                     )","category":"page"},{"location":"functional_inversion/#####-Step-2:-Model-specification","page":"Functional inversion","title":"#### Step 2: Model specification","text":"","category":"section"},{"location":"functional_inversion/#The-next-step-is-to-specify-which-model(s)-we-want-to-use-for-our-simulation.-In-ODINN","page":"Functional inversion","title":"The next step is to specify which model(s) we want to use for our simulation. In ODINN","text":"","category":"section"},{"location":"functional_inversion/#we-have-three-different-types-of-model,-which-are-encompassed-in-a-Model-structure:","page":"Functional inversion","title":"we have three different types of model, which are encompassed in a Model structure:","text":"","category":"section"},{"location":"functional_inversion/#*Iceflow-model*:-IceflowModel-is-the-ice-flow-dynamics-model-that-will-be-used-to-simulate","page":"Functional inversion","title":"- Iceflow model: IceflowModel is the ice flow dynamics model that will be used to simulate","text":"","category":"section"},{"location":"functional_inversion/#iceflow.-It-defaults-to-a-2D-Shallow-Ice-Approximation.","page":"Functional inversion","title":"iceflow. It defaults to a 2D Shallow Ice Approximation.","text":"","category":"section"},{"location":"functional_inversion/#*Surface-mass-balance-model*:-MassBalanceModel-is-the-mass-balance-model-that-will-be-used-for","page":"Functional inversion","title":"- Surface mass balance model: MassBalanceModel is the mass balance model that will be used for","text":"","category":"section"},{"location":"functional_inversion/#simulations.-Options-here-include-temperature-index-models,-or","page":"Functional inversion","title":"simulations. Options here include temperature-index models, or","text":"","category":"section"},{"location":"functional_inversion/#machine-learning-models-coming-from-MassBalanceMachine.","page":"Functional inversion","title":"machine learning models coming from MassBalanceMachine.","text":"","category":"section"},{"location":"functional_inversion/#*Machine-learning-model*:-MLmodel-is-the-machine-learning-model-(e.g.-a-neural-network)-which-will","page":"Functional inversion","title":"- Machine learning model: MLmodel is the machine learning model (e.g. a neural network) which will","text":"","category":"section"},{"location":"functional_inversion/#be-used-as-part-of-a-hybrid-model-based-on-a-Universal-Differential-Equation.","page":"Functional inversion","title":"be used as part of a hybrid model based on a Universal Differential Equation.","text":"","category":"section"},{"location":"functional_inversion/#Generally,-a-model-can-be-initialized-directly-using-the-Model-constructor:","page":"Functional inversion","title":"Generally, a model can be initialized directly using the Model constructor:","text":"","category":"section"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"model = Model(iceflow = SIA2Dmodel(params),                 massbalance = TImodel1(params; DDF=6.0/1000.0, accfactor=1.2/1000.0),                 machine_learning = NeuralNetwork(params))","category":"page"},{"location":"functional_inversion/#####-Step-3:-Glacier-initialization","page":"Functional inversion","title":"#### Step 3: Glacier initialization","text":"","category":"section"},{"location":"functional_inversion/#The-third-step-is-to-fetch-and-initialize-all-the-necessary-data-for-our-glaciers-of-interest.","page":"Functional inversion","title":"The third step is to fetch and initialize all the necessary data for our glaciers of interest.","text":"","category":"section"},{"location":"functional_inversion/#This-is-strongly-built-on-top-of-OGGM,-mostly-providing-a-Julia-interface-to-automatize-this.-The-package","page":"Functional inversion","title":"This is strongly built on top of OGGM, mostly providing a Julia interface to automatize this. The package","text":"","category":"section"},{"location":"functional_inversion/#Gungnir-is-used-to-fetch-the-necessary-data-from-the-RGI-and-other-sources.-The-data-is-then-stored-in-servers","page":"Functional inversion","title":"Gungnir is used to fetch the necessary data from the RGI and other sources. The data is then stored in servers","text":"","category":"section"},{"location":"functional_inversion/#and-fetched-and-read-using-Rasters.jl-directly-by-Sleipnir.jl-when-needed.","page":"Functional inversion","title":"and fetched and read using Rasters.jl directly by Sleipnir.jl when needed.","text":"","category":"section"},{"location":"functional_inversion/#Then,-we-initialize-those-glaciers-based-on-those-RGI-IDs-and-the-parameters-we-previously-specified.","page":"Functional inversion","title":"Then, we initialize those glaciers based on those RGI IDs and the parameters we previously specified.","text":"","category":"section"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"glaciers = initializeglaciers(rgiids, params)","category":"page"},{"location":"functional_inversion/#####-Step-4:-Running-a-forward-simulation-as-a-synthetic-ground-truth","page":"Functional inversion","title":"#### Step 4: Running a forward simulation as a synthetic ground truth","text":"","category":"section"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"# The next step is to generate a synthetic dataset using a forward simulation. This will generate a dataset with the ice thickness and surface velocities","category":"page"},{"location":"functional_inversion/#for-each-glacier-at-each-time-step.-The-dataset-will-be-used-to-train-the-machine-learning-model.","page":"Functional inversion","title":"for each glacier at each time step. The dataset will be used to train the machine learning model.","text":"","category":"section"},{"location":"functional_inversion/#We-define-the-time-snapshots-for-transient-inversion,-i.e.-the-time-steps-at-which-we-want-to-save-the-results,-which-will-be-used","page":"Functional inversion","title":"We define the time snapshots for transient inversion, i.e. the time steps at which we want to save the results, which will be used","text":"","category":"section"},{"location":"functional_inversion/#to-compute-the-adjoint-in-reverse-mode.","page":"Functional inversion","title":"to compute the adjoint in reverse mode.","text":"","category":"section"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"tstops = collect(2010:δt:2015)","category":"page"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"prediction = Prediction(model, glaciers, params)","category":"page"},{"location":"functional_inversion/#We-define-a-synthetic-law-to-generate-the-synthetic-dataset.-For-this,-we-use-the-data-from-a-table-in-Cuffey-and-Paterson-(2010).","page":"Functional inversion","title":"We define a synthetic law to generate the synthetic dataset. For this, we use the data from a table in Cuffey and Paterson (2010).","text":"","category":"section"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"Apoly = ODINN.AlawPatersonCuffey() fakeA(T) = Apoly(T)","category":"page"},{"location":"functional_inversion/#We-generate-the-synthetic-dataset-using-the-forward-simulation.-This-will-generate-a-dataset-with-the-ice-thickness-and-surface-velocities","page":"Functional inversion","title":"We generate the synthetic dataset using the forward simulation. This will generate a dataset with the ice thickness and surface velocities","text":"","category":"section"},{"location":"functional_inversion/#for-each-glacier-at-each-time-step.-The-dataset-will-be-used-to-train-the-machine-learning-model.-This-will-run-under-the-hood","page":"Functional inversion","title":"for each glacier at each time step. The dataset will be used to train the machine learning model. This will run under the hood","text":"","category":"section"},{"location":"functional_inversion/#a-Prediction-using-Huginn.jl.","page":"Functional inversion","title":"a Prediction using Huginn.jl.","text":"","category":"section"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"ODINN.generategroundtruth(glaciers, :PatersonCuffey, params, model, tstops)","category":"page"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"# After this forward simulation, we restart the iceflow model to be ready for the inversions model.iceflow = SIA2Dmodel(params)","category":"page"},{"location":"functional_inversion/#####-Step-5:-Train-a-Universal-Differential-Equation-via-a-functional-inversion","page":"Functional inversion","title":"#### Step 5: Train a Universal Differential Equation via a functional inversion","text":"","category":"section"},{"location":"functional_inversion/#The-next-step-is-to-specify-the-type-of-simulation-we-want-to-perform.-In-this-case,-we-will-use-a-FunctionalInversion-simulation,","page":"Functional inversion","title":"The next step is to specify the type of simulation we want to perform. In this case, we will use a FunctionalInversion simulation,","text":"","category":"section"},{"location":"functional_inversion/#which-will-use-the-synthetic-dataset-generated-in-the-previous-step-to-train-a-Universal-Differential-Equation-(UDE)-model.","page":"Functional inversion","title":"which will use the synthetic dataset generated in the previous step to train a Universal Differential Equation (UDE) model.","text":"","category":"section"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"functional_inversion = FunctionalInversion(model, glaciers, params)","category":"page"},{"location":"functional_inversion/#And-finally,-we-just-run-the-simulation.-This-will-run-the-adjoint-method-to-compute-the-gradients-and-then-use-the-ADAM-optimizer","page":"Functional inversion","title":"And finally, we just run the simulation. This will run the adjoint method to compute the gradients and then use the ADAM optimizer","text":"","category":"section"},{"location":"functional_inversion/#to-train-the-UDE-model.","page":"Functional inversion","title":"to train the UDE model.","text":"","category":"section"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"run!(functional_inversion)","category":"page"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"","category":"page"},{"location":"functional_inversion/","page":"Functional inversion","title":"Functional inversion","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#ODINN.jl-documentation","page":"Home","title":"ODINN.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the ODINN.jl documentation, a large-scale scientific machine learning (SciML) glacier model, leveraging differentiable programming in Julia. This documentation provides the necessary information to understand the ecosystem built around `ODINN.jl, its APIs, workflows and some examples of the main usage types of the model(s).","category":"page"},{"location":"#Vision","page":"Home","title":"Vision","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Rather than focusing on global-scale simulations and sea-level rise contributions, ODINN.jl has, for now, a regional and catchment-scale focus, aiming to exploit the latest remote sensing and in situ observations to capture missing or subgrid processes of glacier processes. In order to do so, ODINN.jl leverages Universal Differential Equations (UDEs), combining PDEs describing ice flow dynamics with data-driven regressors, such as neural networks. For this, ODINN.jl relies heavily on the SciML Julia ecosytem and the native automatic differentiation (AD) support. Therefore ODINN.jl has a two-fold goal:","category":"page"},{"location":"","page":"Home","title":"Home","text":"To advance the application of scientific machine learning and differentiable programming for large-scale geoscientific modelling.\nTo advance the inference of new parametrizations to characterize key missing or subgrid processes of glaciers to improve large-scale glacier simulations. ","category":"page"},{"location":"#Architecture","page":"Home","title":"Architecture","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ODINN.jl is a modular model, split into multiple packages, each one handling a specific task:","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img src=\"./assets/ODINN_architecture.png\" alt=\"ODINN ecosystem overview\" width=\"500\"/>","category":"page"},{"location":"","page":"Home","title":"Home","text":"ODINN.j is the high-level interace to the whole ODINN ecosystem, containing the SciML functionalities related to automatic differentiation and sensitivity of hybrid models, mixing differential equations and data-driver regressors. \nHuginn.jl is the ice flow dynamics module of ODINN. It contains all the information regarding glacier ice flow models, including the numerical methods to solve the PDEs using OrdinaryDiffEq.jl. \nMuninn.jl is the surface mass balance module of ODINN. It  contains all the information regarding glacier interactions with the atmosphere (i.e. surface mass balance processes). For now we support simple temperature-index models, but soon we are planning to incorporate machine learning models coming from the MassBalanceMachine. \nSleipnir.jl is the core package of ODINN, holding all the basic data structures and functions, common to the whole ecosystem. It directly reads the files provided by Gungnir. \nGungnir is a Python package, using OGGM to retrieve all the necessary files (i.e. rasters and climate data) for the initial conditions and simulations in all the ODINN ecosystem. The user has the possibility to either store those files locally, or to use the ones we provide in a server. This is work in progress, so we will progressively cover more and more glaciers and regions in the near future. ","category":"page"},{"location":"#Developers","page":"Home","title":"Developers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ODINN.jl is being developed by Jordi Bolibar (CNRS, IGE), Facundo Sapienza (Stanford University) and Alban Gossard (Université Grenoble Alpes, IGE).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Past developers include Lucille Gimenes (Université Grenoble Alpes, IGE) and Vivek Gajadhar (TU Delft).","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use ODINN.jl for research, teaching or other activities, please use the following citation from our latest paper:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{bolibar_sapienza_universal_2023,\n\ttitle = {Universal differential equations for glacier ice flow modelling},\n\tauthor = {Bolibar, J. and Sapienza, F. and Maussion, F. and Lguensat, R. and Wouters, B. and P\\'erez, F.},\n\tjournal = {Geoscientific Model Development},\n\tvolume = {16},\n\tyear = {2023},\n\tnumber = {22},\n\tpages = {6671--6687},\n\turl = {https://gmd.copernicus.org/articles/16/6671/2023/},\n\tdoi = {10.5194/gmd-16-6671-2023}\n}","category":"page"},{"location":"#Funding","page":"Home","title":"Funding","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The ODINN project has been funded by an IRGA fellowship from the Multidisciplinary Institute on Artificial Intelligence (Grenoble, France), the Nederlandse Organisatie voor Wetenschappelijk Onderzoek, Stichting voor de Technische Wetenschappen (Vidi grant 016.Vidi.171.063), the National Science Foundation (EarthCube programme under awards 1928406 and 1928374) and a TU Delft Climate Action grant. ","category":"page"},{"location":"funcs_types/#Types-and-functions","page":"Types and functions","title":"Types and functions","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"In this page, we will go through the main types (i.e. structs) used in ODINN.jl's architecture, and the main functions linked to those types.","category":"page"},{"location":"funcs_types/#Parameters","page":"Types and functions","title":"Parameters","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"There are different types of parameters, holding specific information for different modelling aspects. All the types of parameters are wrapped into a Parameter type, which is threaded throughout ODINN.jl. ","category":"page"},{"location":"funcs_types/#Sleipnir.Parameters","page":"Types and functions","title":"Sleipnir.Parameters","text":"    mutable struct Parameters{PPHY <: AbstractEmptyParams, PSIM <: AbstractEmptyParams, PHY <: AbstractEmptyParams,\n                    PSOL <: AbstractEmptyParams, PUDE <: AbstractEmptyParams, PINV <: AbstractEmptyParams}\n\nA mutable struct that holds various parameter sets for different aspects of a simulation or model.\n\nFields\n\nphysical::PPHY: Physical parameters.\nsimulation::PSIM: Simulation parameters.\nhyper::PHY: Hyperparameters.\nsolver::PSOL: Solver parameters.\nUDE::PUDE: Universal Differential Equation (UDE) parameters.\ninversion::PINV: Inversion parameters.\n\nType Parameters\n\nPPHY: Type of the physical parameters, must be a subtype of AbstractEmptyParams.\nPSIM: Type of the simulation parameters, must be a subtype of AbstractEmptyParams.\nPHY: Type of the hyperparameters, must be a subtype of AbstractEmptyParams.\nPSOL: Type of the solver parameters, must be a subtype of AbstractEmptyParams.\nPUDE: Type of the UDE parameters, must be a subtype of AbstractEmptyParams.\nPINV: Type of the inversion parameters, must be a subtype of AbstractEmptyParams.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#ODINN.Parameters","page":"Types and functions","title":"ODINN.Parameters","text":"Constructor for the Parameters type. Since some of the subtypes of parameters are defined in different packages of the ODINN ecosystem, this constructor will call the constructors of the different subtypes and return a Parameters object with the corresponding subtypes.  The Parameters mutable struct is defined in Sleipnir.jl using abstract types, which are later on defined in the different packages of the ODINN ecosystem.\n\nParameters(;\n        physical::PhysicalParameters = PhysicalParameters(),\n        simulation::SimulationParameters = SimulationParameters(),\n        solver::SolverParameters = SolverParameters(),\n        hyper::Hyperparameters = Hyperparameters(),\n        UDE::UDEparameters = UDEparameters()\n        inversion::InversionParameters = InversionParameters()\n        )\n\nKeyword arguments\n\nphysical::PhysicalParameters: Physical parameters for the simulation.\nsimulation::SimulationParameters: Parameters related to the simulation setup.\nsolver::SolverParameters: Parameters for the solver configuration.\nhyper::Hyperparameters: Hyperparameters for the model.\nUDE::UDEparameters: Parameters specific to the UDE (Universal Differential Equation).\ninversion::InversionParameters: Parameters for inversion processes.\n\n\n\n\n\n","category":"function"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"The main types of parameters are the following ones:","category":"page"},{"location":"funcs_types/#Simulation-parameters","page":"Types and functions","title":"Simulation parameters","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Simulation parameters are used to specify anything related to ODINN simulations, ranging from types, working directories to multiprocessing.","category":"page"},{"location":"funcs_types/#Sleipnir.SimulationParameters","page":"Types and functions","title":"Sleipnir.SimulationParameters","text":"A structure to hold simulation parameters for a simulation in ODINN.\n\nstruct SimulationParameters{I <: Integer, F <: AbstractFloat, VM <: VelocityMapping} <: AbstractParameters\n\nFields\n\nuse_MB::Bool: Flag to indicate whether mass balance should be used.\nuse_iceflow::Bool: Flag to indicate whether ice flow should be used.\nplots::Bool: Flag to indicate whether plots should be generated.\nvelocities::Bool: Flag to indicate whether velocities should be calculated.\noverwrite_climate::Bool: Flag to indicate whether to overwrite climate data.\nuse_glathida_data::Bool: Flag to indicate whether to use GLATHIDA data.\ntspan::Tuple{F, F}: Time span for the simulation.\nstep::F: Time step for the simulation.\nmultiprocessing::Bool: Flag to indicate whether multiprocessing should be used.\nworkers::I: Number of workers for multiprocessing.\nworking_dir::String: Directory for working files.\ntest_mode::Bool: Flag to indicate whether to run in test mode.\nrgi_paths::Dict{String, String}: Dictionary of RGI paths.\nice_thickness_source::String: Source of ice thickness data.\nmapping::VM: Mapping to use in order to grid the data from the coordinates of   the velocity product datacube to the glacier grid.\ngridScalingFactor::I: Grid downscaling factor, used to speed-up the tests.   Default value is 1 which means no downscaling is applied.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#Sleipnir.SimulationParameters-Tuple{}","page":"Types and functions","title":"Sleipnir.SimulationParameters","text":"Constructor for SimulationParameters type, including default values.\n\nSimulationParameters(;\n    use_MB::Bool = true,\n    use_iceflow::Bool = true,\n    plots::Bool = true,\n    velocities::Bool = true,\n    overwrite_climate::Bool = false,\n    use_glathida_data::Bool = false,\n    tspan::Tuple{F, F} = (2010.0,2015.0),\n    step::F = 1/12,\n    multiprocessing::Bool = true,\n    workers::I = 4,\n    working_dir::String = \"\",\n    test_mode::Bool = false,\n    rgi_paths::Dict{String, String} = Dict{String, String}(),\n    ice_thickness_source::String = \"Farinotti19\",\n    mapping::VM = MeanDateVelocityMapping(),\n    gridScalingFactor::I = 1,\n) where {I <: Integer, F <: AbstractFloat, VM <: VelocityMapping}\n\nKeyword arguments\n\nuse_MB::Bool: Whether to use mass balance (default: true).\nuse_iceflow::Bool: Whether to use ice flow (default: true).\nplots::Bool: Whether to generate plots (default: true).\nvelocities::Bool: Whether to calculate velocities (default: true).\noverwrite_climate::Bool: Whether to overwrite climate data (default: false).\nuse_glathida_data::Bool: Whether to use GLATHIDA data (default: false).\nfloat_type::DataType: Data type for floating point numbers (default: Float64).\nint_type::DataType: Data type for integers (default: Int64).\ntspan::Tuple{F, F}: Time span for the simulation (default: (2010.0, 2015.0)).\nstep::F: Time step for the simulation (default: 1/12).\nmultiprocessing::Bool: Whether to use multiprocessing (default: true).\nworkers::I: Number of workers for multiprocessing (default: 4).\nworking_dir::String: Working directory for the simulation (default: \"\").\ntest_mode::Bool: Whether to run in test mode (default: false).\nrgi_paths::Dict{String, String}: Dictionary of RGI paths (default: Dict{String, String}()).\nice_thickness_source::String: Source of ice thickness data, either \"Millan22\" or \"Farinotti19\" (default: \"Farinotti19\").\nmapping::VM: Mapping to use in order to grid the data from the coordinates of   the velocity product datacube to the glacier grid.\ngridScalingFactor::I: Grid downscaling factor, used to speed-up the tests.   Default value is 1 which means no downscaling is applied.\n\nReturns\n\nsimulation_parameters: A new SimulationParameters object.\n\nThrows\n\nAssertionError: If ice_thickness_source is not \"Millan22\" or \"Farinotti19\".\n\nNotes\n\nIf the global variable ODINNOVERWRITEMULTI is set to true, multiprocessing is   disabled in any case. This is to fix the documentation generation as for the   moment Literate.jl freezes when multiprocessing is enabled.\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/#Physical-parameters","page":"Types and functions","title":"Physical parameters","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Physical parameters are used to store physical constants used in the physical and machine learning models. ","category":"page"},{"location":"funcs_types/#Sleipnir.PhysicalParameters","page":"Types and functions","title":"Sleipnir.PhysicalParameters","text":"A structure representing physical parameters used in simulations.\n\nPhysicalParameters{F <: AbstractFloat}\n\nFields\n\nρ::F: Density of ice.\ng::F: Gravitational acceleration.\nϵ::F: A small parameter, often used for perturbations.\nη₀::F: Initial viscosity.\nmaxA::F: Maximum A.\nminA::F: Minimum A.\nmaxTlaw::F: Maximum temperature according to some law.\nminTlaw::F: Minimum temperature according to some law.\nnoise_A_magnitude::F: Magnitude of noise in A.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#Sleipnir.PhysicalParameters-Tuple{}","page":"Types and functions","title":"Sleipnir.PhysicalParameters","text":"Initialize the physical parameters of a model.\n\nPhysicalParameters(;\n    ρ::Float64 = 900.0,\n    g::Float64 = 9.81,\n    ϵ::Float64 = 1e-3,\n    η₀::F = 1.0, \n    maxA::Float64 = 8e-17,\n    minA::Float64 = 8.5e-20,\n    maxTlaw::Float64 = 1.0,\n    minTlaw::Float64 = -25.0,\n    noise_A_magnitude::Float64 = 5e-18\n    )\n\nKeyword arguments\n\n- `ρ`: Ice density\n- `g`: Gravitational constant\n- `ϵ`: Small number\n- `η₀`:  \n- `maxA`: Maximum value for `A` (Glen's coefficient)\n- `minA`: Minimum value for `A` (Glen's coefficient)\n- `maxTlaw`: Maximum value of Temperature used in simulations on fake law\n- `minTlaw`: Minimum value of Temperature used in simulations on fake law\n- `noise_A_magnitude`: Magnitude of noise added to A\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/#Solver-parameters","page":"Types and functions","title":"Solver parameters","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Solver parameters determine all aspects related to the numerical scheme used to solve the differential equations of glacier ice flow.","category":"page"},{"location":"funcs_types/#Huginn.SolverParameters","page":"Types and functions","title":"Huginn.SolverParameters","text":"A mutable struct that holds parameters for the solver.\n\nSolverParameters{F <: AbstractFloat, I <: Integer}\n\nFields\n\nsolver::OrdinaryDiffEq.OrdinaryDiffEqAdaptiveAlgorithm: The algorithm used for solving differential equations.\nreltol::F: The relative tolerance for the solver.\nstep::F: The step size for the solver.\ntstops::Union{Nothing, Vector{F}}: Optional vector of time points where the solver should stop for the callbacks.\nsave_everystep::Bool: Flag indicating whether to save the solution at every step.\nprogress::Bool: Flag indicating whether to show progress during the solving process.\nprogress_steps::I: The number of steps between progress updates.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#Huginn.SolverParameters-Tuple{}","page":"Types and functions","title":"Huginn.SolverParameters","text":"Constructs a SolverParameters object with the specified parameters or using default values.\n\nSolverParameters(; solver::OrdinaryDiffEq.OrdinaryDiffEqAdaptiveAlgorithm = RDPK3Sp35(),\n                  reltol::F = 1e-12,\n                  step::F = 1.0/12.0,\n                  tstops::Union{Nothing,Vector{F}} = nothing,\n                  save_everystep = false,\n                  progress::Bool = true,\n                  progress_steps::I = 10) where {F <: AbstractFloat, I <: Integer}\n\nArguments\n\nsolver::OrdinaryDiffEq.OrdinaryDiffEqAdaptiveAlgorithm: The ODE solver algorithm to use. Defaults to RDPK3Sp35().\nreltol::F: The relative tolerance for the solver. Defaults to 1e-12.\nstep::F: The step size for the callbacks. These are mainly used to run the surface mass balance model. Defaults to 1.0/12.0 (i.e. a month).\ntstops::Union{Nothing, Vector{F}}: Optional vector of time points where the solver should stop. Defaults to nothing.\nsave_everystep::Bool: Whether to save the solution at every step. Defaults to false.\nprogress::Bool: Whether to show progress during the solving process. Defaults to true.\nprogress_steps::I: The number of steps between progress updates. Defaults to 10.\n\nReturns\n\nsolver_parameters: A SolverParameters object constructed with the specified parameters.\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/#Hyperparameters","page":"Types and functions","title":"Hyperparameters","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Hyperparameters determine different aspects of a given machine learning model. For now, these are focused on neural networks, but we plan to extend them in the future for other types of regressors. ","category":"page"},{"location":"funcs_types/#ODINN.Hyperparameters","page":"Types and functions","title":"ODINN.Hyperparameters","text":"mutable struct Hyperparameters{F <: AbstractFloat, I <: Int} <: AbstractParameters\n\nA mutable struct that holds hyperparameters for training a machine learning model.\n\nKeyword arguments\n\ncurrent_epoch::I: The current epoch number.\ncurrent_minibatch::I: The current minibatch number.\nloss_history::Vector{F}: A vector storing the history of loss values.\noptimizer::Union{Optim.FirstOrderOptimizer, Flux.Optimise.AbstractOptimiser, Optimisers.AbstractRule}: The optimizer used for training.\nloss_epoch::F: The loss value for the current epoch.\nepochs::I: The total number of epochs for training.\nbatch_size::I: The size of each minibatch.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#ODINN.Hyperparameters-Tuple{}","page":"Types and functions","title":"ODINN.Hyperparameters","text":"Hyperparameters(; current_epoch::Int64 = 1, current_minibatch::Int64 = 1, loss_history::Vector{Float64} = Vector{Float64}(), optimizer::Union{Optim.FirstOrderOptimizer, Flux.Optimise.AbstractOptimiser, Optimisers.AbstractRule} = BFGS(initial_stepnorm=0.001), loss_epoch::Float64 = 0.0, epochs::Int64 = 50, batch_size::Int64 = 15)\n\nConstructs a Hyperparameters object with the specified parameters.\n\nArguments\n\ncurrent_epoch::Int64: The current epoch number. Defaults to 1.\ncurrent_minibatch::Int64: The current minibatch number. Defaults to 1.\nloss_history::Vector{Float64}: A vector to store the history of loss values. Defaults to an empty vector.\noptimizer::Union{Optim.FirstOrderOptimizer, Flux.Optimise.AbstractOptimiser, Optimisers.AbstractRule}: The optimizer to be used. Defaults to BFGS(initial_stepnorm=0.001).\nloss_epoch::Float64: The loss value for the current epoch. Defaults to 0.0.\nepochs::Int64: The total number of epochs. Defaults to 50.\nbatch_size::Int64: The size of each minibatch. Defaults to 15.\n\nReturns\n\nA Hyperparameters object initialized with the provided values.\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/#UDE-parameters","page":"Types and functions","title":"UDE parameters","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Universal Differential Equation (UDE) parameters are used to determine different modelling choices regarding the use of UDEs, such as wich sensitivity algorithm to use, which target (e.g. SIA parameter to target), or which optimization method to use.","category":"page"},{"location":"funcs_types/#ODINN.UDEparameters","page":"Types and functions","title":"ODINN.UDEparameters","text":"A mutable struct that holds parameters for a UDE (Universal Differential Equation).\n\nUDEparameters{ADJ <: AbstractAdjointMethod} <: AbstractParameters\n\nFields\n\nsensealg::SciMLBase.AbstractAdjointSensitivityAlgorithm: The sensitivity algorithm used for adjoint sensitivity analysis.\noptimization_method::String: The optimization method to be used.\nloss_type::String: The type of loss function to be used.\nscale_loss::Bool: A boolean indicating whether to scale the loss.\ntarget::Symbol: The target variable for the optimization.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#ODINN.UDEparameters-Tuple{}","page":"Types and functions","title":"ODINN.UDEparameters","text":"UDEparameters(; sensealg, optim_autoAD, grad, optimization_method, loss_type, empirical_loss_function, scale_loss, target) where {ADJ <: AbstractAdjointMethod}\n\nCreate a UDEparameters object for configuring the sensitivity analysis and optimization of a Universal Differential Equation (UDE).\n\nKeyword Arguments\n\nsensealg::SciMLBase.AbstractAdjointSensitivityAlgorithm: The sensitivity algorithm to use for adjoint calculations. Defaults to GaussAdjoint(autojacvec=SciMLSensitivity.EnzymeVJP()).\noptim_autoAD::AbstractADType: The automatic differentiation type for optimization. Defaults to Optimization.AutoEnzyme().\ngrad::ADJ: The adjoint gradient computation method. Defaults to SciMLSensitivityAdjoint().\noptimization_method::String: The optimization method to use. Must be either \"AD+AD\" or \"AD+Diff\". Defaults to \"AD+AD\".\nloss_type::String: The type of loss function to use. Must be either \"V\" (velocity) or \"H\" (thickness). Defaults to \"V\".\nempirical_loss_function::AbstractLoss: The loss function to use for optimization. Defaults to L2Sum().\nscale_loss::Bool: Whether to scale the loss function. Defaults to true.\ntarget::Union{Symbol, Nothing}: The target variable for optimization. Defaults to :A.\n\nReturns\n\nA UDEparameters object configured with the specified sensitivity, optimization, and loss settings.\n\nDescription\n\nThis function creates a UDEparameters object that encapsulates the configuration for sensitivity analysis, optimization, and loss computation in a Universal Differential Equation (UDE) framework. It verifies that the provided optimization_method and loss_type are valid and constructs the solver parameters accordingly.\n\nNotes\n\nThe optimization_method must be either \"AD+AD\" (automatic differentiation for both forward and backward passes) or \"AD+Diff\" (automatic differentiation combined with finite differences).\nThe loss_type must be either \"V\" (velocity-based loss) or \"H\" (thickness-based loss).\nThe empirical_loss_function determines how the loss is computed during optimization.\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/#Glaciers","page":"Types and functions","title":"Glaciers","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Glaciers in ODINN.jl are represented by a Glacier type. Each glacier has its related Climate type. Since ODINN.jl supports different types of simulations, we offer the possibility to work on 1D (i.e. flowline), 2D (e.g. SIA) or even 3D (not yet implemented, e.g. Full Stokes).","category":"page"},{"location":"funcs_types/#Sleipnir.Glacier2D","page":"Types and functions","title":"Sleipnir.Glacier2D","text":"A mutable struct representing a 2D glacier. Notice that all fields can be empty by providing nothing as the default value.\n\n/!\\ WARNING /!\\ Glacier objects should not be constructed manually, but rather through the initialize_glaciers function.\n\nGlacier2D{F <: AbstractFloat, I <: Integer}\n\nFields\n\nrgi_id::String: The RGI (Randolph Glacier Inventory) identifier for the glacier.\nname::String: The name of the glacier if available.\nclimate::Union{Climate2D, Nothing}: The climate data associated with the glacier.\nH₀::Union{Matrix{F}, Nothing}: Initial ice thickness matrix.\nH_glathida::Matrix{F}: Ice thickness matrix from the GLATHIDA dataset.\nS::Matrix{F}: Surface elevation matrix.\nB::Matrix{F}: Bedrock elevation matrix.\nV::Union{Matrix{F}, Nothing}: Ice velocity magnitude matrix.\nVx::Union{Matrix{F}, Nothing}: Ice velocity in the x-direction matrix.\nVy::Union{Matrix{F}, Nothing}: Ice velocity in the y-direction matrix.\nA::Union{F, Nothing}: Flow law parameter.\nC::Union{F, Nothing}: Sliding law parameter.\nn::Union{F, Nothing}: Flow law exponent.\nslope::Union{Matrix{F}, Nothing}: Surface slope matrix.\ndist_border::Union{Matrix{F}, Nothing}: Distance to the glacier border matrix.\nCoords::Union{Dict{String, Vector{Float64}}, Nothing}: Coordinates dictionary with keys as coordinate names and values as vectors of coordinates.\nΔx::F: Grid spacing in the x-direction.\nΔy::F: Grid spacing in the y-direction.\nnx::I: Number of grid points in the x-direction.\nny::I: Number of grid points in the y-direction.\ncenlon::Union{F, Nothing}: Longitude of the glacier center.\ncenlat::Union{F, Nothing}: Latitude of the glacier center.\nparams_projection::Dict{String, Float64}: Projection parameters that allows mapping the regional grid to global WGS84 coordinates.\nthicknessData::Union{ThicknessData, Nothing}: Thickness data structure that is used to store the reference values.\nvelocityData::Union{SurfaceVelocityData, Nothing}: Surface velocity data structure that is used to store the reference values.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#Sleipnir.Glacier2D-Tuple{}","page":"Types and functions","title":"Sleipnir.Glacier2D","text":"Constructs a Glacier2D object with the given parameters, including default ones.\n\nGlacier2D(;\n    rgi_id::Union{String, Nothing} = nothing,\n    name::String = \"\",\n    climate::Union{Climate2D, Nothing} = nothing,\n    H₀::Union{Matrix{F}, Nothing} = nothing,\n    H_glathida::Union{Matrix{F}, Nothing} = nothing,\n    S::Union{Matrix{F}, Nothing} = nothing,\n    B::Union{Matrix{F}, Nothing} = nothing,\n    V::Union{Matrix{F}, Nothing} = nothing,\n    Vx::Union{Matrix{F}, Nothing} = nothing,\n    Vy::Union{Matrix{F}, Nothing} = nothing,\n    A::Union{F, Nothing} = nothing,\n    C::Union{F, Nothing} = nothing,\n    n::Union{F, Nothing} = nothing,\n    slope::Union{Matrix{F}, Nothing} = nothing,\n    dist_border::Union{Matrix{F}, Nothing} = nothing,\n    Coords::Union{Dict{String, Vector{Float64}}, Nothing} = nothing,\n    Δx::Union{F, Nothing} = nothing,\n    Δy::Union{F, Nothing} = nothing,\n    nx::Union{I, Nothing} = nothing,\n    ny::Union{I, Nothing} = nothing,\n    cenlon::Union{F, Nothing} = nothing,\n    cenlat::Union{F, Nothing} = nothing,\n    params_projection::Dict{String, Float64} = Dict{String, Float64}(),\n    thicknessData::Union{ThicknessData, Nothing} = nothing,\n    velocityData::Union{SurfaceVelocityData, Nothing} = nothing,\n) where {F <: AbstractFloat, I <: Integer}\n\nArguments\n\nrgi_id::String: The RGI identifier for the glacier.\nname::String: The name of the glacier if available.\nclimate::Union{Climate2D, Nothing}: The climate data associated with the glacier.\nH₀::Union{Matrix{F}, Nothing}: Initial ice thickness matrix.\nH_glathida::Matrix{F}: Ice thickness matrix from GLATHIDA.\nS::Matrix{F}: Surface elevation matrix.\nB::Matrix{F}: Bed elevation matrix.\nV::Union{Matrix{F}, Nothing}: Ice velocity magnitude matrix.\nVx::Union{Matrix{F}, Nothing}: Ice velocity in the x-direction matrix.\nVy::Union{Matrix{F}, Nothing}: Ice velocity in the y-direction matrix.\nA::Union{F, Nothing}: Flow law parameter.\nC::Union{F, Nothing}: Sliding law parameter.\nn::Union{F, Nothing}: Flow law exponent.\nslope::Union{Matrix{F}, Nothing}: Slope matrix.\ndist_border::Union{Matrix{F}, Nothing}: Distance to border matrix.\nCoords::Union{Dict{String, Vector{Float64}}, Nothing}: Coordinates dictionary with keys \"lon\" and \"lat\".\nΔx::F: Grid spacing in the x-direction.\nΔy::F: Grid spacing in the y-direction.\nnx::I: Number of grid points in the x-direction.\nny::I: Number of grid points in the y-direction.\ncenlon::Union{F, Nothing}: Central longitude of the glacier.\ncenlat::Union{F, Nothing}: Central latitude of the glacier.\nparams_projection::Dict{String, Float64}: Projection parameters that allows mapping the regional grid to global WGS84 coordinates.\nthicknessData::Union{ThicknessData, Nothing}: Thickness data structure that is used to store the reference values.\nvelocityData::Union{SurfaceVelocityData, Nothing}: Surface velocity data structure that is used to store the reference values.\n\nReturns\n\nA Glacier2D object with the specified parameters.\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Every glacier has its associated climate, following the same spatial representation (e.g. 2D):","category":"page"},{"location":"funcs_types/#Sleipnir.Climate2D","page":"Types and functions","title":"Sleipnir.Climate2D","text":"A mutable struct representing a 2D climate for a glacier with various buffers and datasets.\n\nClimate2D{F <: AbstractFloat}\n\nKeyword arguments\n\nraw_climate::RasterStack: Raw climate dataset for the whole simulation.\nclimate_raw_step::RasterStack: Raw climate trimmed for the current step to avoid memory allocations.\nclimate_step::Dict: Climate data for the current step.\nclimate_2D_step::Climate2Dstep: 2D climate data for the current step to feed to the mass balance (MB) model.\nlongterm_temps::Vector{F}: Long-term temperatures for the ice rheology.\navg_temps::F: Intermediate buffer for computing average temperatures.\navg_gradients::F: Intermediate buffer for computing average gradients.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"In order to create Glacier types with information of a given glacier for a simulation, one can initialize a list of glaciers based on RGI (Randolph Glacier Inventory) IDs. Before running this, make sure to have used Gungnir to download all the necessary data for those glaciers, or double check that these glaciers are already available on the ODINN server. ","category":"page"},{"location":"funcs_types/#Sleipnir.initialize_glaciers","page":"Types and functions","title":"Sleipnir.initialize_glaciers","text":"initialize_glaciers(\n    rgi_ids::Vector{String},\n    params::Parameters;\n    velocityDatacubes::Union{Dict{String, String}, Dict{String, RasterStack}}=Dict(),\n)\n\nInitialize glaciers based on provided RGI IDs and parameters.\n\nArguments\n\nrgi_ids::Vector{String}: A vector of RGI IDs representing the glaciers to be initialized.\nparams::Parameters: A Parameters object containing simulation parameters.\ntest::Bool: An optional boolean flag indicating whether to run in test mode. Default is false.\nvelocityDatacubes::Union{Dict{String, String}, Dict{String, RasterStack}}: A dictionary that provides for each RGI ID either the path to the datacube or the RasterStack with velocity data.\n\nReturns\n\nglaciers::Vector{Glacier2D}: A vector of initialized Glacier2D objects.\n\nDescription\n\nThis function performs the following steps:\n\nGenerates a file for missing glaciers if it does not already exist.\nFilters out missing glaciers from the provided RGI IDs.\nGenerates raw climate data for the glaciers if necessary.\nInitializes the glaciers using the provided RGI IDs and parameters.\nIf use_glathida_data is enabled in the simulation parameters, assigns GlaThiDa data to the glaciers.\n\nErrors\n\nThrows an error if none of the provided RGI IDs have GlaThiDa data.\n\nWarnings\n\nIssues a warning if not all glaciers have GlaThiDa data available.\n\nExample\n\n# We declare a list of glaciers to be initialized with their RGI IDs\nrgi_ids = [\"RGI60-11.03638\", \"RGI60-11.01450\", \"RGI60-11.02346\", \"RGI60-08.00203\"]\n# We initialize those glaciers based on the RGI IDs and the parameters we previously specified\nglaciers = initialize_glaciers(rgi_ids, params)\n\n\n\n\n\n","category":"function"},{"location":"funcs_types/#Models","page":"Types and functions","title":"Models","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"There are 3 main types of models in ODINN.jl, iceflow models, mass balance models and machine learning models. These three families are determined by abstract types, with specific types being declared as subtypes of these abstract types to ensure compatibility through the ODINN ecosystem. ","category":"page"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"The three main types of models are gathered in a type Model in the following way:","category":"page"},{"location":"funcs_types/#ODINN.Model","page":"Types and functions","title":"ODINN.Model","text":"Model(; iceflow::Union{IFM, Vector{IFM}, Nothing}, mass_balance::Union{MBM, Vector{MBM}, Nothing}, machine_learning::Union{MLM, Nothing}) where {IFM <: IceflowModel, MBM <: MBmodel, MLM <: MLmodel}\n\nCreates a new model instance using the provided iceflow, mass balance, and machine learning components.\n\nArguments\n\niceflow::Union{IFM, Vector{IFM}, Nothing}: The iceflow model(s) to be used. Can be a single model, a vector of models, or nothing.\nmass_balance::Union{MBM, Vector{MBM}, Nothing}: The mass balance model(s) to be used. Can be a single model, a vector of models, or nothing.\nmachine_learning::Union{MLM, Nothing}: The machine learning model to be used. Can be a single model or nothing.\n\nReturns\n\nmodel: A new instance of Sleipnir.Model initialized with the provided components.\n\n\n\n\n\n","category":"function"},{"location":"funcs_types/#ODINN.Model-Tuple{}","page":"Types and functions","title":"ODINN.Model","text":"Model(; iceflow::Union{IFM, Vector{IFM}, Nothing}, mass_balance::Union{MBM, Vector{MBM}, Nothing}, machine_learning::Union{MLM, Nothing}) where {IFM <: IceflowModel, MBM <: MBmodel, MLM <: MLmodel}\n\nCreates a new model instance using the provided iceflow, mass balance, and machine learning components.\n\nArguments\n\niceflow::Union{IFM, Vector{IFM}, Nothing}: The iceflow model(s) to be used. Can be a single model, a vector of models, or nothing.\nmass_balance::Union{MBM, Vector{MBM}, Nothing}: The mass balance model(s) to be used. Can be a single model, a vector of models, or nothing.\nmachine_learning::Union{MLM, Nothing}: The machine learning model to be used. Can be a single model or nothing.\n\nReturns\n\nmodel: A new instance of Sleipnir.Model initialized with the provided components.\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/#Ice-flow-models","page":"Types and functions","title":"Ice flow models","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Ice flow models are used to solve the PDEs describing the gravitational flow of glaciers. All ice flow models must be a subtype of abstract type IceflowModel. Ice flow models are managed by Huginn.jl. ","category":"page"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"The main type of ice flow model used in ODINN.jl right now is a 2D Shallow Ice Approximation (SIA) model (Hutter, 1983). This is declared in the following way:","category":"page"},{"location":"funcs_types/#Huginn.SIA2Dmodel","page":"Types and functions","title":"Huginn.SIA2Dmodel","text":"mutable struct SIA2Dmodel{R <: Real, I <: Integer} <: SIAmodel\n\nA mutable struct representing a 2D Shallow Ice Approximation (SIA) model.\n\nFields\n\nA::Union{Ref{R}, Nothing}: Flow rate factor.\nn::Union{Ref{R}, Nothing}: Flow law exponent.\nC::Union{Ref{R}, Matrix{R}, Nothing}: Sliding coefficient.\nH₀::Matrix{R}: Initial ice thickness.\nH::Union{Matrix{R}, Nothing}: Ice thickness.\nH̄::Union{Matrix{R}, Nothing}: Averaged ice thickness.\nS::Matrix{R}: Surface elevation.\ndSdx::Union{Matrix{R}, Nothing}: Surface slope in the x-direction.\ndSdy::Union{Matrix{R}, Nothing}: Surface slope in the y-direction.\nD::Union{Matrix{R}, Nothing}: Diffusivity.\nD_is_provided::Union{Bool, Nothing}: Specifies if D is provided by user or computed.\nDx::Union{Matrix{R}, Nothing}: Diffusivity in the x-direction.\nDy::Union{Matrix{R}, Nothing}: Diffusivity in the y-direction.\ndSdx_edges::Union{Matrix{R}, Nothing}: Surface slope at edges in the x-direction.\ndSdy_edges::Union{Matrix{R}, Nothing}: Surface slope at edges in the y-direction.\n∇S::Union{Matrix{R}, Nothing}: Gradient of the surface elevation.\n∇Sy::Union{Matrix{R}, Nothing}: Gradient of the surface elevation in the y-direction.\n∇Sx::Union{Matrix{R}, Nothing}: Gradient of the surface elevation in the x-direction.\nFx::Union{Matrix{R}, Nothing}: Flux in the x-direction.\nFy::Union{Matrix{R}, Nothing}: Flux in the y-direction.\nFxx::Union{Matrix{R}, Nothing}: Second derivative of flux in the x-direction.\nFyy::Union{Matrix{R}, Nothing}: Second derivative of flux in the y-direction.\nV::Union{Matrix{R}, Nothing}: Velocity.\nVx::Union{Matrix{R}, Nothing}: Velocity in the x-direction.\nVy::Union{Matrix{R}, Nothing}: Velocity in the y-direction.\nΓ::Union{Ref{R}, Nothing}: Basal shear stress.\nMB::Union{Matrix{R}, Nothing}: Mass balance.\nMB_mask::Union{AbstractArray{Bool}, Nothing}: Mask for mass balance.\nMB_total::Union{Matrix{R}, Nothing}: Total mass balance.\nglacier_idx::Union{Ref{I}, Nothing}: Index of the glacier.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#Huginn.SIA2Dmodel-Tuple{Sleipnir.Parameters}","page":"Types and functions","title":"Huginn.SIA2Dmodel","text":"SIA2Dmodel(\n    params::Sleipnir.Parameters;\n    A::Union{R, Nothing} = nothing,\n    n::Union{R, Nothing} = nothing,\n    C::Union{R, Matrix{R}, Nothing} = nothing,\n    H₀::Matrix{R} = Matrix{Sleipnir.Float}([;;]),\n    H::Union{Matrix{R}, Nothing} = nothing,\n    H̄::Union{Matrix{R}, Nothing} = nothing,\n    S::Matrix{R} = Matrix{Sleipnir.Float}([;;]),\n    dSdx::Union{Matrix{R}, Nothing} = nothing,\n    dSdy::Union{Matrix{R}, Nothing} = nothing,\n    D::Union{Matrix{R}, Nothing} = nothing,\n    D_is_provided::Union{Bool, Nothing} = nothing,\n    Dx::Union{Matrix{R}, Nothing} = nothing,\n    Dy::Union{Matrix{R}, Nothing} = nothing,\n    dSdx_edges::Union{Matrix{R}, Nothing} = nothing,\n    dSdy_edges::Union{Matrix{R}, Nothing} = nothing,\n    ∇S::Union{Matrix{R}, Nothing} = nothing,\n    ∇Sy::Union{Matrix{R}, Nothing} = nothing,\n    ∇Sx::Union{Matrix{R}, Nothing} = nothing,\n    Fx::Union{Matrix{R}, Nothing} = nothing,\n    Fy::Union{Matrix{R}, Nothing} = nothing,\n    Fxx::Union{Matrix{R}, Nothing} = nothing,\n    Fyy::Union{Matrix{R}, Nothing} = nothing,\n    V::Union{Matrix{R}, Nothing} = nothing,\n    Vx::Union{Matrix{R}, Nothing} = nothing,\n    Vy::Union{Matrix{R}, Nothing} = nothing,\n    Γ::Union{R, Nothing} = nothing,\n    MB::Union{Matrix{R}, Nothing} = nothing,\n    MB_mask::Union{BitMatrix, Nothing} = nothing,\n    MB_total::Union{Matrix{R}, Nothing} = nothing,\n    glacier_idx::Union{I, Nothing} = nothing\n) where {I <: Integer, R <: Real}\n\nConstructs a new SIA2Dmodel object with the given parameters.\n\nArguments\n\nparams::Sleipnir.Parameters: Simulation parameters.\nA::Union{R, Nothing}: Flow law parameter (default: nothing).\nn::Union{R, Nothing}: Flow law exponent (default: nothing).\nC::Union{R, Matrix{R}, Nothing}: Basal sliding parameter (default: nothing).\nH₀::Matrix{R}: Initial ice thickness (default: empty matrix).\nH::Union{Matrix{R}, Nothing}: Ice thickness (default: nothing).\nH̄::Union{Matrix{R}, Nothing}: Averaged ice thickness (default: nothing).\nS::Matrix{R}: Surface elevation (default: empty matrix).\ndSdx::Union{Matrix{R}, Nothing}: Surface slope in x-direction (default: nothing).\ndSdy::Union{Matrix{R}, Nothing}: Surface slope in y-direction (default: nothing).\nD::Union{Matrix{R}, Nothing}: Diffusivity (default: nothing).\nD_is_provided::Union{Bool, Nothing}: Specifies if D is provided by user or computed (default: false).\nDx::Union{Matrix{R}, Nothing}: Diffusivity in x-direction (default: nothing).\nDy::Union{Matrix{R}, Nothing}: Diffusivity in y-direction (default: nothing).\ndSdx_edges::Union{Matrix{R}, Nothing}: Surface slope at edges in x-direction (default: nothing).\ndSdy_edges::Union{Matrix{R}, Nothing}: Surface slope at edges in y-direction (default: nothing).\n∇S::Union{Matrix{R}, Nothing}: Gradient of surface elevation (default: nothing).\n∇Sy::Union{Matrix{R}, Nothing}: Gradient of surface elevation in y-direction (default: nothing).\n∇Sx::Union{Matrix{R}, Nothing}: Gradient of surface elevation in x-direction (default: nothing).\nFx::Union{Matrix{R}, Nothing}: Flux in x-direction (default: nothing).\nFy::Union{Matrix{R}, Nothing}: Flux in y-direction (default: nothing).\nFxx::Union{Matrix{R}, Nothing}: Second derivative of flux in x-direction (default: nothing).\nFyy::Union{Matrix{R}, Nothing}: Second derivative of flux in y-direction (default: nothing).\nV::Union{Matrix{R}, Nothing}: Velocity (default: nothing).\nVx::Union{Matrix{R}, Nothing}: Velocity in x-direction (default: nothing).\nVy::Union{Matrix{R}, Nothing}: Velocity in y-direction (default: nothing).\nΓ::Union{R, Nothing}: Auxiliary matrix (default: nothing).\nMB::Union{Matrix{R}, Nothing}: Mass balance (default: nothing).\nMB_mask::Union{BitMatrix, Nothing}: Mask for mass balance (default: nothing).\nMB_total::Union{Matrix{R}, Nothing}: Total mass balance (default: nothing).\nglacier_idx::Union{I, Nothing}: Index of the glacier (default: nothing).\n\nReturns\n\nSIA2Dmodel: A new SIA2Dmodel object.\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"When a simulation will be run in ODINN.jl using an ice flow model, its related equation will be solved using OrdinaryDiffEq.jl. The related equation to a SIA2Dmodel is declared in its related util functions. Generally, these equations need to exist both in-place (to reduce memory allocations and ensure maximum performance, see example below) or out-of-place (to be more AD-friendly).","category":"page"},{"location":"funcs_types/#Huginn.SIA2D!","page":"Types and functions","title":"Huginn.SIA2D!","text":"SIA2D!(dH::Matrix{R}, H::Matrix{R}, simulation::SIM, t::R) where {R <:Real, SIM <: Simulation}\n\nSimulates the evolution of ice thickness in a 2D shallow ice approximation (SIA) model. Works in-place.\n\nArguments\n\ndH::Matrix{R}: Matrix to store the rate of change of ice thickness.\nH::Matrix{R}: Matrix representing the ice thickness.\nsimulation::SIM: Simulation object containing model parameters and state.\nt::R: Current simulation time.\n\nDetails\n\nThis function updates the ice thickness H and computes the rate of change dH using the shallow ice approximation in 2D. It retrieves necessary parameters from the simulation object, enforces positive ice thickness values, updates glacier surface altimetry, computes surface gradients, flux components, and flux divergence.\n\nNotes\n\nThe function operates on a staggered grid for computing gradients and fluxes.\nSurface elevation differences are capped using upstream ice thickness to impose boundary conditions.\nThe function modifies the input matrices dH and H in-place.\n\n\n\n\n\n","category":"function"},{"location":"funcs_types/#Mass-balance-models","page":"Types and functions","title":"Mass balance models","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Mass balance models are used to simulate the simplified thermodynamics of the forcing of the atmosphere on glaciers. As per ice flow models, all specific mass balance models needs to be a subtype of the abstract type MBmodel. Mass balance models are managed by Muninn.jl. For now, we have simple temperature-index models, with either one or two degree-day factors (DDFs) (Hock, 2003):","category":"page"},{"location":"funcs_types/#Muninn.TImodel1","page":"Types and functions","title":"Muninn.TImodel1","text":"TImodel1{F <: AbstractFloat}\n\nA structure representing a temperature index model with degree-day factor and accumulation factor.\n\nKeyword arguments\n\nDDF::F: Degree-day factor, which is a coefficient used to convert temperature into melt.\nacc_factor::F: Accumulation factor, which is a coefficient used to adjust the accumulation of mass.\n\nType Parameters\n\nF: A subtype of AbstractFloat representing the type of the factors.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#Muninn.TImodel1-Tuple{Sleipnir.Parameters}","page":"Types and functions","title":"Muninn.TImodel1","text":"TImodel1(params::Sleipnir.Parameters; DDF::F = 7.0/1000.0, acc_factor::F = 1.0/1000.0) where {F <: AbstractFloat}\n\nCreate a temperature index model with one degree-day factor (DDF) with the given parameters.\n\nArguments\n\nparams::Sleipnir.Parameters: The simulation parameters.\nDDF::F: Degree-day factor (default is 7.0/1000.0).\nacc_factor::F: Accumulation factor (default is 1.0/1000.0).\n\nReturns\n\nTI1_model: An instance of TImodel1 with the specified parameters.\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Surface mass balance models are run in DiscreteCallbacks from OrdinaryDiffEq.jl, which enable the safe execution during the solving of a PDE in specificly prescribed time steps determined in the stepsfield in Sleipnir.SimulationParameters.","category":"page"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"We soon plan to add compatibility with neural networks coming from the MassBalanceMachine, which should become the de facto surface mass balance model in the ODINN.jl ecosystem. ","category":"page"},{"location":"funcs_types/#Machine-Learning-models","page":"Types and functions","title":"Machine Learning models","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Machine learning models are used in the context of Universal Differential Equations (UDEs, Rackauckas et al., 2020) to parametrize or learn specific parts of differential equations. Machine Learning models are manage by ODINN.jl. As per the other types of models, all machine learning models need to be a subtype of the abstract type MLmodel. The default solution here is to use a neural network:","category":"page"},{"location":"funcs_types/#ODINN.NeuralNetwork","page":"Types and functions","title":"ODINN.NeuralNetwork","text":"NeuralNetwork{\n    ChainType <: Lux.Chain,\n    ComponentVectorType <: ComponentVector,\n    NamedTupleType <: NamedTuple\n} <: MLmodel\n\nFeed-forward neural network.\n\nFields\n\narchitecture::ChainType: Flux.Chain neural network architecture\nθ::ComponentVectorType: Neural network parameters\nst::NamedTupleType: Neural network status\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#ODINN.NeuralNetwork-Tuple{Sleipnir.Parameters}","page":"Types and functions","title":"ODINN.NeuralNetwork","text":"NN(params::Parameters;\n    architecture::Union{Flux.Chain, Nothing} = nothing,\n    θ::Union{Vector{AbstractFloat}, Nothing} = nothing)\n\nCreates a new feed-forward neural network.\n\nKeyword arguments\n\narchitecture: Flux.Chain neural network architecture (optional)\nθ: Neural network parameters (optional)\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/#Simulations","page":"Types and functions","title":"Simulations","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"One can run different types of simulations in ODINN.jl. Any specific type of simulation must be a subtype of Simulation. All simulations share the same common interface designed around multiple dispatch. Basically, once a simulation type has been created, one can easily run by calling run!(simulation).","category":"page"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"The main types of simulations are the following ones:","category":"page"},{"location":"funcs_types/#Prediction","page":"Types and functions","title":"Prediction","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"A prediction, also known as a forward simulation, is just a forward simulation given a model configuration, based on parameters, glaciers and models. These are managed in Huginn.jl, since they do not involve any inverse methods nor parameter optimization.","category":"page"},{"location":"funcs_types/#Huginn.Prediction","page":"Types and functions","title":"Huginn.Prediction","text":"Prediction <: Simulation\n\nA mutable struct that represents a prediction simulation.\n\nFields\n\nmodel::Sleipnir.Model: The model used for the prediction.\nglaciers::Vector{Sleipnir.AbstractGlacier}: A vector of glaciers involved in the prediction.\nparameters::Sleipnir.Parameters: The parameters used for the prediction.\nresults::Vector{Results}: A vector of results obtained from the prediction.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#Huginn.Prediction-Union{Tuple{G}, Tuple{Sleipnir.Model, Vector{G}, Sleipnir.Parameters}} where G<:AbstractGlacier","page":"Types and functions","title":"Huginn.Prediction","text":"Prediction(model::Sleipnir.Model, glaciers::Vector{G}, parameters::Sleipnir.Parameters) where {G <: Sleipnir.AbstractGlacier}\n\nCreate a Prediction object using the given model, glaciers, and parameters.\n\nArguments\n\nmodel::Sleipnir.Model: The model used for prediction.\nglaciers::Vector{G}: A vector of glacier objects, where each glacier is a subtype of Sleipnir.AbstractGlacier.\nparameters::Sleipnir.Parameters: The parameters used for the prediction.\n\nReturns\n\nPrediction: A Prediction object based on the input values.\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/#Inversion","page":"Types and functions","title":"Inversion","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"An inversion optimises a given set of model parameters, based on a given target and an optimizer. These are handled by ODINN.jl. ","category":"page"},{"location":"funcs_types/#ODINN.Inversion","page":"Types and functions","title":"ODINN.Inversion","text":"Inversion <: Simulation\n\nA mutable struct that represents an inversion simulation.\n\nFields\n\nmodel::Sleipnir.Model: The model used for the inversion.\nglaciers::Vector{Sleipnir.AbstractGlacier}: A vector of glaciers involved in the inversion.\nparameters::Sleipnir.Parameters: The parameters used for the inversion.\ninversion::Vector{InversionResults}: A vector of results from the inversion.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#ODINN.Inversion-Union{Tuple{G}, Tuple{Sleipnir.Model, Vector{G}, Sleipnir.Parameters}} where G<:AbstractGlacier","page":"Types and functions","title":"ODINN.Inversion","text":"Inversion(model::Sleipnir.Model, glaciers::Vector{G}, parameters::Sleipnir.Parameters) where {G <: Sleipnir.AbstractGlacier}\n\nCreate an Inversion object using the provided model, glaciers, and parameters.\n\nArguments\n\nmodel::Sleipnir.Model: The model to be used for the inversion.\nglaciers::Vector{G}: A vector of glaciers, where each glacier is a subtype of Sleipnir.AbstractGlacier.\nparameters::Sleipnir.Parameters: The parameters to be used for the inversion.\n\nReturns\n\ninversion: An Inversion object initialized with the provided model, glaciers, and parameters.\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/#Functional-inversion","page":"Types and functions","title":"Functional inversion","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"A functional inversion is the inversion of the parameters of a regressor (e.g. a neural network), which parametrize a function that modulates a parameter or set of parameters in a given mechanistic model (e.g. the SIA).","category":"page"},{"location":"funcs_types/#ODINN.FunctionalInversion","page":"Types and functions","title":"ODINN.FunctionalInversion","text":"mutable struct FunctionalInversion <: Simulation\n\nAn object representing a functional inversion simulation (i.e. the inversion of a function using some data-driven regressor).\n\nFields\n\nmodel::Sleipnir.Model: The model used for the simulation.\nglaciers::Vector{Sleipnir.AbstractGlacier}: A vector of glaciers involved in the simulation.\nparameters::Sleipnir.Parameters: The parameters used for the simulation.\nresults::Vector{Results}: A vector to store the results of the simulation.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#ODINN.FunctionalInversion-Union{Tuple{G}, Tuple{Sleipnir.Model, Vector{G}, Sleipnir.Parameters}} where G<:AbstractGlacier","page":"Types and functions","title":"ODINN.FunctionalInversion","text":"function FunctionalInversion(\n    model::Sleipnir.Model,\n    glaciers::Vector{G},\n    parameters::Sleipnir.Parameters\n) where {G <: Sleipnir.AbstractGlacier}\n\nConstructor for FunctionalInversion struct with glacier model information, glaciers, and parameters.\n\nArguments\n\nmodel::Sleipnir.Model: The model used for the simulation.\nglaciers::Vector{G}: A vector of glaciers involved in the simulation.\nparameters::Sleipnir.Parameters: The parameters used for the simulation.\n\nReturns\n\nFunctionalInversion: A new instance of the FunctionalInversion struct.\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/#Results-and-plotting","page":"Types and functions","title":"Results and plotting","text":"","category":"section"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Every Simulation type has an associated Results object(s), one for each one of the glaciers in the simulation. This object, as its name indicates, stores all the results of the simulation, which can be used for data anlysis and plotting. These types are handled by Sleipnir.jl. ","category":"page"},{"location":"funcs_types/#Sleipnir.Results","page":"Types and functions","title":"Sleipnir.Results","text":"mutable struct Results{F <: AbstractFloat, I <: Int}\n\nA mutable struct to store the results of simulations.\n\nFields\n\nrgi_id::String: Identifier for the RGI (Randolph Glacier Inventory).\nH::Vector{Matrix{F}}: Vector of matrices representing glacier ice thickness H over time.\nH_glathida::Matrix{F}: Optional matrix for Glathida ice thicknesses.\nH_ref::Union{Nothing, Vector{Matrix{F}}}: Reference data for ice thickness.\nS::Matrix{F}: Glacier surface altimetry.\nB::Matrix{F}: Glacier bedrock.\nV::Matrix{F}: Glacier ice surface velocities.\nVx::Matrix{F}: x-component of the glacier ice surface velocity V.\nVy::Matrix{F}: y-component of the glacier ice surface velocity V.\nV_ref::Union{Nothing, Matrix{F}}: Reference data for glacier ice surface velocities V.\nVx_ref::Union{Nothing, Matrix{F}}: Reference data for the x-component of the glacier ice surface velocity Vx.\nVy_ref::Union{Nothing, Matrix{F}}: Reference data for the y-component of the glacier ice surface velocity Vy.\nΔx::F: Grid spacing in the x-direction.\nΔy::F: Grid spacing in the y-direction.\nlon::Union{Nothing, F}: Optional longitude value.\nlat::Union{Nothing, F}: Optional latitude value.\nnx::I: Number of grid points in the x-direction.\nny::I: Number of grid points in the y-direction.\ntspan::Vector{F}: Time span of the simulation.\nθ::Union{Nothing, ComponentArray{F}}: Machine learning model parameters.\nloss::Union{Nothing, Vector{F}} Vector with evolution of loss function.\n\n\n\n\n\n","category":"type"},{"location":"funcs_types/#Sleipnir.Results-Union{Tuple{I}, Tuple{IF}, Tuple{F}, Tuple{G}, Tuple{G, IF}} where {G<:AbstractGlacier, F<:AbstractFloat, IF<:AbstractModel, I<:Int64}","page":"Types and functions","title":"Sleipnir.Results","text":"Results(glacier::G, ifm::IF;\n    rgi_id::String = glacier.rgi_id,\n    H::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    H_glathida::Matrix{F} = glacier.H_glathida,\n    H_ref::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    S::Union{Nothing, Matrix{F}} = nothing,\n    B::Union{Nothing, Matrix{F}} = nothing,\n    V::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    Vx::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    Vy::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    V_ref::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    Vx_ref::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    Vy_ref::Union{Nothing, Vector{Matrix{F}}} = nothing,\n    Δx::F = glacier.Δx,\n    Δy::F = glacier.Δy,\n    lon::Union{Nothing, F} = glacier.cenlon,\n    lat::Union{Nothing, F} = glacier.cenlat,\n    nx::I = glacier.nx,\n    ny::I = glacier.ny,\n    t::Union{Vector{F}, Nothing} = nothing,\n    tspan::Union{Tuple{F, F}, Nothing} = nothing,\n    θ::Union{Nothing,ComponentArray{F}} = nothing,\n    loss::Union{Nothing,Vector{F}} = nothing\n) where {G <: AbstractGlacier, F <: AbstractFloat, IF <: AbstractModel, I <: Int}\n\nConstruct a Results object for a glacier simulation.\n\nArguments\n\nglacier::G: The glacier object, subtype of AbstractGlacier.\nifm::IF: The model object, subtype of AbstractModel.\nrgi_id::String: The RGI identifier for the glacier. Defaults to glacier.rgi_id.\nH::Union{Nothing, Vector{Matrix{F}}}: Ice thickness matrices. Defaults to nothing.\nH_glathida::Matrix{F}: Ice thickness from GlaThiDa. Defaults to glacier.H_glathida.\nH_ref::Union{Nothing, Vector{Matrix{F}}}: Reference ice thickness. Defaults to nothing.\nS::Union{Nothing, Matrix{F}}: Surface elevation matrix. Defaults to a zero matrix of the same size as ifm.S.\nB::Union{Nothing, Matrix{F}}: Bed elevation matrix. Defaults to a zero matrix of the same size as glacier.B.\nV::Union{Nothing, Vector{Matrix{F}}}: Velocity magnitude matrix. Defaults to nothing.\nVx::Union{Nothing, Vector{Matrix{F}}}: Velocity in the x-direction matrix. Defaults to nothing.\nVy::Union{Nothing, Vector{Matrix{F}}}: Velocity in the y-direction matrix. Defaults to nothing.\nV_ref::Union{Nothing, Vector{Matrix{F}}}: Reference velocity magnitude matrix. Defaults to nothing.\nVx_ref::Union{Nothing, Vector{Matrix{F}}}: Reference velocity in the x-direction matrix. Defaults to nothing.\nVy_ref::Union{Nothing, Vector{Matrix{F}}}: Reference velocity in the y-direction matrix. Defaults to nothing.\nΔx::F: Grid spacing in the x-direction. Defaults to glacier.Δx.\nΔy::F: Grid spacing in the y-direction. Defaults to glacier.Δy.\nlon::Union{Nothing, F}: Longitude of the glacier center. Defaults to glacier.cenlon.\nlat::Union{Nothing, F}: Latitude of the glacier center. Defaults to glacier.cenlat.\nnx::I: Number of grid points in the x-direction. Defaults to glacier.nx.\nny::I: Number of grid points in the y-direction. Defaults to glacier.ny.\ntspan::Tuple(F, F): Timespan of the simulation.\nθ::Union{Nothing, ComponentArray{F}}: Model parameters. Defaults to nothing.\nloss::Union{Nothing, Vector{F}}: Loss values. Defaults to nothing.\n\nReturns\n\nresults::Results: A Results object containing the simulation results.\n\n\n\n\n\n","category":"method"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"One of the main things one can do with a Results object, is plotting them. The main function to do so is the following one:","category":"page"},{"location":"funcs_types/#Sleipnir.plot_glacier","page":"Types and functions","title":"Sleipnir.plot_glacier","text":"plot_glacier(results::Results, plot_type::String, variables::Vector{Symbol}; kwargs...) -> Figure\n\nGenerate various types of plots for glacier data.\n\nArguments\n\nresults::Results: The results object containing the data to be plotted.\nplot_type::String: Type of plot to generate. Options are:\n\"heatmaps\": Heatmaps for glacier variables like :H, :H₀, :S, :B, :V, :Vx, :Vy, :V_ref.\n\"evolution difference\": Temporal difference metrics (between start and end) for a variable, with optional metrics like \"hist\" (histogram) and \"difference\".\n\"evolution statistics\": Temporal statistical metrics for a variable, with optional metrics like \"average\", \"median\", \"min\", \"max\", and \"std\".\n\"integrated volume\": Temporal evolution of the integrated ice volume for a variable.\n\"bias\": Scatter plot to visualize the bias between two variables.\nvariables::Vector{Symbol}: Variables to be plotted, e.g., :H.\n\nOptional Keyword Arguments\n\ntspan: A tuple representing the start and end time for the simulation.\nmetrics: Metrics to visualize, e.g., [\"average\"] for statistics, [\"difference\"] for difference.\nscale_text_size::Union{Nothing,Float64}: Optional argument to scale the text size for heatmaps.\nthreshold::Vector{F}: Threshold values for filtering data in bias plots.\nfigsize::Tuple{Int64, Int64}: Size of the figure.\n\nReturns\n\nA Figure object containing the desired visualization.\n\nNotes\n\nEnsure the variables and kwargs match the requirements of the specified plot_type.\nThe function routes requests to specific plotting functions based on plot_type.\n\n\n\n\n\n","category":"function"},{"location":"funcs_types/","page":"Types and functions","title":"Types and functions","text":"Another option is to generate a video of the evolution of the glacier's ice thickness during the simulation:","category":"page"},{"location":"funcs_types/#Sleipnir.plot_glacier_vid","page":"Types and functions","title":"Sleipnir.plot_glacier_vid","text":"plot_glacier_vid(\n    plot_type::String,\n    H::Vector{Matrix{Float64}},\n    glacier::Glacier2D,\n    simuparams::SimulationParameters,\n    pathVideo::String;\n    framerate::Int=24,\n    baseTitle::String=\"\"\n)\n\nGenerate various types of videos for glacier data. For now only the evolution of the glacier ice thickness is supported. More types of visualizations will be added in the future. \n\nArguments\n\nplot_type: Type of plot to generate. Options are:\n\"thickness\": Heatmap of the glacier thickness.\nH: A vector of matrices containing the ice thickness over time. This should be   replaced by a Results instance in the future once Results no longer depends on   an iceflow model.\nglacier: A glacier instance.\nsimuparams: The simulation parameters.\npathVideo: Path of the mp4 file to generate.\n\nOptional Keyword Arguments\n\nframerate: The framerate to use for the video generation.\nbaseTitle: The prefix to use in the title of the frames. In each frame it is   concatenated with the value of the year in the form \" (t=XXXX)\".\n\n\n\n\n\n","category":"function"}]
}
