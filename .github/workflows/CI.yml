name: Full tests
on:
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'docs/**'
  push:
    branches: [ "main" ]
    tags: '*'
    paths-ignore:
      - 'docs/**'
env:
  PR_NUMBER: ${{ github.event.number }}
permissions:
  # needed to allow julia-actions/cache to delete old caches that it has created
  actions: write
  contents: read
  pull-requests: write
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  pr-check:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    steps:
      - uses: actions/checkout@v4
      - name: Check if branch has an open PR
        id: check
        run: |
          if gh pr list --head "$GITHUB_REF_NAME" --state open --json number | grep -q '"number":'; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    needs: pr-check
    # Skip CI if PR exists (on push only)
    # Or if there is a label that states the CI is broken because a dependency needs a new release
    if: ${{ (github.event_name != 'push' || needs.pr-check.outputs.skip == 'false') && !contains(github.event.pull_request.labels.*.name, 'CI needs new release') }}
    runs-on: ${{ matrix.os }}
    defaults:
       run:
         shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
        os:
          - ubuntu-latest
          - macos-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - name: Check Julia SSL certifications 🔎🔐
        run: julia -e 'using NetworkOptions; println(NetworkOptions.bundled_ca_roots()); println(NetworkOptions.ca_roots())'
        shell: bash -el {0}
      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - name: Build Julia packages
        uses: julia-actions/julia-buildpkg@v1
      - name: Run tests
        uses: julia-actions/julia-runtest@v1
      - name: Performance benchmark
        id: generate-comment
        run: |
          julia benchmark/run.jl > benchmark/results.txt
          outTxt="$(cat benchmark/results.txt)"
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "comment<<$EOF" >> $GITHUB_OUTPUT
          echo "$outTxt" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
        if: ${{ matrix.os == 'ubuntu-latest' && github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run benchmark') }}
      - name: Publish benchmark
        uses: actions/github-script@v6
        if: ${{ matrix.os == 'ubuntu-latest' && github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run benchmark') }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: `${{ env.PR_NUMBER }}`,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{steps.generate-comment.outputs.comment}}`
            })
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v5
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          files: lcov.info
          fail_ci_if_error: true
